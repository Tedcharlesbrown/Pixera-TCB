{
 "api": [
  {
   "body": "return self()",
   "kind": "func",
   "name": "ref",
   "slotStyle": "leftIn;rightOut;triggerHidden"
  },
  {
   "body": "require \"pixcHelper\"\r\nrequire \"pixcIoCore\"\r\nif self.ioCore ~= nil then\r\n\treturn \r\nend\r\nif self.helper == nil then\r\n\tself.helper = createPixcHelper(pixc,self())\r\nend\r\nself.ioCore = createIoCore()\r\npixc.log(self.helper)\r\npixc.log(self.ioCore)\r\nself.ioCore:setStatusCallbacks(\r\n\tfunction (...) pixc.log(...) end,\r\n\tfunction(isOpen) self().IsOpen(isOpen, true) end)\r\n\t\r\nself.open = false\r\nself.ip = self.helper:getProperty(\"IP\",\"127.0.0.1\")\r\nself.ipLocal = pixc.getRoot().Utils.Network.convertLocalAdapterEntry(self.helper:getProperty(\"Adapter IP\",\"Any\"))\r\nself.dmxMode = self.helper:getProperty(\"DMX Mode\",\"None\")\r\nself.dmxPropIn = self.helper:getProperty(\"DedicatedDmxProperties Input\",\"\")\r\nself.dmxPropOut = self.helper:getProperty(\"DedicatedDmxProperties Output\",\"\")\r\nself.enableSerial = self.helper:getProperty(\"Enable Serial\",\"\")\r\nself.serialBaud = self.helper:getProperty(\"Serial Baudrate\",\"\")\r\nself.serialParity = self.helper:getProperty(\"Serial Parity\",\"\")\r\nself.serialStopbits = self.helper:getProperty(\"Serial Stopbits\",\"\")\r\nself.serialDataBits = self.helper:getProperty(\"Serial Databits\",\"\")\r\nself.serialCallback = function (data) self().Serial.read(data) end\r\nself.serialCallbackHandle = nil\r\nself.serialCallFunctionName = \"addInputData\"\r\nself.IsOpen(false, true)\r\nself.IsConnected(false, true)\r\nself.ioCore:configure(\r\n\tself.ip,\r\n\tself.ipLocal,\r\n\tfunction(c1,i1,c2,i2,c3,i3,c4,i4,c5,i5,c6,i6,c7,i7,c8,i8)\r\n\t\tif c1 then self.Gpi.Gpi1(i1,true);end\r\n\t\tif c2 then self.Gpi.Gpi2(i2,true);end\r\n\t\tif c3 then self.Gpi.Gpi3(i3,true);end\r\n\t\tif c4 then self.Gpi.Gpi4(i4,true);end\r\n\t\tif c5 then self.Gpi.Gpi5(i5,true);end\r\n\t\tif c6 then self.Gpi.Gpi6(i6,true);end\r\n\t\tif c7 then self.Gpi.Gpi7(i7,true);end\r\n\t\tif c8 then self.Gpi.Gpi8(i8,true);end\r\n\tend,\r\n\tfunction(c1,o1,c2,o2,c3,o3,c4,o4,c5,o5,c6,o6,c7,o7,c8,o8)\r\n\t\tif c1 then self.gpo1 =  o1; self.Gpo.setGpo1();end\r\n\t\tif c2 then self.gpo2 =  o2; self.Gpo.setGpo2();end\r\n\t\tif c3 then self.gpo3 =  o3; self.Gpo.setGpo3();end\r\n\t\tif c4 then self.gpo4 =  o4; self.Gpo.setGpo4();end\r\n\t\tif c5 then self.gpo5 =  o5; self.Gpo.setGpo5();end\r\n\t\tif c6 then self.gpo6 =  o6; self.Gpo.setGpo6();end\r\n\t\tif c7 then self.gpo7 =  o7; self.Gpo.setGpo7();end\r\n\t\tif c8 then self.gpo8 =  o8; self.Gpo.setGpo8();end\r\n\tend,\r\n\tfunction(err,state)\r\n\t\tif err~= nil then \r\n\t\t\tself.IsConnected(false,true);\r\n\t\telse\r\n\t\t\tself.IsConnected(state,true);\r\n\t\tend\r\n\tend,\r\n\tself.dmxMode,\r\n\tfunction (dmxInData) \r\n\t\tself.DMX.Helper.inputHandler(dmxInData)\r\n\tend,\r\n\tself.enableSerial,\r\n\tself.serialBaud,\r\n\tself.serialParity,\r\n\tself.serialStopbits,\r\n\tself.serialDataBits,\r\n\tself.serialCallback,\r\n\tself.serialCallbackHandle,\r\n\tself.serialCallFunctionName\r\n\t)\r\n\r\nself.ioCore:setStatusCallbacks(\r\n\tfunction (...) pixc.log(...) end,\r\n\tfunction(isOpen) self().IsOpen(isOpen, true) end)\r\n\t\r\n\r\nself.ioCore:start()\r\n",
   "kind": "func",
   "name": "init"
  },
  {
   "body": "self.IsConnected(false,true);\r\nif self.ioCore == nil then return end\r\nself.ioCore:close()\r\nself.ioCore = nil\r\nself.helper = nil\r\n",
   "kind": "func",
   "name": "uninit"
  },
  {
   "attKind": "internal",
   "body": "self.open = pixcCommon.execAttribute(false, self.open, isOpen, doSet)\n",
   "kind": "func",
   "name": "IsOpen",
   "params": [
    {
     "name": "isOpen",
     "type": "bool"
    },
    {
     "name": "doSet",
     "type": "bool"
    }
   ],
   "slotStyle": "leftNone;rightOut;triggerHidden"
  },
  {
   "attKind": "internal",
   "body": "self.isConnected = pixcCommon.execAttribute(false, self.isConnected, isConnected, doSet)\r\n",
   "kind": "func",
   "name": "IsConnected",
   "params": [
    {
     "name": "isConnected",
     "type": "bool"
    },
    {
     "name": "doSet",
     "type": "bool"
    }
   ],
   "slotStyle": "leftNone;rightOut;triggerHidden"
  },
  {
   "body": "\r\nif self.helper == nil then\r\n\trequire \"pixcHelper\"\r\n\tself.helper = createPixcHelper(pixc,self())\r\nend\r\nself.dmxMode = self.helper:getProperty(\"DMX Mode\",\"None\")\r\nself.dmxPropIn = self.helper:getProperty(\"DedicatedDmxProperties Input\",\"\")\r\nself.dmxPropOut = self.helper:getProperty(\"DedicatedDmxProperties Output\",\"\")\r\n\r\nif self.dmxMode == \"In\" or self.dmxMode == \"In slow\" then\r\n\tself.dmxDSC = self.dmxPropIn;\r\n\tself.dmxDirOut = false;\r\nelseif self.dmxMode == \"Out\" or self.dmxMode == \"Out slow\" then\r\n\tself.dmxDSC = self.dmxPropOut;\r\n\tself.dmxDirOut = true;\r\nend\r\nif self.ioCore ~= nil then \r\n    self.ioCore:close()\r\n    self.IsOpen(false, true)\r\n    self.IsConnected(false, true)\r\nend\r\n\r\nself().dynamicRebuildFromDescriptions(self.DMX.Helper.getDescription(), \"DMX\", \"(.*)\")\r\n",
   "kind": "func",
   "name": "refreshDedicatedDmxProperties"
  },
  {
   "body": "return { \"None\" , \"In\", \"In slow\", \"Out\", \"Out slow\" }\n",
   "kind": "func",
   "name": "getDmxMode",
   "slotStyle": "hidden"
  },
  {
   "elems": [
    {
     "attKind": "standard",
     "body": "\tif val == nil then \r\n\t\tdoSet = false; \r\n\tend\r\n\tself.gpo1= pixcCommon.execAttribute(0, self.gpo1, val, doSet);\r\n\tif self.ioCore ~= nil and val then   \r\n\t\tself.ioCore:setGpo(1,val);\r\n\tend;\r\n\treturn self.gpo1\t\r\n",
     "kind": "func",
     "name": "setGpo1",
     "params": [
      {
       "name": "val",
       "type": "bool"
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "slotStyle": "leftIn;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "body": "\tif val == nil then \r\n\t\tdoSet = false; \r\n\tend\r\n\tself.gpo2= pixcCommon.execAttribute(0, self.gpo2, val, doSet);\r\n\tif self.ioCore ~= nil and val then   \r\n\t\tself.ioCore:setGpo(2,val);\r\n\tend;\r\n\treturn self.gpo2\r\n",
     "kind": "func",
     "name": "setGpo2",
     "params": [
      {
       "name": "val",
       "type": "bool"
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "slotStyle": "leftIn;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "body": "\tif val == nil then \r\n\t\tdoSet = false; \r\n\tend\r\n\tself.gpo3= pixcCommon.execAttribute(0, self.gpo3, val, doSet);\r\n\tif self.ioCore ~= nil and val then   \r\n\t\tself.ioCore:setGpo(3,val);\r\n\tend;\r\n\treturn self.gpo3\t\r\n",
     "kind": "func",
     "name": "setGpo3",
     "params": [
      {
       "name": "val",
       "type": "bool"
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "slotStyle": "leftIn;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "body": "\tif val == nil then \r\n\t\tdoSet = false; \r\n\tend\r\n\tself.gpo4= pixcCommon.execAttribute(0, self.gpo4, val, doSet);\r\n\tif self.ioCore ~= nil and val then   \r\n\t\tself.ioCore:setGpo(4,val);\r\n\tend;\r\n\treturn self.gpo4\r\n",
     "kind": "func",
     "name": "setGpo4",
     "params": [
      {
       "name": "val",
       "type": "bool"
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "slotStyle": "leftIn;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "body": "\tif val == nil then \r\n\t\tdoSet = false; \r\n\tend\r\n\tself.gpo5= pixcCommon.execAttribute(0, self.gpo5, val, doSet);\r\n\tif self.ioCore ~= nil and val then   \r\n\t\tself.ioCore:setGpo(5,val);\r\n\tend;\r\n\treturn self.gpo5\r\n",
     "kind": "func",
     "name": "setGpo5",
     "params": [
      {
       "name": "val",
       "type": "bool"
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "slotStyle": "leftIn;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "body": "\tif val == nil then \r\n\t\tdoSet = false; \r\n\tend\r\n\tself.gpo6= pixcCommon.execAttribute(0, self.gpo6, val, doSet);\r\n\tif self.ioCore ~= nil and val then   \r\n\t\tself.ioCore:setGpo(6,val);\r\n\tend;\r\n\treturn self.gpo6\r\n",
     "kind": "func",
     "name": "setGpo6",
     "params": [
      {
       "name": "val",
       "type": "bool"
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "slotStyle": "leftIn;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "body": "\tif val == nil then \r\n\t\tdoSet = false; \r\n\tend\r\n\tself.gpo7= pixcCommon.execAttribute(0, self.gpo7, val, doSet);\r\n\tif self.ioCore ~= nil and val then   \r\n\t\tself.ioCore:setGpo(7,val);\r\n\tend;\r\n\treturn self.gpo7\t\r\n",
     "kind": "func",
     "name": "setGpo7",
     "params": [
      {
       "name": "val",
       "type": "bool"
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "slotStyle": "leftIn;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "body": "\tif val == nil then \r\n\t\tdoSet = false; \r\n\tend\r\n\tself.gpo8= pixcCommon.execAttribute(0, self.gpo8, val, doSet);\r\n\tif self.ioCore ~= nil and val then   \r\n\t\tself.ioCore:setGpo(8,val);\r\n\tend;\r\n\treturn self.gpo8\r\n",
     "kind": "func",
     "name": "setGpo8",
     "params": [
      {
       "name": "val",
       "type": "bool"
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "slotStyle": "leftIn;rightNone;triggerHidden"
    },
    {
     "body": "\tif self.ioCore ~= nil then\r\n\t\tself.ioCore:toggleGpo(1);\r\n\t\tself.gpo1 =   not self.gpo1; self.Gpo.setGpo1()\t\r\n\tend\r\n",
     "kind": "func",
     "name": "toggleGpo1",
     "slotStyle": "leftIn;rightNone;triggerHidden"
    },
    {
     "body": "\tif self.ioCore ~= nil then\r\n\t\tself.ioCore:toggleGpo(2);\r\n\t\tself.gpo2 =   not self.gpo2; self.Gpo.setGpo2()\t\r\n\tend\r\n",
     "kind": "func",
     "name": "toggleGpo2",
     "slotStyle": "leftIn;rightNone;triggerHidden"
    },
    {
     "body": "\tif self.ioCore ~= nil then\r\n\t\tself.ioCore:toggleGpo(3);\r\n\t\tself.gpo3 =   not self.gpo3; self.Gpo.setGpo3()\t\r\n\tend\r\n",
     "kind": "func",
     "name": "toggleGpo3",
     "slotStyle": "leftIn;rightNone;triggerHidden"
    },
    {
     "body": "\tif self.ioCore ~= nil then\r\n\t\tself.ioCore:toggleGpo(4);\r\n\t\tself.gpo4 =   not self.gpo4; self.Gpo.setGpo4()\t\r\n\tend\r\n",
     "kind": "func",
     "name": "toggleGpo4",
     "slotStyle": "leftIn;rightNone;triggerHidden"
    },
    {
     "body": "\tif self.ioCore ~= nil then\r\n\t\tself.ioCore:toggleGpo(5);\r\n\t\tself.gpo5 =   not self.gpo5; self.Gpo.setGpo5()\t\r\n\tend\r\n",
     "kind": "func",
     "name": "toggleGpo5",
     "slotStyle": "leftIn;rightNone;triggerHidden"
    },
    {
     "body": "\tif self.ioCore ~= nil then\r\n\t\tself.ioCore:toggleGpo(6);\r\n\t\tself.gpo6 =   not self.gpo6; self.Gpo.setGpo6()\t\r\n\tend\r\n",
     "kind": "func",
     "name": "toggleGpo6",
     "slotStyle": "leftIn;rightNone;triggerHidden"
    },
    {
     "body": "\tif self.ioCore ~= nil then\r\n\t\tself.ioCore:toggleGpo(7);\r\n\t\tself.gpo7 =   not self.gpo7; self.Gpo.setGpo7()\t\r\n\tend\r\n",
     "kind": "func",
     "name": "toggleGpo7",
     "slotStyle": "leftIn;rightNone;triggerHidden"
    },
    {
     "body": "\tif self.ioCore ~= nil then\r\n\t\tself.ioCore:toggleGpo(8);\r\n\t\tself.gpo8 =   not self.gpo8; self.Gpo.setGpo8()\t\r\n\tend\r\n",
     "kind": "func",
     "name": "toggleGpo8",
     "slotStyle": "leftIn;rightNone;triggerHidden"
    }
   ],
   "kind": "ns",
   "name": "Gpo"
  },
  {
   "elems": [
    {
     "attKind": "internal",
     "body": "self.gpi1 = pixcCommon.execAttribute(false, self.gpi1, value, doSet)\r\n",
     "kind": "func",
     "name": "Gpi1",
     "params": [
      {
       "name": "value",
       "type": "object"
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "slotStyle": "leftNone;rightOut;triggerHidden"
    },
    {
     "attKind": "internal",
     "body": "self.gpi2 = pixcCommon.execAttribute(false, self.gpi2, value, doSet)\r\n",
     "kind": "func",
     "name": "Gpi2",
     "params": [
      {
       "name": "value",
       "type": "object"
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "slotStyle": "leftNone;rightOut;triggerHidden"
    },
    {
     "attKind": "internal",
     "body": "self.gpi3 = pixcCommon.execAttribute(false, self.gpi3, value, doSet)\r\n",
     "kind": "func",
     "name": "Gpi3",
     "params": [
      {
       "name": "value",
       "type": "object"
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "slotStyle": "leftNone;rightOut;triggerHidden"
    },
    {
     "attKind": "internal",
     "body": "self.gpi4 = pixcCommon.execAttribute(false, self.gpi4, value, doSet)\r\n",
     "kind": "func",
     "name": "Gpi4",
     "params": [
      {
       "name": "value",
       "type": "object"
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "slotStyle": "leftNone;rightOut;triggerHidden"
    },
    {
     "attKind": "internal",
     "body": "self.gpi5 = pixcCommon.execAttribute(false, self.gpi5, value, doSet)\r\n",
     "kind": "func",
     "name": "Gpi5",
     "params": [
      {
       "name": "value",
       "type": "object"
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "slotStyle": "leftNone;rightOut;triggerHidden"
    },
    {
     "attKind": "internal",
     "body": "self.gpi6 = pixcCommon.execAttribute(false, self.gpi6, value, doSet)\r\n",
     "kind": "func",
     "name": "Gpi6",
     "params": [
      {
       "name": "value",
       "type": "object"
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "slotStyle": "leftNone;rightOut;triggerHidden"
    },
    {
     "attKind": "internal",
     "body": "self.gpi7 = pixcCommon.execAttribute(false, self.gpi7, value, doSet)\r\n",
     "kind": "func",
     "name": "Gpi7",
     "params": [
      {
       "name": "value",
       "type": "object"
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "slotStyle": "leftNone;rightOut;triggerHidden"
    },
    {
     "attKind": "internal",
     "body": "self.gpi8 = pixcCommon.execAttribute(false, self.gpi8, value, doSet)\r\n",
     "kind": "func",
     "name": "Gpi8",
     "params": [
      {
       "name": "value",
       "type": "object"
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "slotStyle": "leftNone;rightOut;triggerHidden"
    }
   ],
   "kind": "ns",
   "name": "Gpi"
  },
  {
   "elems": [
    {
     "elems": [
      {
       "body": "--\nif type(data)=='table' then  \n\tself.ioCore:writeDmxOut(data,startIndex-1)\nelseif type(data) == 'number' then\n\ttbl = {}\n\ttbl[1] = data\n\tself.ioCore:writeDmxOut(tbl,startIndex-1)\nelse\nend\n",
       "kind": "func",
       "name": "write",
       "params": [
        {
         "name": "data",
         "type": "object"
        },
        {
         "name": "startIndex",
         "type": "int"
        }
       ]
      },
      {
       "body": "local templateOut = [[\r\n\t{\r\n\t\t\"name\": \"DMX_Out_##IDX##\",\r\n\t\t\"kind\": \"fn\",\r\n\t\t\"attKind\": \"standard\",\r\n\t\t\"slotStyle\": \"leftIn;rightNone;triggerHidden\",\r\n\t\t\"params\": [\r\n\t\t\t{\r\n\t\t\t\t\"name\": \"val\",\r\n\t\t\t\t\"type\": \"int\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"name\": \"doSet\",\r\n\t\t\t\t\"type\": \"bool\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"result\": {\r\n\t\t},\r\n\t\t\"body\": \"if val == nil then doSet = false; end ; self.dmxOut##IDX## = pixcCommon.execAttribute(0, self.dmxOut##IDX##, val, doSet);if self.ioCore ~= nil then   self.DMX.Helper.write(val,##IDX##) ; end;return self.dmxOut##IDX##\"\r\n\t}\r\n]]\r\n\r\nlocal templateIn = [[\r\n\t{\r\n\t\t\"name\": \"DMX_In_##IDX##\",\r\n\t\t\"kind\": \"fn\",\r\n\t\t\"attKind\": \"internal\",\r\n\t\t\"slotStyle\": \"leftNone;rightOut;triggerHidden\",\r\n\t\t\"params\": [\r\n\t\t\t{\r\n\t\t\t\t\"name\": \"value\",\r\n\t\t\t\t\"type\": \"object\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"name\": \"doSet\",\r\n\t\t\t\t\"type\": \"bool\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"result\": {\r\n\t\t},\r\n\t\t\"body\": \"self.dmxIn##IDX## = pixcCommon.execAttribute(false, self.dmxIn##IDX##, value, doSet)\"\r\n\t}\r\n]]\r\nlocal template = templateIn;\r\nif self.dmxDirOut == true then\r\n\ttemplate = templateOut;\r\nend\r\nlocal res = '[';\r\nlocal sets = self.helper.stringSplit(self.dmxDSC,',')\r\nlocal removeLast = false;\r\nfor _, x in ipairs(sets) do\r\n\tif x ~= nil then\r\n\t\tlocal set = self.helper.stringSplit(x,'-');\r\n\t\tlocal vBegin, vEnd\r\n\t\tvBegin = tonumber(set[1]);\r\n\t\tvEnd = tonumber(set[2]);\r\n\t\tremoveLast = true\r\n\t\tif vBegin ~= nil and vEnd ~= nil then\r\n\t\t\tfor i= vBegin, vEnd, 1 do\r\n\t\t\t\tlocal tmod = template;\r\n\t\t\t\tlocal s = tostring(i);\r\n\t\t\t\tlocal c;\r\n\r\n\t\t\t\ttmod, c = string.gsub(tmod,\"##IDX##\", s)\r\n\t\t\t\tres = res..tmod;\r\n\t\t\t\tres = res..','\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\nend\r\nif removeLast == true then\r\n\tres = res:sub(1, -2)\r\nend\r\n\r\nres = res..']'\r\nreturn res;\r\n",
       "kind": "func",
       "name": "getDescription"
      },
      {
       "body": "--\r\nif data ~= nil then\r\n\tfor i=1, 512, 1 do \r\n\t\tif data[i] ~= nil then\r\n\t\t\tlocal tag = \"DMX\"..math.tointeger(i);\r\n\t\t\tif self.DMX[tag] ~=nil then\r\n\t\t\t\tself.DMX[tag](data[i],true)\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\nend\r\n",
       "kind": "func",
       "name": "inputHandler",
       "params": [
        {
         "name": "data",
         "type": "object"
        }
       ]
      }
     ],
     "kind": "ns",
     "name": "Helper"
    },
    {
     "attKind": "standard",
     "body": "if val == nil then doSet = false; end ; self.dmxOut1 = pixcCommon.execAttribute(0, self.dmxOut1, val, doSet);if self.ioCore ~= nil then   self.DMX.Helper.write(val,1) ; end;return self.dmxOut1\r\n",
     "kind": "func",
     "name": "DMX_Out_1",
     "params": [
      {
       "name": "val",
       "type": "int"
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "slotStyle": "leftIn;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "body": "if val == nil then doSet = false; end ; self.dmxOut2 = pixcCommon.execAttribute(0, self.dmxOut2, val, doSet);if self.ioCore ~= nil then   self.DMX.Helper.write(val,2) ; end;return self.dmxOut2\r\n",
     "kind": "func",
     "name": "DMX_Out_2",
     "params": [
      {
       "name": "val",
       "type": "int"
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "slotStyle": "leftIn;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "body": "if val == nil then doSet = false; end ; self.dmxOut3 = pixcCommon.execAttribute(0, self.dmxOut3, val, doSet);if self.ioCore ~= nil then   self.DMX.Helper.write(val,3) ; end;return self.dmxOut3\r\n",
     "kind": "func",
     "name": "DMX_Out_3",
     "params": [
      {
       "name": "val",
       "type": "int"
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "slotStyle": "leftIn;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "body": "if val == nil then doSet = false; end ; self.dmxOut4 = pixcCommon.execAttribute(0, self.dmxOut4, val, doSet);if self.ioCore ~= nil then   self.DMX.Helper.write(val,4) ; end;return self.dmxOut4\r\n",
     "kind": "func",
     "name": "DMX_Out_4",
     "params": [
      {
       "name": "val",
       "type": "int"
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "slotStyle": "leftIn;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "body": "if val == nil then doSet = false; end ; self.dmxOut5 = pixcCommon.execAttribute(0, self.dmxOut5, val, doSet);if self.ioCore ~= nil then   self.DMX.Helper.write(val,5) ; end;return self.dmxOut5\r\n",
     "kind": "func",
     "name": "DMX_Out_5",
     "params": [
      {
       "name": "val",
       "type": "int"
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "slotStyle": "leftIn;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "body": "if val == nil then doSet = false; end ; self.dmxOut6 = pixcCommon.execAttribute(0, self.dmxOut6, val, doSet);if self.ioCore ~= nil then   self.DMX.Helper.write(val,6) ; end;return self.dmxOut6\r\n",
     "kind": "func",
     "name": "DMX_Out_6",
     "params": [
      {
       "name": "val",
       "type": "int"
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "slotStyle": "leftIn;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "body": "if val == nil then doSet = false; end ; self.dmxOut7 = pixcCommon.execAttribute(0, self.dmxOut7, val, doSet);if self.ioCore ~= nil then   self.DMX.Helper.write(val,7) ; end;return self.dmxOut7\r\n",
     "kind": "func",
     "name": "DMX_Out_7",
     "params": [
      {
       "name": "val",
       "type": "int"
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "slotStyle": "leftIn;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "body": "if val == nil then doSet = false; end ; self.dmxOut8 = pixcCommon.execAttribute(0, self.dmxOut8, val, doSet);if self.ioCore ~= nil then   self.DMX.Helper.write(val,8) ; end;return self.dmxOut8\r\n",
     "kind": "func",
     "name": "DMX_Out_8",
     "params": [
      {
       "name": "val",
       "type": "int"
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "slotStyle": "leftIn;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "body": "if val == nil then doSet = false; end ; self.dmxOut9 = pixcCommon.execAttribute(0, self.dmxOut9, val, doSet);if self.ioCore ~= nil then   self.DMX.Helper.write(val,9) ; end;return self.dmxOut9\r\n",
     "kind": "func",
     "name": "DMX_Out_9",
     "params": [
      {
       "name": "val",
       "type": "int"
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "slotStyle": "leftIn;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "body": "if val == nil then doSet = false; end ; self.dmxOut10 = pixcCommon.execAttribute(0, self.dmxOut10, val, doSet);if self.ioCore ~= nil then   self.DMX.Helper.write(val,10) ; end;return self.dmxOut10\r\n",
     "kind": "func",
     "name": "DMX_Out_10",
     "params": [
      {
       "name": "val",
       "type": "int"
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "slotStyle": "leftIn;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "body": "if val == nil then doSet = false; end ; self.dmxOut11 = pixcCommon.execAttribute(0, self.dmxOut11, val, doSet);if self.ioCore ~= nil then   self.DMX.Helper.write(val,11) ; end;return self.dmxOut11\r\n",
     "kind": "func",
     "name": "DMX_Out_11",
     "params": [
      {
       "name": "val",
       "type": "int"
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "slotStyle": "leftIn;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "body": "if val == nil then doSet = false; end ; self.dmxOut12 = pixcCommon.execAttribute(0, self.dmxOut12, val, doSet);if self.ioCore ~= nil then   self.DMX.Helper.write(val,12) ; end;return self.dmxOut12\r\n",
     "kind": "func",
     "name": "DMX_Out_12",
     "params": [
      {
       "name": "val",
       "type": "int"
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "slotStyle": "leftIn;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "body": "if val == nil then doSet = false; end ; self.dmxOut13 = pixcCommon.execAttribute(0, self.dmxOut13, val, doSet);if self.ioCore ~= nil then   self.DMX.Helper.write(val,13) ; end;return self.dmxOut13\r\n",
     "kind": "func",
     "name": "DMX_Out_13",
     "params": [
      {
       "name": "val",
       "type": "int"
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "slotStyle": "leftIn;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "body": "if val == nil then doSet = false; end ; self.dmxOut14 = pixcCommon.execAttribute(0, self.dmxOut14, val, doSet);if self.ioCore ~= nil then   self.DMX.Helper.write(val,14) ; end;return self.dmxOut14\r\n",
     "kind": "func",
     "name": "DMX_Out_14",
     "params": [
      {
       "name": "val",
       "type": "int"
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "slotStyle": "leftIn;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "body": "if val == nil then doSet = false; end ; self.dmxOut15 = pixcCommon.execAttribute(0, self.dmxOut15, val, doSet);if self.ioCore ~= nil then   self.DMX.Helper.write(val,15) ; end;return self.dmxOut15\r\n",
     "kind": "func",
     "name": "DMX_Out_15",
     "params": [
      {
       "name": "val",
       "type": "int"
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "slotStyle": "leftIn;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "body": "if val == nil then doSet = false; end ; self.dmxOut16 = pixcCommon.execAttribute(0, self.dmxOut16, val, doSet);if self.ioCore ~= nil then   self.DMX.Helper.write(val,16) ; end;return self.dmxOut16\r\n",
     "kind": "func",
     "name": "DMX_Out_16",
     "params": [
      {
       "name": "val",
       "type": "int"
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "slotStyle": "leftIn;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "body": "if val == nil then doSet = false; end ; self.dmxOut17 = pixcCommon.execAttribute(0, self.dmxOut17, val, doSet);if self.ioCore ~= nil then   self.DMX.Helper.write(val,17) ; end;return self.dmxOut17\r\n",
     "kind": "func",
     "name": "DMX_Out_17",
     "params": [
      {
       "name": "val",
       "type": "int"
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "slotStyle": "leftIn;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "body": "if val == nil then doSet = false; end ; self.dmxOut18 = pixcCommon.execAttribute(0, self.dmxOut18, val, doSet);if self.ioCore ~= nil then   self.DMX.Helper.write(val,18) ; end;return self.dmxOut18\r\n",
     "kind": "func",
     "name": "DMX_Out_18",
     "params": [
      {
       "name": "val",
       "type": "int"
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "slotStyle": "leftIn;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "body": "if val == nil then doSet = false; end ; self.dmxOut19 = pixcCommon.execAttribute(0, self.dmxOut19, val, doSet);if self.ioCore ~= nil then   self.DMX.Helper.write(val,19) ; end;return self.dmxOut19\r\n",
     "kind": "func",
     "name": "DMX_Out_19",
     "params": [
      {
       "name": "val",
       "type": "int"
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "slotStyle": "leftIn;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "body": "if val == nil then doSet = false; end ; self.dmxOut20 = pixcCommon.execAttribute(0, self.dmxOut20, val, doSet);if self.ioCore ~= nil then   self.DMX.Helper.write(val,20) ; end;return self.dmxOut20\r\n",
     "kind": "func",
     "name": "DMX_Out_20",
     "params": [
      {
       "name": "val",
       "type": "int"
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "slotStyle": "leftIn;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "body": "if val == nil then doSet = false; end ; self.dmxOut21 = pixcCommon.execAttribute(0, self.dmxOut21, val, doSet);if self.ioCore ~= nil then   self.DMX.Helper.write(val,21) ; end;return self.dmxOut21\r\n",
     "kind": "func",
     "name": "DMX_Out_21",
     "params": [
      {
       "name": "val",
       "type": "int"
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "slotStyle": "leftIn;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "body": "if val == nil then doSet = false; end ; self.dmxOut22 = pixcCommon.execAttribute(0, self.dmxOut22, val, doSet);if self.ioCore ~= nil then   self.DMX.Helper.write(val,22) ; end;return self.dmxOut22\r\n",
     "kind": "func",
     "name": "DMX_Out_22",
     "params": [
      {
       "name": "val",
       "type": "int"
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "slotStyle": "leftIn;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "body": "if val == nil then doSet = false; end ; self.dmxOut23 = pixcCommon.execAttribute(0, self.dmxOut23, val, doSet);if self.ioCore ~= nil then   self.DMX.Helper.write(val,23) ; end;return self.dmxOut23\r\n",
     "kind": "func",
     "name": "DMX_Out_23",
     "params": [
      {
       "name": "val",
       "type": "int"
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "slotStyle": "leftIn;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "body": "if val == nil then doSet = false; end ; self.dmxOut24 = pixcCommon.execAttribute(0, self.dmxOut24, val, doSet);if self.ioCore ~= nil then   self.DMX.Helper.write(val,24) ; end;return self.dmxOut24\r\n",
     "kind": "func",
     "name": "DMX_Out_24",
     "params": [
      {
       "name": "val",
       "type": "int"
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "slotStyle": "leftIn;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "body": "if val == nil then doSet = false; end ; self.dmxOut25 = pixcCommon.execAttribute(0, self.dmxOut25, val, doSet);if self.ioCore ~= nil then   self.DMX.Helper.write(val,25) ; end;return self.dmxOut25\r\n",
     "kind": "func",
     "name": "DMX_Out_25",
     "params": [
      {
       "name": "val",
       "type": "int"
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "slotStyle": "leftIn;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "body": "if val == nil then doSet = false; end ; self.dmxOut26 = pixcCommon.execAttribute(0, self.dmxOut26, val, doSet);if self.ioCore ~= nil then   self.DMX.Helper.write(val,26) ; end;return self.dmxOut26\r\n",
     "kind": "func",
     "name": "DMX_Out_26",
     "params": [
      {
       "name": "val",
       "type": "int"
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "slotStyle": "leftIn;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "body": "if val == nil then doSet = false; end ; self.dmxOut27 = pixcCommon.execAttribute(0, self.dmxOut27, val, doSet);if self.ioCore ~= nil then   self.DMX.Helper.write(val,27) ; end;return self.dmxOut27\r\n",
     "kind": "func",
     "name": "DMX_Out_27",
     "params": [
      {
       "name": "val",
       "type": "int"
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "slotStyle": "leftIn;rightNone;triggerHidden"
    },
    {
     "attKind": "standard",
     "body": "if val == nil then doSet = false; end ; self.dmxOut28 = pixcCommon.execAttribute(0, self.dmxOut28, val, doSet);if self.ioCore ~= nil then   self.DMX.Helper.write(val,28) ; end;return self.dmxOut28\r\n",
     "kind": "func",
     "name": "DMX_Out_28",
     "params": [
      {
       "name": "val",
       "type": "int"
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "slotStyle": "leftIn;rightNone;triggerHidden"
    }
   ],
   "kind": "ns",
   "name": "DMX"
  },
  {
   "elems": [
    {
     "body": "\r\nself.ioCore:writeSerial(val)\r\n",
     "kind": "func",
     "name": "write",
     "params": [
      {
       "name": "val",
       "type": "string"
      }
     ]
    },
    {
     "body": "",
     "kind": "func",
     "name": "read",
     "params": [
      {
       "name": "data",
       "type": "string"
      }
     ]
    }
   ],
   "kind": "ns",
   "name": "Serial"
  }
 ],
 "cjv": {
  "h": 200.0,
  "w": 200.0,
  "x": 384.6153846153846,
  "y": 223.07692307692307
 },
 "definedExternally": false,
 "hostInfo": {
  "systemType": ""
 },
 "libraryExportPath": "C:/PixeraCode/nui/data/control_library_standard/Drivers/VisualProductions/IoCore2.json",
 "license": "1GNTlyr7sewU1l3S6nhV4m+QhdBW+/asG9+otx8XMOLC4osRvGC4hRtDKH3B8+KV6TMfh8sOYdrmr2uwIp4sIE3G4420Uhrvk8s2N+oVC/VtNjBQi85Or3DhgO/NEGUlq0+2Zjmgde2ZNgcRIIwj/Q==",
 "name": "IoCore2",
 "properties": [
  {
   "cont": "AV Stumpfl GmbH (ME)",
   "name": "Author",
   "readOnly": true,
   "typeHint": "string"
  },
  {
   "cont": "1",
   "name": "Version",
   "readOnly": true,
   "typeHint": "number"
  },
  {
   "cont": "",
   "imageBase64": "",
   "name": " ",
   "typeHint": "image"
  },
  {
   "cont": "www.visualproductions.nl ",
   "name": "        ",
   "readOnly": true,
   "typeHint": "url"
  },
  {
   "cont": "10.1.51.67",
   "name": "IP",
   "typeHint": "string"
  },
  {
   "cont": "Any",
   "name": "Adapter IP",
   "optionsSourceFunc": "Utils.Network.getLocalAdapterEntries",
   "typeHint": "string"
  },
  {
   "cont": "false",
   "name": "Auto Init",
   "typeHint": "bool"
  },
  {
   "cont": "Out",
   "name": "DMX Mode",
   "optionsSourceFunc": "Utils.IoCore.getAvailableDmxModes",
   "typeHint": "string"
  },
  {
   "cont": "1-9,10-12",
   "name": "DedicatedDmxProperties Input",
   "typeHint": "string"
  },
  {
   "cont": "1-7,20-28",
   "name": "DedicatedDmxProperties Output",
   "typeHint": "string"
  },
  {
   "cont": "false",
   "name": "Enable Serial",
   "typeHint": "bool"
  },
  {
   "cont": "38400",
   "name": "Serial Baudrate",
   "optionsSourceFunc": "Utils.IoCore.getAvailableBaudrates",
   "typeHint": "string"
  },
  {
   "cont": "None",
   "name": "Serial Parity",
   "optionsSourceFunc": "Utils.IoCore.getAvailableParities",
   "typeHint": "string"
  },
  {
   "cont": "8",
   "name": "Serial Databits",
   "optionsSourceFunc": "Utils.IoCore.getAvailableDatabits",
   "typeHint": "string"
  },
  {
   "cont": "1",
   "name": "Serial Stopbits",
   "optionsSourceFunc": "Utils.IoCore.getAvailableStopbits",
   "typeHint": "string"
  }
 ],
 "separateCode": false,
 "uiUrl": ""
}