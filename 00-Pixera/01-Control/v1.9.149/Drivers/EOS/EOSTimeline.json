{
 "api": [
  {
   "body": "return self()",
   "kind": "func",
   "name": "ref"
  },
  {
   "body": "require \"pixcHelper\"\nrequire \"pixcNetwork\"\nif self.lock == true then return end\nif self.helper ~= nil then\n    self.lock = true --lock to not call init multiply times\n\tself.uninit()\n\tUtils.Timer.sleep(1000)\nend\nself.lock = nil\nif self.helper == nil then\n\tself.helper = createPixcHelper(pixc,self())\nend\nself.network = createPixcNetwork()\nself.connected = false\nself.IsConnected(false, true)\nself.ip = self.helper:getProperty(\"IP\",\"127.0.0.1\")\nself.port = tonumber(self.helper:getProperty(\"Port\",\"6451\"))\nself.log = self.helper:getProperty(\"Log Messages\",\"false\")\nself.list = tonumber(self.helper:getProperty(\"List\"))\nself.ignore = self.helper:getProperty(\"Ignore double received Cues\",\"false\")\nself.timeline = self.helper:getProperty(\"Timeline\")\nself.ipLocal =pixc.getRoot().Utils.Network.convertLocalAdapterEntry(self.helper:getProperty(\"Adapter IP\",\"0.0.0.0\"))\nself.oscver = self.helper:getProperty(\"OSC Version\",\"1.0\")\nself.useUdp = self.helper.toBool(self.helper:getProperty(\"Use UDP\",false))\nself.useCueNumbers = self.helper.toBool(self.helper:getProperty(\"Use Cue Numbers\",false))\n\nlocal ready = false\n\nif self.useUdp == true then\n--configure udp network\n\trequire \"pixcProtocolOsc\"\n\tself.protocol = createPixcProtocolOsc()\n\tself.protocol:create()\n\tself.protocol:addOscMatcherWildcard(\"/\", true,function(...) self.receive(...) end)\n\n\tself.network:configureUdp(\n\t\tself.ip,\n\t\t0, --send is disabled\n\t\tself.ipLocal,\n\t\tself.port,\n\t\tfunction (handle, data)  end,\n\t\tfunction(handle, error) pixc.log(\"closeCallback: \"..error) end)\n\tself.network:setStatusCallbacks(\n\t\tfunction (...) pixc.log(...) end,\n\t\tfunction(isOpen)\n\t\t\tself().IsConnected(isOpen, true)\n\t\t\tready = true\n\t\tend)\n\t\tself.network:setDestinationFunction(self.protocol:getInstance(),\"addInputData\")\nelse\n--configure tcp network\n\tself.network:configureTcp(\n\t\tself.ip,\n\t\tself.port,\n\t\tfunction (handle, data) self().receive(data) end,\n\t\tfunction(handle, error)\n\t\t\tpixc.log(\"closeCallback: \"..error)\n\t\t\tready = true\n\t\tend,\n\t\tself.ipLocal)\n\tself.network:setStatusCallbacks(\n\t\tfunction (...) pixc.log(...) end,\n\t\tfunction(isConnected)\n\t\t\tself().IsConnected(isConnected, true)\n\t\t\tready = true\n\t\tend)\nend\n\nself.network:start()\n\nif blocking then\n    while not ready do\n        Utils.Timer.sleep(100)\n    end\nend\n",
   "kind": "func",
   "name": "init",
   "params": [
    {
     "name": "blocking",
     "type": "bool"
    }
   ]
  },
  {
   "body": "if self.network == nil then return end\r\nself.network:close()\r\nself.network = nil\r\nself.helper = nil\r\n",
   "kind": "func",
   "name": "uninit"
  },
  {
   "body": "if not self.IsConnected(nil, false) then\r\n    self.init(true)\r\nend\r\nself.network:send(msg)\r\n",
   "kind": "func",
   "name": "send",
   "params": [
    {
     "name": "msg",
     "type": "string"
    }
   ]
  },
  {
   "body": "if msg == nil or type(msg) ~= \"string\" then\r\n\treturn\r\nend\r\n\r\nlocal t = {}\r\n\r\nif self.useUdp == false then\r\n\tlocal function hexencode(str)\r\n\t\tlocal countTill = 3\r\n\t\tif self.oscver == \"1.1\" then\r\n\t\t\tcountTill = 1\r\n\t\tend\r\n\t\tlocal addr = \"\"\r\n\t\tlocal count = 0\r\n\t\t\tstr:gsub(\".\", function(char)\r\n\t\t\t\tif count > countTill then\r\n\t\t\t\t\tif char ~= nil then\r\n\t\t\t\t\t\tif char:byte() ~= 0 then\r\n\t\t\t\t\t\t\taddr = addr .. string.char(char:byte())\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\t\tcount = count + 1\r\n\t\t\tend)\r\n\t\t\t--if self.log == \"true\" then\r\n\t\t\t--\tpixc.log(addr)\r\n\t\t\t--end\r\n\t\t\tif addr == nil or addr == \"\" or type(addr) ~= \"string\" then\r\n\t\t\t\tpixc.warning(\"Fail. Got NIL\")\r\n\t\t\t\treturn nil\r\n\t\t\tend\r\n\t\t\taddr = self.helper.stringSplit(addr,\",\")\r\n\t\t\taddr = self.helper.stringSplit(addr[1],\"/\")\r\n\t\treturn addr\r\n\tend\r\n\tt = hexencode(msg)\r\nelse\r\n\tt = self.helper.stringSplit(msg,\"/\")\r\nend\r\n\r\n\r\nif t == nil then return end\r\nif self.list == nil then return end\r\nif self._mute ~= nil and self._mute == false then\r\n\tif t[1] == \"eos\" and t[2] == \"out\" and t[3] == \"event\" and t[4] == \"cue\" and t[5] == tostring(math.floor(self.list)) and t[7] == \"fire\" then\r\n\t\tif self.log == \"true\" then\r\n\t\t\tpixc.log(table.concat(t,\"/\"))\r\n\t\tend\r\n\t\tlocal h = Pixera.Timelines.Timeline.getInst(self.timeline)\r\n\t\tif h ~= nil then\r\n\t\t\tlocal handle\r\n\t\t\tif self.useCueNumbers == true then\r\n\t\t\t\tlocal tempNumber = tonumber(t[6])\r\n\t\t\t\tif tempNumber == nil then pixc.warning(self() \" Cue was not a number.\"); return end\r\n\t\t\t\ttempNumber = tempNumber * 1000\r\n\t\t\t\tif self.ignore == \"true\" and h.getCuePrevious().getNumber() == tempNumber then\r\n\t\t\t\t\treturn\r\n\t\t\t\tend\r\n\t\t\t\thandle = h.getCueFromNumber(tempNumber)\r\n\t\t\telse\r\n\t\t\t\tif self.ignore == \"true\" and h.getCuePrevious().getName() == t[6] then\r\n\t\t\t\t\treturn\r\n\t\t\t\tend\r\n\t\t\t\tfor i,_ in pairs(h.getCues()) do\r\n\t\t\t\t\tif _.getName() == t[6] then\r\n\t\t\t\t\t\thandle = _\r\n\t\t\t\t\t\tgoto execute\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\t::execute::\r\n\t\t\tif handle == nil then return end\r\n\t\t\tif h.getCurrentTime() ~= handle.getTime() then\r\n\t\t\t\thandle.apply()\r\n\t\t\tend\r\n\t\t\tif handle.getOperation() ~= 1 then\r\n\t\t\t\th.play()\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\nend\r\n\r\n",
   "kind": "func",
   "name": "receive",
   "params": [
    {
     "name": "msg",
     "type": "string"
    }
   ]
  },
  {
   "attKind": "internal",
   "body": "self.connected = pixcCommon.execAttribute(false, self.connected, isConnected, doSet)\n",
   "kind": "func",
   "name": "IsConnected",
   "params": [
    {
     "name": "isConnected",
     "type": "bool"
    },
    {
     "name": "doSet",
     "type": "bool"
    }
   ]
  },
  {
   "body": "local t = {}\r\nfor i,_ in pairs(Pixera.Timelines.getTimelines()) do\r\n\ttable.insert(t,_.getName())\r\nend\r\nreturn t",
   "kind": "func",
   "name": "getTimelines",
   "slotStyle": "hidden"
  },
  {
   "elems": [
    {
     "body": "self.Mute.mute(true,true)",
     "kind": "func",
     "name": "muteInput"
    },
    {
     "body": "self.Mute.mute(false,true)",
     "kind": "func",
     "name": "unMuteInput"
    },
    {
     "attKind": "standard",
     "attReports": {
      "0": "false"
     },
     "body": "self._mute = pixcCommon.execAttribute(0, self._mute, val, doSet)\r\nreturn self._mute\r\n",
     "kind": "func",
     "name": "mute",
     "params": [
      {
       "name": "val",
       "type": ""
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "slotStyle": "leftNone;rightNone;triggerHidden"
    }
   ],
   "kind": "ns",
   "name": "Mute"
  },
  {
   "body": "local version = {\"1.0\",\"1.1\"}\r\nreturn version",
   "kind": "func",
   "name": "oscVersion",
   "slotStyle": "hidden"
  }
 ],
 "cjv": {
  "h": 200.0,
  "w": 200.0,
  "x": 196.09090909090912,
  "y": 60.09090909090909
 },
 "definedExternally": false,
 "hostInfo": {
  "systemType": ""
 },
 "libraryExportPath": "C:/PixeraCode/control-modules/control_library_standard/Drivers/EOS/EOSTimeline.json",
 "license": "1GNTlyr7sewU1l3S6nhV4toMisgld/UomZKAlQZ9diOAxuShSjfOD3qcPHBNH5kv59BCgebiP23lbL/UGW2XitJqdeHW1wzdbTQdR7BS5tE28jRSuGXxKqldRjs4xJ34q0WlZZFXnp7aCtOAKQ8Ucmj9hRBD2ZTuaa9JGR3Iy74=",
 "name": "EOSTimeline",
 "properties": [
  {
   "cont": "true",
   "name": "Auto Init",
   "typeHint": "bool"
  },
  {
   "area": "Config",
   "cont": "true",
   "name": "Log Messages",
   "typeHint": "bool"
  },
  {
   "area": "Config",
   "cont": "false",
   "name": "Ignore double received Cues",
   "typeHint": "bool"
  },
  {
   "area": "Config",
   "cont": "false",
   "name": "Use UDP",
   "typeHint": "bool"
  },
  {
   "area": "Config",
   "cont": "false",
   "name": "Use Cue Numbers",
   "typeHint": "bool"
  },
  {
   "cont": "127.0.0.1",
   "name": "IP",
   "typeHint": "string"
  },
  {
   "cont": "3032",
   "name": "Port",
   "typeHint": "number"
  },
  {
   "cont": "Default",
   "name": "Adapter IP",
   "optionsSourceFunc": "Utils.Network.getLocalAdapterEntries",
   "typeHint": "string"
  },
  {
   "cont": "1",
   "name": "List",
   "typeHint": "number"
  },
  {
   "cont": "Timeline 1",
   "name": "Timeline",
   "optionsSourceFunc": "self.getTimelines",
   "typeHint": "string"
  },
  {
   "cont": "1.0",
   "name": "OSC Version",
   "optionsSourceFunc": "self.oscVersion"
  },
  {
   "cont": "TCP OSC needs to be enabled with TCP format for OSC 1.0. && System->Show Control-> OSC -> OSC TX needs to be enabled.  Default Port TCP OSC 3032  For Cue Number you need to set the Pixera Number to *1000 to get point cues.  Eos Cue 1.234 = Pixera Cue 1234  Eos Cue 2 = Pixera Cue 2000  Please Reconnect if you change config settings  ",
   "name": "Description",
   "readOnly": true,
   "typeHint": "string"
  },
  {
   "cont": "AVStumpfl GmbH (Benni M.)",
   "name": "Author",
   "readOnly": true,
   "typeHint": "string"
  },
  {
   "cont": "Logo",
   "imageBase64": "",
   "name": "Logo",
   "readOnly": true,
   "showName": false,
   "typeHint": "image"
  },
  {
   "cont": "www.pixera.one",
   "name": "URL",
   "readOnly": true,
   "typeHint": "url"
  },
  {
   "cont": "1.4",
   "name": "Version",
   "readOnly": true,
   "typeHint": "string"
  }
 ],
 "separateCode": false,
 "uiUrl": ""
}