{
 "api": [
  {
   "body": "return self()",
   "kind": "func",
   "name": "ref",
   "slotStyle": "leftIn"
  },
  {
   "body": "require \"pixcProtocolHttp\"\r\nif self.doubleInit ~= nil then return end\r\nif self.protocol ~= nil then\r\n\tself.doubleInit = true\r\n\tself.uninit()\r\n\tUtils.Timer.sleep(1000)\r\nend\r\nself.doubleInit = nil\r\nself.json = require \"json\" \r\nself.protocol = createPixcProtocolHttp()\r\nself.Internal.updateMac()\r\nself.Internal.updateStats()\r\nself.installs = self().getProperty(\"Installs\")\r\nself.timer = tonumber(self().getProperty(\"Refresh Time in sec\",5))\r\nself._interval = pixc.getRoot().Utils.Timer.setInterval(\r\n\tfunction()\r\n\t\tself.Internal.updateStats()\r\n\t  end,self.timer * 1000)",
   "kind": "func",
   "name": "init"
  },
  {
   "body": "if self.protocol ~= nil then\r\n\tself.protocol:close()\r\nend\r\nif self._interval ~= nil then\r\n\tpixc.getRoot().Utils.Timer.clearInterval(self._interval);\r\n\tself._interval = nil\r\nend\r\nself.protocol = nil\r\n",
   "kind": "func",
   "name": "uninit"
  },
  {
   "body": "self.uninit()\r\nUtils.Timer.sleep(100)\r\nself.init()\r\n",
   "kind": "func",
   "name": "reconnect"
  },
  {
   "attKind": "internal",
   "body": "self._IP = pixcCommon.execAttribute(0, self._IP, val, doSet)\r\nreturn self._IP\r\n",
   "kind": "func",
   "name": "IP",
   "params": [
    {
     "name": "val",
     "type": ""
    },
    {
     "name": "doSet",
     "type": "bool"
    }
   ],
   "slotStyle": "leftNone;rightOut;triggerHidden"
  },
  {
   "attKind": "internal",
   "body": "self._PORT = pixcCommon.execAttribute(0, self._PORT, val, doSet)\r\nreturn self._PORT\r\n",
   "kind": "func",
   "name": "PORT",
   "params": [
    {
     "name": "val",
     "type": ""
    },
    {
     "name": "doSet",
     "type": "bool"
    }
   ],
   "slotStyle": "leftNone;rightOut;triggerHidden"
  },
  {
   "attKind": "standard",
   "attReports": {
    "0": ""
   },
   "body": "self._MAC = pixcCommon.execAttribute(\"\", self._MAC, val, doSet)\r\nreturn self._MAC\r\n",
   "kind": "func",
   "name": "MAC",
   "params": [
    {
     "name": "val",
     "type": "string"
    },
    {
     "name": "doSet",
     "type": "bool"
    }
   ],
   "result": {
    "name": "result",
    "type": "string"
   },
   "slotStyle": "leftNone;rightOut;triggerHidden"
  },
  {
   "attKind": "internal",
   "body": "if ans == nil then pixc.report(false) pixc.callRefs(false) return false end\r\nif ans.type ~= 'pixera' then\r\n\tpixc.report(false)\r\n\tpixc.callRefs(false)\r\nelse\r\n\tpixc.report(true)\r\n\tpixc.callRefs(true)\r\n\tself.startetVersion(ans.version.str,true)\r\nend\r\nreturn ans.type == 'pixera'\r\n",
   "kind": "func",
   "name": "isPixeraRunning",
   "params": [
    {
     "name": "ans",
     "type": "table"
    }
   ],
   "slotStyle": "leftNone;rightOut;triggerHidden"
  },
  {
   "attKind": "internal",
   "body": "local ans = self.Internal.query('pixera.running')\r\nif ans == nil then pixc.report(false) pixc.callRefs(false) return false end\r\nif ans.type ~= 'presence' then\r\n\tpixc.report(false)\r\n\tpixc.callRefs(false)\r\nelse\r\n\tpixc.report(true)\r\n\tpixc.callRefs(true)\r\n\tself.startetVersion(ans.version.str,true)\r\nend\r\nreturn ans.type == 'presence'",
   "kind": "func",
   "name": "isPresenceRunning",
   "params": [
    {
     "name": "ans",
     "type": "table"
    }
   ],
   "slotStyle": "leftNone;rightOut;triggerHidden"
  },
  {
   "attKind": "internal",
   "body": "self._getStartetVersion = pixcCommon.execAttribute(0, self._getStartetVersion, val, doSet)\r\nreturn self._getStartetVersion\r\n",
   "kind": "func",
   "name": "startetVersion",
   "params": [
    {
     "name": "val",
     "type": ""
    },
    {
     "name": "doSet",
     "type": "bool"
    }
   ],
   "slotStyle": "leftNone;rightNone;triggerHidden"
  },
  {
   "attKind": "internal",
   "body": "local ans = self.Internal.query('pixera.defaultVersion')\r\npixc.report(ans)\r\npixc.callRefs(ans)\r\nreturn ans\r\n",
   "kind": "func",
   "name": "getDefaultVersion",
   "params": [
    {
     "name": "val",
     "type": ""
    },
    {
     "name": "doSet",
     "type": "bool"
    }
   ],
   "slotStyle": "leftNone;rightOut;triggerHidden"
  },
  {
   "body": "local ans = self.Internal.query('pixera.installs')\r\nlocal res = {}\r\ntable.insert(res, 'Default')\r\nif ans ~= nil then\r\n\tfor _, entry in ipairs(ans) do\r\n   \t\ttable.insert(res, entry.version.str)\r\n\tend\r\nend\r\nreturn res\r\n",
   "kind": "func",
   "name": "getInstalls",
   "slotStyle": "leftNone;rightOut;triggerHidden"
  },
  {
   "body": "if force == nil then\r\n    force = false\r\nend\r\nlocal body = {type = \"reboot\", force = force}\r\nself.Internal.mutate('system.shutdown', body)\r\n",
   "kind": "func",
   "name": "reboot",
   "params": [
    {
     "name": "force",
     "type": "boolean"
    }
   ]
  },
  {
   "body": "if force == nil then\r\n    force = false\r\nend\r\nlocal body = {type = \"shutdown\", force = force}\r\nself.Internal.mutate('system.shutdown', body)\r\n",
   "kind": "func",
   "name": "shutdown",
   "params": [
    {
     "name": "force",
     "type": "bool"
    }
   ]
  },
  {
   "body": "if version == nil then\r\n\tif self.installs == nil or self.installs == 'Default' then\r\n    \tversion = self.getDefaultVersion()\r\n\telse\r\n\t\tversion = self.installs\r\n\tend\r\nend\r\nlocal body = {type = \"pixera\", version = version}\r\nself.Internal.mutate('pixera.launch', body)\r\n",
   "kind": "func",
   "name": "startPixera",
   "params": [
    {
     "name": "version",
     "type": "string"
    }
   ]
  },
  {
   "body": "if version == nil then\r\n    version = self.getDefaultVersion()\r\nend\r\nlocal body = {type = \"presence\", version = version}\r\nself.Internal.mutate('pixera.launch', body)\r\n",
   "kind": "func",
   "name": "startPresence",
   "params": [
    {
     "name": "version",
     "type": "string"
    }
   ]
  },
  {
   "body": "local body = {type = \"pixera\"}\r\nself.Internal.mutate('pixera.close', body)\r\n",
   "kind": "func",
   "name": "stopPixera"
  },
  {
   "body": "local body = {type = \"presence\"}\r\nself.Internal.mutate('pixera.close', body)\r\n",
   "kind": "func",
   "name": "stopPresence"
  },
  {
   "body": "--\r\nlocal mac = self.MAC(nil, false)\r\nif type(mac)~= 'string' then\r\n\tpixc.log(\"mac has invalid type\")\r\n\treturn\r\nend \r\nlocal bytes = {string.match(mac, '(%x+)[-:](%x+)[-:](%x+)[-:](%x+)[-:](%x+)[-:](%x+)')}\r\nif bytes == nil then\r\n\tpixc.log(\"invalid  Mac format\")\r\n\treturn\r\nend\r\nfor i = 1, 6 do\r\n\tif bytes[i] == nil then\r\n\t\tpixc.log(\"invalid  Mac format, had nil\")\r\n\tend\r\n\tbytes[i] = tonumber(bytes[i], 16)\r\n\tif  bytes[i] < 0 or bytes[i] > 0xFF then\r\n\t\tpixc.log(\"invalid  Mac format, byte invalid\")\r\n\tend\r\nend\r\nlocal magicPacket = {};\r\nlocal count = 1;\r\nfor i = 1, 6, 1 do\r\n\tmagicPacket[count] = 0xFF;\r\n\tcount = count + 1\r\nend\r\nfor i = 1, 16, 1 do\r\n\tfor j = 1, 6, 1 do\r\n\t\tmagicPacket[count] = bytes[j];\r\n\t\tcount = count + 1\r\n\tend\r\nend\r\n\r\nlocal adapter = self().getProperty(\"Adapter IP\") or \"Any\"\r\nadapter = pixc.getRoot().Utils.Network.convertLocalAdapterEntry(adapter)\r\nrequire \"pixcNetwork\"\r\nlocal network = createPixcNetwork()\r\nnetwork:enableBroadcast();\r\nnetwork:configureUdp(\"255.255.255.255\", 9, adapter)\r\nnetwork:start()\r\nnetwork:send(magicPacket)\r\nnetwork:close()\r\n",
   "kind": "func",
   "name": "wake"
  },
  {
   "elems": [
    {
     "body": "return self().getProperty(\"IP\") or \"127.0.0.1\"\r\n",
     "kind": "func",
     "name": "getIp",
     "slotStyle": "leftNone;rightNone;triggerHidden"
    },
    {
     "body": "return tonumber(self().getProperty(\"Port\") or \"4000\")\r\n",
     "kind": "func",
     "name": "getPort",
     "slotStyle": "leftNone;rightNone;triggerHidden"
    },
    {
     "body": "if self.protocol == nil then\r\n    self.init()\r\nend\r\n\r\nlocal url = \"http://\" .. self.Internal.getIp() .. \":\" ..self.Internal.getPort() .. \"/api/\" .. method\r\nif data ~= nil then\r\n    local rawBody = self.json.encode({json = data})\r\n    url = url .. \"?input=\"..rawBody\r\nend\r\n\r\nlocal success, code, headerDict, content = self.protocol:httpGet(url, nil, nil, customHeader)\r\n\r\nif(content == '') then return end\r\nlocal __, res = nil\r\n__, res = pcall(function()\r\n    return self.json.decode(content).result.data.json\r\nend)\r\nreturn res, code\r\n",
     "kind": "func",
     "name": "query",
     "params": [
      {
       "name": "method",
       "type": ""
      },
      {
       "name": "data",
       "type": ""
      }
     ],
     "slotStyle": "leftNone;rightNone;triggerHidden"
    },
    {
     "body": "if self.protocol == nil then\r\n    self.init()\r\nend\r\nlocal customHeader={\"Content-Type=application/json\"}\r\nlocal url = \"http://\" .. self.Internal.getIp() .. \":\" ..self.Internal.getPort() .. \"/api/\" .. method\r\npixc.log(url)\r\nlocal rawBody = self.json.encode({json = data})\r\nlocal success, code, headerDict, content = self.protocol:httpPost(url, rawBody, nil, customHeader)\r\nlocal __, res = nil\r\n__, res = pcall(function()\r\n    return self.json.decode(content).result.data.json\r\nend)\r\nreturn res, code\r\n",
     "kind": "func",
     "name": "mutate",
     "params": [
      {
       "name": "method",
       "type": ""
      },
      {
       "name": "data",
       "type": ""
      }
     ],
     "slotStyle": "leftNone;rightNone;triggerHidden"
    },
    {
     "body": "local ans = self.Internal.query(\"system.network\")\r\nif ans == nil then pixc.log(self() .. \" Module get no response from HUB\"); return end \r\nlocal ip = self.Internal.getIp()\r\n\r\nlocal mac = nil\r\nfor _, v in ipairs(ans) do\r\n    for __, addr in ipairs(v.ipv4Addresses) do\r\n        if addr == ip then\r\n            mac = v.macAddress\r\n            break\r\n        end\r\n    end\r\n    if mac ~= nil then\r\n        break\r\n    end\r\nend\r\nif mac ~= nil then\r\n    self.MAC(mac, true)\r\nend\r\n",
     "kind": "func",
     "name": "updateMac",
     "slotStyle": "leftNone;rightNone;triggerHidden"
    },
    {
     "body": "local ip = self.Internal.getIp()\r\nlocal port = tostring(math.floor(math.abs(self.Internal.getPort())))\r\nself.IP(ip,true)\r\nself.PORT(port,true)\r\nlocal ans = self.Internal.query('pixera.running')\r\nself.startetVersion('none',true)\r\nself.isPixeraRunning(ans)\r\nself.isPresenceRunning(ans)\r\nif ans == nil then return end\r\nself.getDefaultVersion()\r\n\r\n",
     "kind": "func",
     "name": "updateStats",
     "slotStyle": "leftNone;rightNone;triggerHidden"
    }
   ],
   "kind": "ns",
   "name": "Internal"
  }
 ],
 "cjv": {
  "h": 450.0,
  "w": 388.0,
  "x": 228.0,
  "y": 236.0
 },
 "definedExternally": false,
 "hostInfo": {
  "systemType": ""
 },
 "libraryExportPath": "C:/PixeraCode/nui/data/control_library_standard/Drivers/AVStumpfl/PixeraHub.json",
 "license": "1GNTlyr7sewU1l3S6nhV4nFEJRqUbLbJktvOqVd4wWkAe1arSpiF2gtEXbTSZprOVWKk3MGjNyeUpsYBQZ6h4CU/WJnDzxk7EOFNih5m7lfBJQI7AS2EdWbloYd6uansGADgU3n9NyJoiZg1uHZiwQ==",
 "name": "PixeraHub",
 "properties": [
  {
   "cont": "true",
   "name": "Auto Init",
   "typeHint": "bool"
  },
  {
   "cont": "127.0.0.1",
   "name": "IP",
   "typeHint": "string"
  },
  {
   "cont": "Localhost",
   "name": "Adapter IP",
   "optionsSourceFunc": "Utils.Network.getLocalAdapterEntries",
   "typeHint": "string"
  },
  {
   "cont": "4000",
   "name": "Port",
   "typeHint": "string"
  },
  {
   "cont": "Default",
   "name": "Installs",
   "optionsSourceFunc": "self.getInstalls",
   "typeHint": "string"
  },
  {
   "cont": "5",
   "name": "Refresh Time in sec",
   "typeHint": "number"
  },
  {
   "cont": "AV Stumpfl GmbH",
   "name": "Author",
   "readOnly": true,
   "typeHint": "string"
  },
  {
   "cont": "",
   "imageBase64": "",
   "name": "Logo",
   "readOnly": true,
   "showName": false,
   "typeHint": "image"
  },
  {
   "cont": "www.pixera.one",
   "name": "URL",
   "readOnly": true,
   "showName": false,
   "typeHint": "string"
  },
  {
   "cont": "1.4",
   "name": "Version",
   "readOnly": true,
   "typeHint": "string"
  }
 ],
 "separateCode": false,
 "uiUrl": "http://${properties[\"IP\"]}:${properties[\"Port\"]}/"
}