{
 "api": [
  {
   "body": "return self()\r\n",
   "functionName": "ref()",
   "kind": "fn",
   "name": "ref",
   "path": "Midi.ref",
   "signiture": "ref()"
  },
  {
   "body": "require \"pixcHelper\"\nrequire \"pixcProtocolMidi\"\nif self.pixcHelper ~= nil then\n\treturn \nend\nself.helper = createPixcHelper(pixc,self())\nif self.protocol == nil then\n\tself.protocol = createPixcProtocolMidi()\nend\nself.token = 0\nself.freshMode = 0\nself.ready = true\nself.running = false\nself.midiInDev = self.helper:getProperty(\"Midi In Device\",\"\")\nself.midiOutDev = self.helper:getProperty(\"Midi Out Device\",\"\")\nself.disableLog = self.helper.toBool(self.helper:getProperty(\"Disable Logs\",\"true\"))\nself.learn = self.helper.toBool(self.helper:getProperty(\"Learn\"))\nself._learnNote = self.helper.toBool(self.helper:getProperty(\"Learn Note\"))\nself.protocol:setStatusCallbacks(\n\tfunction (...) pixc.log(...) end)\nif self.midiOutDev ~= nil and self.midiOutDev ~= \"\" then\n\tself.protocol:openMidiOutDevice(self.midiOutDev)\nend\nself.MidiInCallbacks = {}\nself.MidiInCallbacks[\"note\"] = self.Receive.Note.recvNote\nself.MidiInCallbacks[\"polymorphicAftertouch\"] = self.Receive.Polymorphic.recvPolymorphicAftertouch\nself.MidiInCallbacks[\"controlChange\"] = self.Receive.ControlChange.recvControlChange\nself.MidiInCallbacks[\"programChange\"] = self.Receive.ProgramChange.recvProgramChange\nself.MidiInCallbacks[\"channelAfterTouch\"] = self.Receive.ChannelAftertouch.recvChannelAftertouch\nself.MidiInCallbacks[\"pitchBlend\"] = self.Receive.PitchBlend.recvPitchBlend\nself.MidiInCallbacks[\"sysEx\"] = self.Receive.SysEx.recvSysEx\nself.MidiInCallbacks[\"mtc\"] = self.Timecode.Internal.timecodeFunction\nif self.midiInDev ~= nil and self.midiInDev ~= \"\" then\n\tself.protocol:openMidiInDevice(self.midiInDev,self.MidiInCallbacks)\nend\nif self.interval == nil then\n\tself.interval = pixc.getRoot().Utils.Timer.setInterval(\n\t\tfunction()\n\t\t\tself.Timecode.Internal.checkInput()\n\t  \tend, 50)\nend\nif self.intervalExecuteTimecode == nil then\n\tself.intervalExecuteTimecode = pixc.getRoot().Utils.Timer.setInterval(\n\t\tfunction()\n\t\t\tself.Timecode.timecodeToTimeline()\n\t  \tend, 1000)\nend\n",
   "functionName": "init()",
   "kind": "fn",
   "name": "init",
   "path": "Midi.init",
   "signiture": "init()"
  },
  {
   "body": "self.Timecode.Timecode(nil)\r\nself.running = false\r\nself.ready = true\r\nself.freshMode = 2\r\nself.Timecode.timecodeToTimeline()\r\n\r\nif self.interval ~= nil then\r\n\tpixc.getRoot().Utils.Timer.clearInterval(self.interval)\r\n\tself.interval = nil\r\nend\r\nif self.intervalExecuteTimecode ~= nil then\r\n\tpixc.getRoot().Utils.Timer.clearInterval(self.intervalExecuteTimecode)\r\n\tself.intervalExecuteTimecode = nil\r\nend\r\n\r\nif self.protocol == nil then return end\r\nself.helper = nil\r\nself.protocol:close()\r\nself.protocol = nil\r\n",
   "functionName": "uninit()",
   "kind": "fn",
   "name": "uninit",
   "path": "Midi.uninit",
   "signiture": "uninit()"
  },
  {
   "elems": [
    {
     "attKind": "standard",
     "attReports": {
      "0": ""
     },
     "body": "if self.protocol == nil then\n\treturn\nend\nif channel == nil then\n\treturn\nend\nself.protocol:sendNote(channel-1,note,on,velocity)\n",
     "functionName": "sendNote(int channel,int note,bool on,int velocity)",
     "kind": "fn",
     "name": "sendNote",
     "params": [
      {
       "name": "channel",
       "type": "int"
      },
      {
       "name": "note",
       "type": "int"
      },
      {
       "name": "on",
       "type": "bool"
      },
      {
       "name": "velocity",
       "type": "int"
      }
     ],
     "path": "Midi.Send.sendNote",
     "signiture": "sendNote(int channel,int note,bool on,int velocity)",
     "slotStyle": "leftIn;rightNone"
    },
    {
     "attKind": "standard",
     "attReports": {
      "0": ""
     },
     "body": "if self.protocol == nil then\r\n\treturn\r\nend\r\nif channel == nil then\r\n\treturn\r\nend\r\nself.protocol:sendNote(channel-1,note,value)\r\n",
     "functionName": "sendPolymorphicAfterTouch(int channel,int note,int value)",
     "kind": "fn",
     "name": "sendPolymorphicAfterTouch",
     "params": [
      {
       "name": "channel",
       "type": "int"
      },
      {
       "name": "note",
       "type": "int"
      },
      {
       "name": "value",
       "type": "int"
      }
     ],
     "path": "Midi.Send.sendPolymorphicAfterTouch",
     "signiture": "sendPolymorphicAfterTouch(int channel,int note,int value)",
     "slotStyle": "leftIn;rightNone"
    },
    {
     "attKind": "standard",
     "attReports": {
      "0": ""
     },
     "body": "if self.protocol == nil then\r\n\treturn\r\nend\r\nif channel == nil then\r\n\treturn\r\nend\r\nself.protocol:sendControlChange(channel-1,controller, value)\r\n",
     "functionName": "sendControlChange(int channel,int controller,int value)",
     "kind": "fn",
     "name": "sendControlChange",
     "params": [
      {
       "name": "channel",
       "type": "int"
      },
      {
       "name": "controller",
       "type": "int"
      },
      {
       "name": "value",
       "type": "int"
      }
     ],
     "path": "Midi.Send.sendControlChange",
     "signiture": "sendControlChange(int channel,int controller,int value)",
     "slotStyle": "leftIn;rightNone"
    },
    {
     "attKind": "standard",
     "body": "if self.protocol == nil then\r\n\treturn\r\nend\r\nif channel == nil then\r\n\treturn\r\nend\r\nself.protocol:sendProgramChange(channel-1, device)\r\n",
     "functionName": "sendProgramChange(int channel,int device)",
     "kind": "fn",
     "name": "sendProgramChange",
     "params": [
      {
       "name": "channel",
       "type": "int"
      },
      {
       "name": "device",
       "type": "int"
      }
     ],
     "path": "Midi.Send.sendProgramChange",
     "signiture": "sendProgramChange(int channel,int device)",
     "slotStyle": "leftIn;rightNone"
    },
    {
     "attKind": "standard",
     "body": "if self.protocol == nil then\r\n\treturn\r\nend\r\nif channel == nil then\r\n\treturn\r\nend\r\nself.protocol:sendChannelAftertouch(channel-1, value)\r\n",
     "functionName": "sendChannelAftertouch(int channel,int value)",
     "kind": "fn",
     "name": "sendChannelAftertouch",
     "params": [
      {
       "name": "channel",
       "type": "int"
      },
      {
       "name": "value",
       "type": "int"
      }
     ],
     "path": "Midi.Send.sendChannelAftertouch",
     "signiture": "sendChannelAftertouch(int channel,int value)",
     "slotStyle": "leftIn;rightNone"
    },
    {
     "attKind": "standard",
     "body": "if self.protocol == nil then\r\n\treturn\r\nend\r\nif channel == nil then\r\n\treturn\r\nend\r\nself.protocol:sendPitchBlend(channel-1, value)\r\n",
     "functionName": "sendPitchBlend(int channel,int value)",
     "kind": "fn",
     "name": "sendPitchBlend",
     "params": [
      {
       "name": "channel",
       "type": "int"
      },
      {
       "name": "value",
       "type": "int"
      }
     ],
     "path": "Midi.Send.sendPitchBlend",
     "signiture": "sendPitchBlend(int channel,int value)",
     "slotStyle": "leftIn;rightNone"
    },
    {
     "attKind": "standard",
     "body": "if self.protocol == nil then\r\n\treturn\r\nend\r\nif channel == nil then\r\n\treturn\r\nend\r\nself.protocol:sendSysEx(channel-1, data)\r\n",
     "functionName": "sendSysEx(int channel,data)",
     "kind": "fn",
     "name": "sendSysEx",
     "params": [
      {
       "name": "channel",
       "type": "int"
      },
      {
       "name": "data",
       "type": ""
      }
     ],
     "path": "Midi.Send.sendSysEx",
     "signiture": "sendSysEx(int channel,data)",
     "slotStyle": "leftIn;rightNone"
    }
   ],
   "kind": "ns",
   "name": "Send"
  },
  {
   "elems": [
    {
     "elems": [
      {
       "body": "if error then \r\n\tif not self.disableLog  then pixc.log(error) end\r\nelse \r\n\tif on == true then\r\n\t\tif not self.disableLog then\r\n\t\t\tpixc.log( \"Note(\"..note..\") On: channel(\"..channel..\") velocity(\"..velocity..\")\") \r\n\t\tend\r\n\telse\r\n\t\tif not self.disableLog then\r\n\t\t\tpixc.log( \"Note(\"..note..\") Off: channel(\"..channel..\") velocity(\"..velocity..\")\") \r\n\t\tend\r\n\tend\r\nend\r\nlocal n = self.midiNoteList(note-20)\r\nif n == nil then n = note end\r\nlocal ch = tostring(math.floor(math.abs(channel+1)))\r\nif self._learnNote then\r\n\tself.learnNote()\r\n\tself.helper:setProperty(\"Last Received Note\",\"Channel: \" .. ch .. \" Note: \" .. n .. \" Value: \" .. velocity)\r\n\tself.helper:setProperty(\"Note Action Name\",\"Ch\" .. ch .. \"_Note_\" .. string.gsub(n,\"#\",\"Sharp\"))\r\nelse\r\n\tif self.Receive.Note[\"Ch\" .. ch .. \"_Note_\" .. string.gsub(n,\"#\",\"Sharp\")] ~= nil then\r\n\t\tself.Receive.Note[\"Ch\" .. ch .. \"_Note_\" .. string.gsub(n,\"#\",\"Sharp\")](velocity)\r\n\tend\r\nend\r\n--pixc.log(\"Channel: \" .. channel .. \" Note: \" .. self.midiNoteList(note-20) .. \" Value: \" .. velocity)\r\n",
       "functionName": "recvNote(error,time,channel,on,note,velocity)",
       "kind": "fn",
       "name": "recvNote",
       "params": [
        {
         "name": "error",
         "type": ""
        },
        {
         "name": "time",
         "type": ""
        },
        {
         "name": "channel",
         "type": ""
        },
        {
         "name": "on",
         "type": ""
        },
        {
         "name": "note",
         "type": ""
        },
        {
         "name": "velocity",
         "type": ""
        }
       ],
       "path": "Midi.Receive.Note.recvNote",
       "signiture": "recvNote(error,time,channel,on,note,velocity)",
       "slotStyle": "leftNone;rightOut;triggerHidden"
      }
     ],
     "kind": "ns",
     "name": "Note"
    },
    {
     "elems": [
      {
       "body": "if error then \r\n\tif self.disableLog == false then\tpixc.log(error) end\r\nelse \r\n\tif self.disableLog == false then\r\n\t\tpixc.log( \"PolyMophicAfterTouch(\"..note..\"): channel(\"..channel..\") value(\"..value..\")\") \r\n\tend\r\nend\r\n",
       "functionName": "recvPolymorphicAftertouch(error,time,channel,note,value)",
       "kind": "fn",
       "name": "recvPolymorphicAftertouch",
       "params": [
        {
         "name": "error",
         "type": ""
        },
        {
         "name": "time",
         "type": ""
        },
        {
         "name": "channel",
         "type": ""
        },
        {
         "name": "note",
         "type": ""
        },
        {
         "name": "value",
         "type": ""
        }
       ],
       "path": "Midi.Receive.Polymorphic.recvPolymorphicAftertouch",
       "signiture": "recvPolymorphicAftertouch(error,time,channel,note,value)",
       "slotStyle": "leftNone;rightOut;triggerHidden"
      }
     ],
     "kind": "ns",
     "name": "Polymorphic"
    },
    {
     "elems": [
      {
       "body": "if error then \r\n\tif self.disableLog == false then\tpixc.log(error) end\r\nelse \r\n\tif self.disableLog == false then pixc.log( \"ControlChange: channel(\"..channel..\") controller(\"..controller..\") value(\"..value..\")\") end\r\nend\r\nlocal ch = tostring(math.floor(math.abs(channel+1)))\r\nlocal cc = tostring(math.floor(math.abs(controller)))\r\nif self._learnCC then\r\n\tself.learnCC()\r\n\tself.helper:setProperty(\"Last Received CC\",\"Channel: \" .. ch .. \" CC: \" .. cc .. \" Value: \" .. value)\r\n\tself.helper:setProperty(\"CC Action Name\",\"Ch\" .. ch .. \"_CC_\" .. cc)\r\nelse\r\n\tif self.Receive.ControlChange[\"Ch\" .. ch .. \"_CC_\" .. cc] ~= nil then\r\n\t\tself.Receive.ControlChange[\"Ch\" .. ch .. \"_CC_\" .. cc](value)\r\n\tend\r\nend\r\n",
       "functionName": "recvControlChange(error,time,channel,controller,value)",
       "kind": "fn",
       "name": "recvControlChange",
       "params": [
        {
         "name": "error",
         "type": ""
        },
        {
         "name": "time",
         "type": ""
        },
        {
         "name": "channel",
         "type": ""
        },
        {
         "name": "controller",
         "type": ""
        },
        {
         "name": "value",
         "type": ""
        }
       ],
       "path": "Midi.Receive.ControlChange.recvControlChange",
       "signiture": "recvControlChange(error,time,channel,controller,value)",
       "slotStyle": "leftNone;rightOut;triggerHidden"
      }
     ],
     "kind": "ns",
     "name": "ControlChange"
    },
    {
     "elems": [
      {
       "body": "if error then \r\n\tif self.disableLog == false then\tpixc.log(error) end\r\nelse \r\n\tif self.disableLog == false then pixc.log( \"ProgramChange: channel(\"..channel..\") device(\"..device..\")\") end\r\nend\r\nlocal ch = tostring(math.floor(math.abs(channel+1)))\r\nlocal pc = tostring(math.floor(math.abs(device)))\r\nif self._learnPC then\r\n\tself.learnPC()\r\n\tself.helper:setProperty(\"Last Received PC\",\"Channel: \" .. ch .. \" PC: \" .. pc)\r\n\tself.helper:setProperty(\"PC Action Name\",\"Ch\" .. ch .. \"_PC_\" .. pc)\r\nelse\r\n\tif self.Receive.ProgramChange[\"Ch\" .. ch .. \"_PC_\" .. pc] ~= nil then\r\n\t\tself.Receive.ProgramChange[\"Ch\" .. ch .. \"_PC_\" .. pc]()\r\n\tend\r\nend\r\n",
       "functionName": "recvProgramChange(error,time,channel,device)",
       "kind": "fn",
       "name": "recvProgramChange",
       "params": [
        {
         "name": "error",
         "type": ""
        },
        {
         "name": "time",
         "type": ""
        },
        {
         "name": "channel",
         "type": ""
        },
        {
         "name": "device",
         "type": ""
        }
       ],
       "path": "Midi.Receive.ProgramChange.recvProgramChange",
       "signiture": "recvProgramChange(error,time,channel,device)",
       "slotStyle": "leftNone;rightOut;triggerHidden"
      }
     ],
     "kind": "ns",
     "name": "ProgramChange"
    },
    {
     "elems": [
      {
       "body": "if error then \r\n\tif self.disableLog == false then\tpixc.log(error) end\r\nelse \r\n\tif self.disableLog == false then pixc.log( \"ChannelAftertouch: channel(\"..channel..\") value(\"..value..\")\") end\r\nend\r\n",
       "functionName": "recvChannelAftertouch(error,time,channel,value)",
       "kind": "fn",
       "name": "recvChannelAftertouch",
       "params": [
        {
         "name": "error",
         "type": ""
        },
        {
         "name": "time",
         "type": ""
        },
        {
         "name": "channel",
         "type": ""
        },
        {
         "name": "value",
         "type": ""
        }
       ],
       "path": "Midi.Receive.ChannelAftertouch.recvChannelAftertouch",
       "signiture": "recvChannelAftertouch(error,time,channel,value)",
       "slotStyle": "leftNone;rightOut;triggerHidden"
      }
     ],
     "kind": "ns",
     "name": "ChannelAftertouch"
    },
    {
     "elems": [
      {
       "body": "if error then \r\n\tif self.disableLog == false then\tpixc.log(error) end\r\nelse \r\n\tif self.disableLog == false then pixc.log( \"PitchBlend: channel(\"..channel..\") value(\"..value..\")\") end\r\nend\r\n",
       "functionName": "recvPitchBlend(error,time,channel,value)",
       "kind": "fn",
       "name": "recvPitchBlend",
       "params": [
        {
         "name": "error",
         "type": ""
        },
        {
         "name": "time",
         "type": ""
        },
        {
         "name": "channel",
         "type": ""
        },
        {
         "name": "value",
         "type": ""
        }
       ],
       "path": "Midi.Receive.PitchBlend.recvPitchBlend",
       "signiture": "recvPitchBlend(error,time,channel,value)",
       "slotStyle": "leftNone;rightOut;triggerHidden"
      }
     ],
     "kind": "ns",
     "name": "PitchBlend"
    },
    {
     "elems": [
      {
       "body": "local msg = \"\"\r\nlocal msgTable = {}\r\nif dataTable ~= nil and type(dataTable) == \"table\" then\r\n\tfor i,_ in pairs(dataTable) do\r\n\t\tlocal hex = string.format(\"%x\", _)\r\n\t\tif string.len(hex) == 1 then\r\n\t\t\thex = \"0\" .. hex\r\n\t\tend\r\n\t\tmsg = msg .. hex\r\n\t\ttable.insert(msgTable,hex)\r\n\tend\r\nend\r\n\r\nif error then \r\n\tif self.disableLog == false then\tpixc.log(error) end\r\nelse \r\n\tif self.disableLog == false then pixc.log( \"SysEx: Data(\".. msg\t..\")\") end\r\nend\r\n\r\nif msg ~= \"\" then\r\n\t--Send table to next Module\r\n\t--pixc.callRefs(msgTable)\r\n\t--Send string to next Module\r\n\tpixc.callRefs(msg)\r\nelse\r\n\t--if nothing is comming in don't call next Module\r\n\tpixc.suppressCallRefs()\r\nend\r\n",
       "functionName": "recvSysEx(error,time,dataTable)",
       "kind": "fn",
       "name": "recvSysEx",
       "params": [
        {
         "name": "error",
         "type": ""
        },
        {
         "name": "time",
         "type": ""
        },
        {
         "name": "dataTable",
         "type": ""
        }
       ],
       "path": "Midi.Receive.SysEx.recvSysEx",
       "signiture": "recvSysEx(error,time,dataTable)",
       "slotStyle": "leftNone;rightOut;triggerHidden"
      }
     ],
     "kind": "ns",
     "name": "SysEx"
    }
   ],
   "kind": "ns",
   "name": "Receive"
  },
  {
   "body": "require \"pixcProtocolMidi\"\nif self.protocol == nil then\n\tself.protocol = createPixcProtocolMidi()\nend\nreturn self.protocol:listMidiInDevices();\r\n",
   "functionName": "getInDevices()",
   "kind": "fn",
   "name": "getInDevices",
   "path": "Midi.getInDevices",
   "signiture": "getInDevices()",
   "slotStyle": "leftNone;rightNone;hidden"
  },
  {
   "body": "require \"pixcProtocolMidi\"\nif self.protocol == nil then\n\tself.protocol = createPixcProtocolMidi()\nend\nreturn self.protocol:listMidiOutDevices();\r\n",
   "functionName": "getOutDevices()",
   "kind": "fn",
   "name": "getOutDevices",
   "path": "Midi.getOutDevices",
   "signiture": "getOutDevices()",
   "slotStyle": "leftNone;rightNone;hidden"
  },
  {
   "elems": [
    {
     "elems": [
      {
       "body": "\r\nlocal mtcList = self.helper.stringSplit(mtc,\":\")\r\n\r\nself.fps = fps\r\nif fps == 24 then self.Timecode.TimecodeMode(\"24 FPS\") self.mode = 1\r\nelseif fps == 25 then self.Timecode.TimecodeMode(\"25 FPS\") self.mode = 2\r\nelseif fps == 29.97 then self.Timecode.TimecodeMode(\"30 FPS - Drop Frames\") self.fps = 30 self.mode = 3\r\nelseif fps == 30 then self.Timecode.TimecodeMode(\"30 FPS\") self.mode = 5 end\r\n\r\nself.Timecode.Timecode(mtc)\r\n\r\nself.totalFrame = mtcList[4] + mtcList[3] * self.fps + mtcList[2] *60* self.fps + mtcList[1]*60*60* self.fps\r\n\r\nif self.running == false then\r\n\tself.freshMode = 1\r\n\tself.token = self.token+1\r\nend\r\nself.running = true\r\nself.ready = true\r\n\r\n",
       "functionName": "timecodeFunction(error,time,mtc,fps)",
       "kind": "fn",
       "name": "timecodeFunction",
       "params": [
        {
         "name": "error",
         "type": ""
        },
        {
         "name": "time",
         "type": ""
        },
        {
         "name": "mtc",
         "type": ""
        },
        {
         "name": "fps",
         "type": ""
        }
       ],
       "path": "Midi.Timecode.Internal.timecodeFunction",
       "signiture": "timecodeFunction(error,time,mtc,fps)",
       "slotStyle": "leftNone;rightNone;triggerHidden"
      },
      {
       "body": "if self.ready ~= true and self.running == true then\r\n\tself.running = false\r\n\tself.ready = true\r\n\tself.freshMode = 2\r\n\tself.token = self.token+1\r\n\tself.Timecode.timecodeToTimeline()\r\nelse\r\n\tself.ready = false\r\nend\r\n",
       "functionName": "checkInput()",
       "kind": "fn",
       "name": "checkInput",
       "path": "Midi.Timecode.Internal.checkInput",
       "signiture": "checkInput()",
       "slotStyle": "leftNone;rightNone;triggerHidden"
      }
     ],
     "kind": "ns",
     "name": "Internal"
    },
    {
     "attKind": "internal",
     "body": "if self.fps == nil then return end\r\nif val == nil then\r\n\tif self.timecode ~= nil then\r\n\t\tpixc.callRefs(tonumber(self.timecode[1]),tonumber(self.timecode[2]),tonumber(self.timecode[3]),tonumber(self.timecode[4]),false,self.mode)\r\n\t\tpixc.report(self.timecode[1] .. \":\" .. self.timecode[2] .. \":\" .. self.timecode[3] .. \":\" .. self.timecode[4])\r\n\tend\r\n\treturn\r\nend\r\nlocal timecode = self.helper.stringSplit(val,\":\")\r\npixc.report(val)\r\n\r\nif timecode == nil or timecode[1] == nil or timecode[2] == nil or timecode[3] == nil or timecode[4] == nil or self.fps == nil then\r\n\treturn\r\nend\r\n\r\nlocal totalFrames = tonumber(timecode[1])*60*60*self.fps + tonumber(timecode[2])*60*self.fps + tonumber(timecode[3]) * self.fps + tonumber(timecode[4])\r\n\r\nif self.totalFrame ~= nil and totalFrames ~= self.totalFrame+1 then\r\n\t\tpixc.warn(\"Incoming Timecode Jumped!\")\r\n\t\tself.freshMode = 2\r\n\t\tself.token = self.token+1\r\n\t\tself.timecode = timecode\r\n\t\tself.Timecode.timecodeToTimeline()\r\n\t\tself.running = false\r\n\treturn\r\nend\r\n\r\nif self.timecode ~= nil and (\r\n\tself.timecode[1] ~= timecode[1] or\r\n\tself.timecode[2] ~= timecode[2] or\r\n\tself.timecode[3] ~= timecode[3] or\r\n\tself.timecode[4] ~= timecode[4]) then\r\n\r\nelse\r\n\tself.freshMode = 2\r\nend\r\n\t\r\nself.timecode = timecode\r\n\r\nreturn val\r\n",
     "functionName": "Timecode(val,bool doSet)",
     "kind": "fn",
     "name": "Timecode",
     "params": [
      {
       "name": "val",
       "type": ""
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "path": "Midi.Timecode.Timecode",
     "signiture": "Timecode(val,bool doSet)",
     "slotStyle": "leftNone;rightOut;triggerHidden"
    },
    {
     "attKind": "internal",
     "body": "self._TimecodeMode = pixcCommon.execAttribute(0, self._TimecodeMode, val, doSet)\r\nreturn self._TimecodeMode\r\n",
     "functionName": "TimecodeMode(val,bool doSet)",
     "kind": "fn",
     "name": "TimecodeMode",
     "params": [
      {
       "name": "val",
       "type": ""
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "path": "Midi.Timecode.TimecodeMode",
     "signiture": "TimecodeMode(val,bool doSet)",
     "slotStyle": "leftNone;rightOut;triggerHidden"
    },
    {
     "body": "if self.timecode ~= nil and\r\n\tself.running ~= nil and\r\n\tself.freshMode ~= nil and\r\n\tself.mode ~= nil then\r\n\r\n\tif self._muteState == true then \r\n\t\treturn \r\n\tend\r\n\r\n\tlocal rxTimeFreshStart = pixc.callRefs(tonumber(self.timecode[1]),tonumber(self.timecode[2]),tonumber(self.timecode[3]),tonumber(self.timecode[4]),self.rxTimeFreshStart,self.running, self.freshMode, self.token,self.mode)\r\n\r\n\tif rxTimeFreshStart == nil or rxTimeFreshStart[1] == nil or rxTimeFreshStart[1][1] == nil then\r\n\t\treturn\r\n\tend\r\n\t\r\n\tif self.freshMode == 1 or self.freshMode == 2 then\r\n\t\tif self.freshMode == 1 then\r\n\t\t\tself.rxTimeFreshStart = rxTimeFreshStart[1][1]\r\n\t\telse\r\n\t\t\tself.rxTimeFreshStart = 0\r\n\t\tend\r\n\t\tif rxTimeFreshStart[1][1] == -1 then\r\n\t\t\treturn \r\n\t\tend\r\n\t\tself.freshMode = 0\r\n\telse\r\n\t\tif rxTimeFreshStart[1][1] == -1 then\r\n\t\t\tself.freshMode = 2\r\n\t\tend\r\n\tend\r\nend\r\n",
     "documentation": "Connect this function to the Timeline setTimecodeInput function or Compound setTimecodeInput and set the Timeline SMPTE Mode to receive.",
     "functionName": "timecodeToTimeline()",
     "kind": "fn",
     "name": "timecodeToTimeline",
     "path": "Midi.Timecode.timecodeToTimeline",
     "signiture": "timecodeToTimeline()",
     "slotStyle": "leftNone;rightOut;triggerHidden"
    }
   ],
   "kind": "ns",
   "name": "Timecode"
  },
  {
   "body": "if self.helper == nil then\r\n\trequire \"pixcHelper\"\r\n\tself.helper = createPixcHelper(pixc,self())\r\nend\r\n\r\nself.disableLog = self.helper.toBool(state)\r\n",
   "functionName": "disableLog(bool state)",
   "kind": "fn",
   "name": "disableLog",
   "params": [
    {
     "name": "state",
     "type": "bool"
    }
   ],
   "path": "Midi.disableLog",
   "signiture": "disableLog(bool state)",
   "slotStyle": "hidden"
  },
  {
   "body": "\r\nif note == nil then return t end\r\nlocal t = {\r\n\t\"A0\", \"A#0\",\"B0\",\r\n\t\"C1\",\"C#1\",\"D1\",\"D#1\",\"E1\",\"F1\",\"F#1\",\"G1\",\"G#1\",\"A1\",\"A#1\",\"B1\",\r\n\t\"C2\",\"C#2\",\"D2\",\"D#2\",\"E2\",\"F2\",\"F#2\",\"G2\",\"G#2\",\"A2\",\"A#2\",\"B2\",\r\n\t\"C3\",\"C#3\",\"D3\",\"D#3\",\"E3\",\"F3\",\"F#3\",\"G3\",\"G#3\",\"A3\",\"A#3\",\"B3\",\r\n\t\"C4\",\"C#4\",\"D4\",\"D#4\",\"E4\",\"F4\",\"F#4\",\"G4\",\"G#4\",\"A4\",\"A#4\",\"B4\",\r\n\t\"C5\",\"C#5\",\"D5\",\"D#5\",\"E5\",\"F5\",\"F#5\",\"G5\",\"G#5\",\"A5\",\"A#5\",\"B5\",\r\n\t\"C6\",\"C#6\",\"D6\",\"D#6\",\"E6\",\"F6\",\"F#6\",\"G6\",\"G#6\",\"A6\",\"A#6\",\"B6\",\r\n\t\"C7\",\"C#7\",\"D7\",\"D#7\",\"E7\",\"F7\",\"F#7\",\"G7\",\"G#7\",\"A7\",\"A#7\",\"B7\",\r\n\t\"C8\",\"C#8\",\"D8\",\"D#8\",\"E8\",\"F8\",\"F#8\",\"G8\",\"G#8\",\"A8\",\"A#8\",\"B8\",\r\n\t\"C9\",\"C#9\",\"D9\",\"D#9\",\"E9\",\"F9\",\"F#9\",\"G9\",\"G#9\"\r\n}\r\nif t[note] == nil then\r\n\treturn tostring(math.floor(math.abs(note)))\r\nend\r\nreturn t[note]\r\n",
   "functionName": "midiNoteList(note)",
   "kind": "fn",
   "name": "midiNoteList",
   "params": [
    {
     "name": "note",
     "type": ""
    }
   ],
   "path": "Midi.midiNoteList",
   "signiture": "midiNoteList(note)",
   "slotStyle": "hidden"
  },
  {
   "body": "if self.helper == nil then\r\n\trequire \"pixcHelper\"\r\n\tself.helper = createPixcHelper(pixc,self())\r\nend\r\n\r\nif state == nil then \r\n\tself.helper:setProperty(\"Learn Note\",\"false\")\r\nend\r\n\r\nself._learnNote = self.helper.toBool(self.helper:getProperty(\"Learn Note\"))\r\n",
   "functionName": "learnNote(bool state)",
   "kind": "fn",
   "name": "learnNote",
   "params": [
    {
     "name": "state",
     "type": "bool"
    }
   ],
   "path": "Midi.learnNote",
   "signiture": "learnNote(bool state)",
   "slotStyle": "hidden"
  },
  {
   "body": "local _name = self.helper:getProperty(\"Note Action Name\")\r\nlocal _min = tonumber(self.helper:getProperty(\"Note Min Out\"))\r\nlocal _max = tonumber(self.helper:getProperty(\"Note Max Out\"))\r\n\r\nif _name == nil then return end\r\nlocal json = require \"json\"\r\nif self.helper == nil then\r\n\trequire \"pixcHelper\"\r\n\tself.helper = createPixcHelper(pixc,self())\r\nend\r\nlocal module = {{cont=\"true\", name=\"recvNote\"}}\r\n\r\nfor i,n in pairs(self.Receive.Note) do\r\n\tif type(n) == \"function\" then\r\n\t\tif i ~= _name and i ~= \"recvNote\" then\r\n\t\t\ttable.insert(module,{cont=\"true\", name=i})\r\n\t\tend\r\n\tend\r\nend\r\n\tlocal temp = {}\r\n\ttemp.kind = \"func\"\r\n\ttemp.slotStyle = \"leftNone;rightOut;triggerHidden\"\r\n\ttemp.params = {{name=\"val\"}}\r\n\ttemp.name = _name\r\n\tif _min == 0 and _max == 127 then\r\n\t\ttemp.body = \"pixc.callRefs(val,true)\"\r\n\telse\r\n\t\ttemp.body = \"local res = self.range(0,127,\".. _min ..\",\" .. _max .. \",val)\\npixc.callRefs(res,true)\"\r\n\tend\r\n\ttable.insert(module,temp)\r\n\r\nself().dynamicRebuildFromDescriptions(json.encode(module), \"Receive.Note\", \"(.*)\")\r\n",
   "functionName": "buildNote()",
   "kind": "fn",
   "name": "buildNote",
   "path": "Midi.buildNote",
   "signiture": "buildNote()",
   "slotStyle": "hidden"
  },
  {
   "body": "local out = 0\r\n\r\nif val ~= nil and minIn ~= nil and maxIn ~= nil and minOut ~= nil and maxOut ~= nil then\r\n\tlocal rangeSizeIn = maxIn - minIn\r\n\tif rangeSizeIn ~= 0 then\r\n\t\tout = (val - minIn)/rangeSizeIn * (maxOut - minOut) + minOut\r\n\tend\r\nend\r\n\r\nreturn out\r\n",
   "functionName": "range(minIn,maxIn,minOut,maxOut,val)",
   "kind": "fn",
   "name": "range",
   "params": [
    {
     "name": "minIn",
     "type": ""
    },
    {
     "name": "maxIn",
     "type": ""
    },
    {
     "name": "minOut",
     "type": ""
    },
    {
     "name": "maxOut",
     "type": ""
    },
    {
     "name": "val",
     "type": ""
    }
   ],
   "path": "Midi.range",
   "signiture": "range(minIn,maxIn,minOut,maxOut,val)",
   "slotStyle": "hidden"
  },
  {
   "body": "local _name = self.helper:getProperty(\"CC Action Name\")\r\nlocal _min = tonumber(self.helper:getProperty(\"CC Min Out\"))\r\nlocal _max = tonumber(self.helper:getProperty(\"CC Max Out\"))\r\nlocal _minI = tonumber(self.helper:getProperty(\"CC Min In\"))\r\nlocal _maxI = tonumber(self.helper:getProperty(\"CC Max In\"))\r\n\r\nif _name == nil then return end\r\nlocal json = require \"json\"\r\nif self.helper == nil then\r\n\trequire \"pixcHelper\"\r\n\tself.helper = createPixcHelper(pixc,self())\r\nend\r\nlocal module = {{cont=\"true\", name=\"recvControlChange\"}}\r\n\r\nfor i,n in pairs(self.Receive.ControlChange) do\r\n\tif type(n) == \"function\" then\r\n\t\tif i ~= _name and i ~= \"recvControlChange\" then\r\n\t\t\ttable.insert(module,{cont=\"true\", name=i})\r\n\t\tend\r\n\tend\r\nend\r\n\tlocal temp = {}\r\n\ttemp.kind = \"func\"\r\n\ttemp.slotStyle = \"leftNone;rightOut;triggerHidden\"\r\n\ttemp.params = {{name=\"val\"}}\r\n\ttemp.name = _name\r\n\tif _min == _minI and _max == _maxI then\r\n\t\ttemp.body = \"pixc.callRefs(val,true)\"\r\n\telse\r\n\t\ttemp.body = \"local res = self.range(\" .. _minI .. \",\" .. _maxI .. \",\".. _min ..\",\" .. _max .. \",val)\\npixc.callRefs(res,true)\"\r\n\tend\r\n\ttable.insert(module,temp)\r\n\r\nself().dynamicRebuildFromDescriptions(json.encode(module), \"Receive.ControlChange\", \"(.*)\")\r\n",
   "functionName": "buildControlChange()",
   "kind": "fn",
   "name": "buildControlChange",
   "path": "Midi.buildControlChange",
   "signiture": "buildControlChange()",
   "slotStyle": "hidden"
  },
  {
   "body": "if self.helper == nil then\r\n\trequire \"pixcHelper\"\r\n\tself.helper = createPixcHelper(pixc,self())\r\nend\r\n\r\nif state == nil then \r\n\tself.helper:setProperty(\"Learn CC\",\"false\")\r\nend\r\n\r\nself._learnCC = self.helper.toBool(self.helper:getProperty(\"Learn CC\"))\r\n",
   "functionName": "learnCC(bool state)",
   "kind": "fn",
   "name": "learnCC",
   "params": [
    {
     "name": "state",
     "type": "bool"
    }
   ],
   "path": "Midi.learnCC",
   "signiture": "learnCC(bool state)",
   "slotStyle": "hidden"
  },
  {
   "body": "local _name = self.helper:getProperty(\"PC Action Name\")\r\n\r\nif _name == nil then return end\r\nlocal json = require \"json\"\r\nif self.helper == nil then\r\n\trequire \"pixcHelper\"\r\n\tself.helper = createPixcHelper(pixc,self())\r\nend\r\nlocal module = {{cont=\"true\", name=\"recvProgramChange\"}}\r\n\r\nfor i,n in pairs(self.Receive.ProgramChange) do\r\n\tif type(n) == \"function\" then\r\n\t\tif i ~= _name and i ~= \"recvProgramChange\" then\r\n\t\t\ttable.insert(module,{cont=\"true\", name=i})\r\n\t\tend\r\n\tend\r\nend\r\n\tlocal temp = {}\r\n\ttemp.kind = \"func\"\r\n\ttemp.slotStyle = \"leftNone;rightOut;triggerHidden\"\r\n\ttemp.params = {{name=\"val\"}}\r\n\ttemp.name = _name\r\n\ttable.insert(module,temp)\r\n\r\nself().dynamicRebuildFromDescriptions(json.encode(module), \"Receive.ProgramChange\", \"(.*)\")\r\n",
   "functionName": "buildPC()",
   "kind": "fn",
   "name": "buildPC",
   "path": "Midi.buildPC",
   "signiture": "buildPC()",
   "slotStyle": "hidden"
  },
  {
   "body": "if self.helper == nil then\r\n\trequire \"pixcHelper\"\r\n\tself.helper = createPixcHelper(pixc,self())\r\nend\r\n\r\nif state == nil then \r\n\tself.helper:setProperty(\"Learn PC\",\"false\")\r\nend\r\n\r\nself._learnPC = self.helper.toBool(self.helper:getProperty(\"Learn PC\"))\r\n",
   "functionName": "learnPC(bool state)",
   "kind": "fn",
   "name": "learnPC",
   "params": [
    {
     "name": "state",
     "type": "bool"
    }
   ],
   "path": "Midi.learnPC",
   "signiture": "learnPC(bool state)",
   "slotStyle": "hidden"
  },
  {
   "body": "local json = require \"json\"\r\nif self.helper == nil then\r\n\trequire \"pixcHelper\"\r\n\tself.helper = createPixcHelper(pixc,self())\r\nend\r\nlocal str = \"\"\r\nif folder == \"ChannelAftertouch\" then\r\n\tstr = \"recvChannelAftertouch\"\r\nelseif folder == \"Note\" then\r\n\tstr = \"recvNote\"\r\nelseif folder == \"Polymorphic\" then\r\n\tstr = \"recvPolymorphicAftertouch\"\r\nelseif folder == \"ControlChange\" then\r\n\tstr = \"recvControlChange\"\r\nelseif folder == \"ProgramChange\" then\r\n\tstr = \"recvProgramChange\"\r\nelseif folder == \"PitchBlend\" then\r\n\tstr = \"recvPitchBlend\"\r\nelseif folder == \"SysEx\" then\r\n\tstr = \"recvSysEx\"\r\nelse\r\n\treturn\r\nend\r\nlocal module = {{cont=\"true\", name=str}}\r\n\r\nself().dynamicRebuildFromDescriptions(json.encode(module), \"Receive.\" .. folder, \"(.*)\")\r\n",
   "functionName": "resetActions(string folder)",
   "kind": "fn",
   "name": "resetActions",
   "params": [
    {
     "name": "folder",
     "type": "string"
    }
   ],
   "path": "Midi.resetActions",
   "signiture": "resetActions(string folder)",
   "slotStyle": "hidden"
  }
 ],
 "canHaveExternalConnections": true,
 "cjv": {
  "h": 313.6,
  "w": 324.8,
  "x": 141.0,
  "y": 643.3333333333335
 },
 "definedExternally": false,
 "hostInfo": {
  "systemType": ""
 },
 "libraryExportPath": "C:/PixeraCode/control-modules/control_library_standard/Protocols/Midi.json",
 "license": "1GNTlyr7sewU1l3S6nhV4vdnnkDoYusceorvGU6tEKBSC0Smi//NapDdbOBUvic+DlIF8xgmL86ASyAF7ETBvvRr48YJ+yoJloAxEHv19GktfU83VuaRqlGIOREH8q5He1rejK6D9tXkNYR/aHU12qkuSaQU64lnpg36W/cOe5Q=",
 "name": "Midi",
 "properties": [
  {
   "cont": "true",
   "name": "Auto Init",
   "typeHint": "bool"
  },
  {
   "cont": "loopMIDI Port 1",
   "name": "Midi In Device",
   "optionsSourceFunc": "Utils.Midi.In.list",
   "typeHint": "string"
  },
  {
   "cont": "loopMIDI Port 2",
   "name": "Midi Out Device",
   "optionsSourceFunc": "Utils.Midi.Out.list",
   "typeHint": "string"
  },
  {
   "cont": "true",
   "name": "Disable Logs",
   "optionsAction": "self.disableLog",
   "typeHint": "bool"
  },
  {
   "area": "Note",
   "cont": "false",
   "name": "Learn Note",
   "optionsAction": "self.learnNote",
   "typeHint": "bool"
  },
  {
   "area": "Note",
   "cont": "Channel: 2 Note: 6 Value: 1.0",
   "name": "Last Received Note",
   "readOnly": true,
   "typeHint": "string"
  },
  {
   "area": "Note",
   "cont": "0",
   "name": "Note Min Out",
   "typeHint": "number"
  },
  {
   "area": "Note",
   "cont": "127",
   "name": "Note Max Out",
   "typeHint": "number"
  },
  {
   "area": "Note",
   "cont": "Ch2_Note_6",
   "name": "Note Action Name",
   "readOnly": true,
   "typeHint": "string"
  },
  {
   "area": "Note",
   "cont": "create action",
   "name": "createNote",
   "optionsAction": "self.buildNote",
   "readOnly": true,
   "showName": false,
   "typeHint": "button"
  },
  {
   "area": "Control Change",
   "cont": "false",
   "name": "Learn CC",
   "optionsAction": "self.learnCC",
   "typeHint": "bool"
  },
  {
   "area": "Control Change",
   "cont": "",
   "name": "Last Received CC",
   "readOnly": true,
   "typeHint": "string"
  },
  {
   "area": "Control Change",
   "cont": "0",
   "name": "CC Min In"
  },
  {
   "area": "Control Change",
   "cont": "127",
   "name": "CC Max In"
  },
  {
   "area": "Control Change",
   "cont": "0",
   "name": "CC Min Out",
   "typeHint": "number"
  },
  {
   "area": "Control Change",
   "cont": "127",
   "name": "CC Max Out",
   "typeHint": "number"
  },
  {
   "area": "Control Change",
   "cont": "",
   "name": "CC Action Name",
   "readOnly": true,
   "typeHint": "string"
  },
  {
   "area": "Control Change",
   "cont": "create action",
   "name": "createCC",
   "optionsAction": "self.buildControlChange",
   "typeHint": "button"
  },
  {
   "area": "Program Change",
   "cont": "false",
   "name": "Learn PC",
   "optionsAction": "self.learnPC",
   "typeHint": "bool"
  },
  {
   "area": "Program Change",
   "cont": "",
   "name": "Last Received PC",
   "readOnly": true,
   "typeHint": "string"
  },
  {
   "area": "Program Change",
   "cont": "",
   "name": "PC Action Name",
   "readOnly": true,
   "typeHint": "string"
  },
  {
   "area": "Program Change",
   "cont": "create action",
   "name": "createPC",
   "optionsAction": "self.buildPC",
   "readOnly": true,
   "showName": false,
   "typeHint": "button"
  },
  {
   "area": "Reset",
   "cont": "Reset Note Receive Actions",
   "name": "resetNote",
   "optionsAction": "self.resetActions(\"Note\")",
   "readOnly": true,
   "showName": false,
   "typeHint": "button"
  },
  {
   "area": "Reset",
   "cont": "Reset Control Change Actions",
   "name": "resetCC",
   "optionsAction": "self.resetActions(\"ControlChange\")",
   "readOnly": true,
   "showName": false,
   "typeHint": "button"
  },
  {
   "area": "Reset",
   "cont": "Reset Program Change Actions",
   "name": "resetPC",
   "optionsAction": "self.resetActions(\"ProgramChange\")",
   "readOnly": true,
   "showName": false,
   "typeHint": "button"
  },
  {
   "area": "Reset",
   "cont": "Reset Polymorphic Actions",
   "name": "resetPoly",
   "optionsAction": "self.resetActions(\"Polymorphic\")",
   "readOnly": true,
   "showName": false,
   "typeHint": "button"
  },
  {
   "area": "Reset",
   "cont": "Reset PitchBlend Actions",
   "name": "resetPitch",
   "optionsAction": "self.resetActions(\"PitchBlend\")",
   "readOnly": true,
   "showName": false,
   "typeHint": "button"
  },
  {
   "area": "Reset",
   "cont": "Reset SysEx Actions",
   "name": "resetSysex",
   "optionsAction": "self.resetActions(\"SysEx\")",
   "readOnly": true,
   "showName": false,
   "typeHint": "button"
  },
  {
   "cont": "AV Stumpfl GmbH",
   "name": "Author",
   "readOnly": true,
   "typeHint": "string"
  },
  {
   "cont": "",
   "imageBase64": "",
   "name": "Logo",
   "readOnly": true,
   "showName": false,
   "typeHint": "image"
  },
  {
   "cont": "1.6",
   "name": "Version",
   "readOnly": true,
   "typeHint": "string"
  },
  {
   "cont": "To use Midi SysEx messages as Table comment out the string message and in the Table Massege.  To Use Midi Timecode connect timcodeToTimeline function with Timeline setTimecodeInput function and set the Timeline to receive    ",
   "name": "Description",
   "readOnly": true,
   "typeHint": "string"
  }
 ],
 "separateCode": false,
 "uiUrl": ""
}