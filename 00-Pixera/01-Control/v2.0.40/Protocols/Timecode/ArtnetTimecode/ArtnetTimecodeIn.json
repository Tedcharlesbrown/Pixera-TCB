{
 "api": [
  {
   "body": "require \"pixcHelper\"\r\nrequire \"pixcDriver\"\r\nif self.pixcHelper ~= nil then\r\n\treturn \r\nend\r\nself.pixcHelper = createPixcHelper(pixc,self())\r\nself.driver = createPixcDriver()\r\nself.driver:enableBroadcast()\r\n\r\nself.adapter = pixc.getRoot().Utils.Network.convertLocalAdapterEntry(self.pixcHelper:getProperty(\"Local Adapter\",\"Any\"))\r\n\r\nself.token = 0\r\n\r\nself.data = nil\r\nself.driver:createParser()\r\n\r\nself.Internal.setRecFunction()\r\n\r\nself.driver:setLogFunction(function (...) pixc.log(...) end)\r\nself.driver:set(\"udp\", 0, 0, self.adapter, 6454, nil);\r\nself.IsConnected(true)\r\nself.rxTimeFreshStart = 0\r\nself.freshMode = 0\r\nself.driver:connectAsync();\r\nself.ready = true\r\nself.running = false\r\nif self.interval == nil then\r\n\tself.interval = pixc.getRoot().Utils.Timer.setInterval(\r\n\t\tfunction()\r\n\t\t\tself.Internal.checkInput()\r\n\t  \tend, 50)\r\nend\r\nif self.intervalExecuteTimecode == nil then\r\n\tself.intervalExecuteTimecode = pixc.getRoot().Utils.Timer.setInterval(\r\n\t\tfunction()\r\n\t\t\tself.timecodeToTimeline()\r\n\t  \tend, 1000)\r\nend",
   "functionName": "init()",
   "kind": "fn",
   "name": "init",
   "path": "ArtnetTimecodeIn.init",
   "signiture": "init()"
  },
  {
   "body": "if self.interval ~= nil then\r\n\tpixc.getRoot().Utils.Timer.clearInterval(self.interval)\r\n\tself.interval = nil\r\nend\r\nif self.intervalExecuteTimecode ~= nil then\r\n\tpixc.getRoot().Utils.Timer.clearInterval(self.intervalExecuteTimecode)\r\n\tself.intervalExecuteTimecode = nil\r\nend\r\n\r\nself.IsConnected(false)\r\nif self.driver == nil then\r\n\treturn\r\nend\r\nself.driver:removeParser()\r\nself.driver:close()\r\nself.driver = nil\r\nself.pixcHelper = nil\r\nself._OverridenReceiveCallback = nil\r\nself.Timecode(nil)\r\nself.running = false\r\nself.ready = true\r\nself.freshMode = 2\r\nself.timecodeToTimeline()",
   "functionName": "uninit()",
   "kind": "fn",
   "name": "uninit",
   "path": "ArtnetTimecodeIn.uninit",
   "signiture": "uninit()"
  },
  {
   "attKind": "internal",
   "body": "self.connected = pixcCommon.execAttribute(0, self.connected, val, doSet)\r\nreturn self.connected\r\n",
   "functionName": "IsConnected(val,bool doSet)",
   "kind": "fn",
   "name": "IsConnected",
   "params": [
    {
     "name": "val",
     "type": ""
    },
    {
     "name": "doSet",
     "type": "bool"
    }
   ],
   "path": "ArtnetTimecodeIn.IsConnected",
   "signiture": "IsConnected(val,bool doSet)",
   "slotStyle": "leftNone;rightOut;triggerHidden"
  },
  {
   "elems": [
    {
     "body": "pixc.log(data)\r\nself.driver:overrrideReceiveCallbackFunction(\r\nfunction (data)\r\nlocal bytes = { string.byte(data, 1,-1) }\r\n\r\nif self.data == nil or self.connected == nil or self.connected == false then\r\n\tself.data = {}\r\n\treturn\r\nend\r\nlocal header = {string.byte(\"Art-Net\",1,-1)}\r\nheader[8] = 0x00\r\nheaderTimcode = {0x00,0x97}\r\n\r\n\r\nif bytes[1] == header[1] and bytes[2] == header[2] and bytes[3] == header[3] and bytes[4] == header[4] and bytes[5] == header[5] and bytes[6] == header[6] and bytes[7] == header[7] and bytes[8] == header[8] then\r\n\r\nif bytes[9] == headerTimcode[1] and bytes[10] == headerTimcode[2] then\r\n--Timecode\r\nlocal frames = bytes[15]\r\nlocal seconds = bytes[16]\r\nlocal minutes = bytes[17]\r\nlocal hours = bytes[18]\r\nlocal todoublenumber = function(data) if data < 10 then return \"0\" .. data else return tostring(data) end end\r\n\r\nif bytes[19] == 0x00 then self.TimecodeMode(\"24 FPS\") self.mode = 1 self.fps = 24\r\nelseif bytes[19] == 0x01 then self.TimecodeMode(\"25 FPS\") self.mode = 2 self.fps = 25\r\nelseif bytes[19] == 0x02 then self.TimecodeMode(\"30 FPS - Drop Frames\") self.mode = 3 self.fps = 30\r\nelseif bytes[19] == 0x03 then self.TimecodeMode(\"30 FPS\") self.mode = 5 self.fps = 30 end\r\n\r\nself.Timecode(\r\n\ttodoublenumber(hours) .. \":\" ..\r\n\ttodoublenumber(minutes) .. \":\" ..\r\n\ttodoublenumber(seconds) .. \":\" ..\r\n\ttodoublenumber(frames) \r\n\t)\r\n--self.totalFrame = frames + seconds* self.fps + minutes *60*self.fps + hours*60*60*self.fps\r\n--pixc.log(self.totalFrame)\r\nif self.running == false then\r\n\r\n\tself.freshMode = 1\r\n\tself.token = self.token+1\r\nend\r\nself.running = true\r\nself.ready = true\r\n\r\nend\r\nend\r\n\r\nend, true) \r\n",
     "functionName": "setRecFunction()",
     "kind": "fn",
     "name": "setRecFunction",
     "path": "ArtnetTimecodeIn.Internal.setRecFunction",
     "signiture": "setRecFunction()",
     "slotStyle": "leftNone;rightNone;triggerHidden"
    },
    {
     "body": "if self.ready ~= true and self.running == true then\r\n\tself.running = false\r\n\tself.ready = true\r\n\tself.freshMode = 2\r\n\tself.token = self.token+1\r\n\tself.timecodeToTimeline()\r\nelse\r\n\tself.ready = false\r\nend\r\n",
     "functionName": "checkInput()",
     "kind": "fn",
     "name": "checkInput",
     "path": "ArtnetTimecodeIn.Internal.checkInput",
     "signiture": "checkInput()",
     "slotStyle": "leftNone;rightNone;triggerHidden"
    }
   ],
   "kind": "ns",
   "name": "Internal"
  },
  {
   "attKind": "internal",
   "body": "\r\n--self._Timecode = pixcCommon.execAttribute(0, self._Timecode, val, doSet)\r\nif val == nil then\r\n\tif self.timecode ~= nil then\r\n\t\tpixc.callRefs(tonumber(self.timecode[1]),tonumber(self.timecode[2]),tonumber(self.timecode[3]),tonumber(self.timecode[4]),false,self.mode)\r\n\t\tpixc.report(self.timecode[1] .. \":\" .. self.timecode[2] .. \":\" .. self.timecode[3] .. \":\" .. self.timecode[4])\r\n\tend\r\n\treturn\r\nend\r\nlocal timecode = self.pixcHelper.stringSplit(val,\":\")\r\n\r\n\r\nlocal totalFrames = tonumber(timecode[1])*60*60*self.fps + tonumber(timecode[2])*60*self.fps + tonumber(timecode[3]) * self.fps + tonumber(timecode[4])\r\n\r\nif totalFrames == self.totalFrames then\r\n\treturn\r\nend\r\n\r\nif self.totalFrames == nil or totalFrames ~= (self.totalFrames+1)  then\r\n\t\tpixc.warn(\"Incoming Timecode Jumped!\")\r\n\t\tself.freshMode = 2\r\n\t\tself.token = self.token\r\n\t\tself.totalFrames = totalFrames\r\n\t\tself.timecode = timecode\r\n\t\tself.timecodeToTimeline()\r\n\t\tself.running = false\r\n\t\t--self.freshMode = 1\r\n\t\t--self.timecodeToTimeline()\r\n\t\t--pixc.callRefs(tonumber(self.timecode[1]),tonumber(self.timecode[2]),tonumber(self.timecode[3]),tonumber(self.timecode[4]),false,self.mode)\r\n\treturn\r\nend\r\n\r\nif self.timecode ~= nil and (\r\n\tself.timecode[1] ~= timecode[1] or\r\n\tself.timecode[2] ~= timecode[2] or\r\n\tself.timecode[3] ~= timecode[3] or\r\n\tself.timecode[4] ~= timecode[4]) then\r\n\t--pixc.callRefs(tonumber(timecode[1]),tonumber(timecode[2]),tonumber(timecode[3]),tonumber(timecode[4]),true,self.mode)\r\n\r\nelse\r\n\tself.freshMode = 2\r\n\t--pixc.callRefs(tonumber(timecode[1]),tonumber(timecode[2]),tonumber(timecode[3]),tonumber(timecode[4]),false,self.mode)\r\nend\r\nself.totalFrames = totalFrames\r\nself.timecode = timecode\r\n--pixc.callRefs(tonumber(timecode[1]),tonumber(timecode[2]),tonumber(timecode[3]),tonumber(timecode[4]))\r\n\r\nreturn val\r\n",
   "functionName": "Timecode(val,bool doSet)",
   "kind": "fn",
   "name": "Timecode",
   "params": [
    {
     "name": "val",
     "type": ""
    },
    {
     "name": "doSet",
     "type": "bool"
    }
   ],
   "path": "ArtnetTimecodeIn.Timecode",
   "signiture": "Timecode(val,bool doSet)",
   "slotStyle": "leftNone;rightNone;triggerHidden"
  },
  {
   "attKind": "internal",
   "body": "self._TimecodeMode = pixcCommon.execAttribute(0, self._TimecodeMode, val, doSet)\r\nreturn self._TimecodeMode\r\n",
   "functionName": "TimecodeMode(val,bool doSet)",
   "kind": "fn",
   "name": "TimecodeMode",
   "params": [
    {
     "name": "val",
     "type": ""
    },
    {
     "name": "doSet",
     "type": "bool"
    }
   ],
   "path": "ArtnetTimecodeIn.TimecodeMode",
   "signiture": "TimecodeMode(val,bool doSet)",
   "slotStyle": "leftNone;rightNone;triggerHidden"
  },
  {
   "body": "if self.timecode ~= nil and\r\n\tself.running ~= nil and\r\n\tself.freshMode ~= nil and\r\n\tself.mode ~= nil then\r\n\t\r\n\tlocal rxTimeFreshStart = pixc.callRefs(tonumber(self.timecode[1]),tonumber(self.timecode[2]),tonumber(self.timecode[3]),tonumber(self.timecode[4]),self.rxTimeFreshStart,self.running, self.freshMode, self.token,self.mode)\r\npixc.log(self.freshMode)\r\n\tif rxTimeFreshStart == nil or rxTimeFreshStart[1] == nil or rxTimeFreshStart[1][1] == nil then\r\n\t\treturn\r\n\tend\r\n\t\r\n\tif self.freshMode == 1 or self.freshMode == 2 then\r\n\t\tif self.freshMode == 1 then\r\n\t\t\tself.rxTimeFreshStart = rxTimeFreshStart[1][1]\r\n\t\t\tself.lastFreshMode=1\r\n\t\telse\r\n\t\t\tself.rxTimeFreshStart = 0\r\n\t\t\tself.lastFreshMode=2\r\n\t\tend\r\n\t\tif rxTimeFreshStart[1][1] == -1 then\r\n\t\t\treturn \r\n\t\tend\r\n\t\tself.freshMode = 0\r\n\telse\r\n\t\tif rxTimeFreshStart[1][1] == -1 then\r\n\t\t\tself.freshMode = 2\r\n\t\tend\r\n\tend\r\nend\r\n",
   "functionName": "timecodeToTimeline()",
   "kind": "fn",
   "name": "timecodeToTimeline",
   "path": "ArtnetTimecodeIn.timecodeToTimeline",
   "signiture": "timecodeToTimeline()",
   "slotStyle": "leftNone;rightOut"
  }
 ],
 "canHaveExternalConnections": true,
 "cjv": {
  "h": 213.0,
  "w": 285.0,
  "x": 111.0,
  "y": 452.0
 },
 "definedExternally": false,
 "hostInfo": {
  "systemType": ""
 },
 "libraryExportPath": "C:/PixeraCode/control-modules/control_library_standard/Protocols/Timecode/ArtnetTimecode/ArtnetTimecodeIn.json",
 "license": "1GNTlyr7sewU1l3S6nhV4nC83U7J0ficutD+wsvd7XxrBtB417KxiWZDISB/ougrZ/jia+OciEjsPZzlqEG+rDA6TDSF0QTOaVpUh23rTyCgIvBEm4Xg7NQ7N/s+bCv5IBcEvQ4lKR55DaVRVfqd7gVUG0yctQBaGt51o20Peio=",
 "name": "ArtnetTimecodeIn",
 "properties": [
  {
   "cont": "true",
   "name": "Auto Init",
   "typeHint": "bool"
  },
  {
   "cont": "Any",
   "name": "Local Adapter",
   "optionsSourceFunc": "Utils.Network.getLocalAdapterEntries",
   "typeHint": "string"
  },
  {
   "cont": "AVStumpfl GmbH (Benni M.)",
   "name": "Author",
   "readOnly": true,
   "typeHint": "string"
  },
  {
   "cont": "",
   "imageBase64": "",
   "name": "Logo",
   "readOnly": true,
   "showName": false,
   "typeHint": "image"
  },
  {
   "cont": "www.pixera.one",
   "name": "URL",
   "readOnly": true,
   "showName": false,
   "typeHint": "url"
  },
  {
   "cont": "1.1",
   "name": "Version",
   "readOnly": true,
   "typeHint": "string"
  }
 ],
 "separateCode": false,
 "uiUrl": ""
}