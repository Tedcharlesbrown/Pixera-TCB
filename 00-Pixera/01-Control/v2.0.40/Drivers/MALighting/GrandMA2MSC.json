{
 "api": [
  {
   "body": "return self()",
   "functionName": "ref()",
   "kind": "fn",
   "name": "ref",
   "path": "GrandMA2MSC.ref",
   "signiture": "ref()"
  },
  {
   "body": "require \"pixcHelper\"\r\nrequire \"pixcNetwork\"\r\nif self.helper ~= nil then\r\n\treturn \r\nend\r\nif self.network ~= nil then\r\n    self.uninit()\r\nend\r\nself.helper = createPixcHelper(pixc,self())\r\nself.network = createPixcNetwork()\r\npixc.log(self.helper)\r\npixc.log(self.network)\r\nself.open = false\r\nself.port = tonumber(self.helper:getProperty(\"Port\",\"6452\"))\r\nself.log = self.helper:getProperty(\"Log Cues\",\"false\")\r\nself.executor = self.helper:getProperty(\"Executor\",\"1.1\")\r\nself.ipLocal =pixc.getRoot().Utils.Network.convertLocalAdapterEntry(self.helper:getProperty(\"Adapter IP\",\"0.0.0.0\"))\r\nself.timeline = self.helper:getProperty(\"Timeline\")\r\nself.goBack = self.helper:getProperty(\"Execute on GoBack\")\r\nself.IsOpen(false, true)\r\nlocal ready = false\r\nself.network:configureUdp(\r\n\t0,\r\n\t0,\r\n\tself.ipLocal,\r\n\tself.port,\r\n\tfunction (handle, data) self().receive(data) end,\r\n\tfunction(handle, error)\r\n        pixc.log(\"closeCallback: \"..error)\r\n        ready = true\r\n    end)\r\nself.network:setStatusCallbacks(\r\n\tfunction (...) pixc.log(...) end,\r\n\tfunction(isOpen)\r\n        self().IsOpen(isOpen, true)\r\n        ready = true\r\n    end)\r\nself.network:enableBroadcast();\r\nself.network:start()\r\n\r\nif blocking then\r\n    while not ready do\r\n        Utils.Timer.sleep(100)\r\n    end\r\nend\r\n",
   "functionName": "init(bool blocking)",
   "kind": "fn",
   "name": "init",
   "params": [
    {
     "name": "blocking",
     "type": "bool"
    }
   ],
   "path": "GrandMA2MSC.init",
   "signiture": "init(bool blocking)"
  },
  {
   "body": "if self.network == nil then return end\r\nself.network:close()\r\nself.network = nil\r\nself.helper = nil\r\n",
   "functionName": "uninit()",
   "kind": "fn",
   "name": "uninit",
   "path": "GrandMA2MSC.uninit",
   "signiture": "uninit()"
  },
  {
   "body": "if msg == nil then return end\r\nlocal function hexencode(str)\r\nlocal addr = {}\r\n\tstr:gsub(\".\", function(char)\r\n\t\tif char:byte() > 32  and char:byte() < 128 then\r\n\t\t\ttable.insert(addr,char:byte())\r\n\t\telse\r\n\t\t\ttable.insert(addr,33)\r\n\t\tend\r\n\tend)\r\n\tpixc.log(table.concat(addr))\r\n   return addr\r\nend\r\nlocal header = {71,77,65,33,77,83,67,33,33,33,33,33,33,127,112,33,127,33}\r\nlocal headerBack = {71,77,65,33,77,83,67,33,33,33,33,33,33,127,112,33,127,33,33,33,33,33,33}\r\nlocal t = hexencode(msg)\r\nlocal e = false\r\nlocal count = 0\r\nif self.goBack == \"true\" then\r\n\tfor i in pairs(headerBack) do\r\n\t\tif t[i] ~= headerBack[i] and headerBack[i] ~= \"\" and i ~= 9 then\r\n\t\t\te = true\r\n\t\tend\r\n\t\tcount = i\r\n\tend\r\nelse\r\n\te = true\r\nend\r\nif e == true then\r\n\tcount = 0\r\n\te = false\r\n\tfor i in pairs(header) do\r\n\t\tif t[i] ~= header[i] and header[i] ~= \"\" then\r\n\t\t\te = true\r\n\t\tend\r\n\t\tcount = i\r\n\tend\r\nend\r\n--local logging = \"\"\r\n--for i,_ in pairs(t) do\r\n--\tlogging = logging .. string.char(_)\r\n--end\r\n--pixc.log(logging)\r\n\r\nif e == false and self._mute ~= nil and self._mute == false then\r\n\tlocal cue = \"\"\r\n\tfor i=count+1,string.len(msg)-1,1 do\r\n\t\tcue = cue .. string.char(t[i])\r\n\t\t--pixc.log(cue)\r\n\tend\r\n\tif cue == nil then pixc.log(\"cue was in grandmaMSC nil\"); return end\r\n\tlocal cueAndExecutor = self.helper.stringSplit(cue,\"!\")\r\n\tif cueAndExecutor[1] == nil then pixc.log(\"cueExecutor was in grandmaMSC nil\"); return end\r\n\tcue = self.helper.stringSplit(cueAndExecutor[1],\".\")\r\n\tif cue[1] == nil or cue[2] == nil then\r\n\t\treturn\r\n\tend\r\n\tif tonumber(cue[2]) == 0 then\r\n\t\tcue = cue[1]\r\n\telse\r\n\t\tlocal t = {}\r\n\t\tfor i=1, string.len(cue[2]) do\r\n\t\t\tt[i]= (string.sub(cue[2],i,i))\r\n\t\tend\r\n\t\tlocal subCue = t[1]\r\n\t\tif subCue == nil then pixc.log(\"subCue was in grandmaMSC nil\"); return end\r\n\t\tif t[1] == nil or t[2] == nil or t[3] == nil then pixc.log(\"t entry was in grandmaMSC nil\"); return end\r\n\t\tif tonumber(t[3]) > 0 then\r\n\t\t\tcue[2] = t[1] .. t[2] .. t[3]\r\n\t\telseif tonumber(t[2]) > 0 then\r\n\t\t\tcue[2] = t[1] .. t[2]\r\n\t\telse\r\n\t\t\tcue[2] = t[1]\r\n\t\tend\r\n\t\t--for l,f in pairs(t) do\r\n\t\t\t--pixc.log(f)\r\n\t\t--end\r\n\t\tcue = cue[1] .. \".\" .. cue[2]\r\n\tend\r\n\tlocal executor = cueAndExecutor[2]\r\n\tif self.executor ~= executor then\r\n\t\treturn\r\n\tend\r\n\tif self.log == \"true\" then\r\n\t\tpixc.log(\"Executor:\" .. executor)\r\n\t\tpixc.log(cue)\r\n\tend\r\n\tlocal h = Pixera.Timelines.Timeline.getInst(self.timeline)\r\n\tif h ~= nil then\r\n\t\tlocal handle\r\n\t\tfor i,_ in pairs(h.getCues()) do\r\n\t\t\tif _.getName() == cue then\r\n\t\t\t\thandle = _\r\n\t\t\t\tif h.getCurrentTime() ~= handle.getTime() then\r\n\t\t\t\t\thandle.apply()\r\n\t\t\t\tend\r\n\t\t\t\tif handle.getOperation() ~= 1 then\r\n\t\t\t\t\th.play()\r\n\t\t\t\tend\r\n\t\t\t\treturn\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\nend\r\n",
   "functionName": "receive(string msg)",
   "kind": "fn",
   "name": "receive",
   "params": [
    {
     "name": "msg",
     "type": "string"
    }
   ],
   "path": "GrandMA2MSC.receive",
   "signiture": "receive(string msg)"
  },
  {
   "attKind": "internal",
   "body": "self.open = pixcCommon.execAttribute(false, self.open, isOpen, doSet)\n",
   "functionName": "IsOpen(bool isOpen,bool doSet)",
   "kind": "fn",
   "name": "IsOpen",
   "params": [
    {
     "name": "isOpen",
     "type": "bool"
    },
    {
     "name": "doSet",
     "type": "bool"
    }
   ],
   "path": "GrandMA2MSC.IsOpen",
   "signiture": "IsOpen(bool isOpen,bool doSet)",
   "slotStyle": "leftNone;rightOut;triggerHidden"
  },
  {
   "body": "local t = {}\r\nfor i,_ in pairs(Pixera.Timelines.getTimelines()) do\r\n\ttable.insert(t,_.getName())\r\nend \r\nreturn t",
   "functionName": "getTimelines()",
   "kind": "fn",
   "name": "getTimelines",
   "path": "GrandMA2MSC.getTimelines",
   "signiture": "getTimelines()",
   "slotStyle": "hidden"
  },
  {
   "elems": [
    {
     "body": "self.Mute.mute(true,true)",
     "functionName": "muteInput()",
     "kind": "fn",
     "name": "muteInput",
     "path": "GrandMA2MSC.Mute.muteInput",
     "signiture": "muteInput()"
    },
    {
     "body": "self.Mute.mute(false,true)",
     "functionName": "unMuteInput()",
     "kind": "fn",
     "name": "unMuteInput",
     "path": "GrandMA2MSC.Mute.unMuteInput",
     "signiture": "unMuteInput()"
    },
    {
     "attKind": "standard",
     "attReports": {
      "0": "false"
     },
     "body": "self._mute = pixcCommon.execAttribute(0, self._mute, val, doSet)\r\nreturn self._mute\r\n",
     "functionName": "mute(val,bool doSet)",
     "kind": "fn",
     "name": "mute",
     "params": [
      {
       "name": "val",
       "type": ""
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "path": "GrandMA2MSC.Mute.mute",
     "signiture": "mute(val,bool doSet)"
    }
   ],
   "kind": "ns",
   "name": "Mute"
  }
 ],
 "canHaveExternalConnections": true,
 "cjv": {
  "h": 200.0,
  "w": 200.0,
  "x": 0.0,
  "y": 61.0
 },
 "definedExternally": false,
 "hostInfo": {
  "systemType": ""
 },
 "libraryExportPath": "C:/PixeraCode/control-modules/control_library_standard/Drivers/MALighting/GrandMA2MSC.json",
 "license": "1GNTlyr7sewU1l3S6nhV4mnO6oCxcqCp4dTyLuyTHQfE5SVJ7y+Go3VohzWXGl1XxgzHNlxNS2l/Rqa9GZbQzW7tmIQWAioN+HRUGxQclkkGewN4wlk0fDTmfbA0RUCw1nn0d8R4KvzIc/HFed8VfJC+oUdt3fIwu3FhxhI6yp8=",
 "name": "GrandMA2MSC",
 "properties": [
  {
   "cont": "true",
   "name": "Auto Init",
   "typeHint": "bool"
  },
  {
   "cont": "true",
   "name": "Log Cues",
   "typeHint": "bool"
  },
  {
   "cont": "6004",
   "name": "Port",
   "typeHint": "number"
  },
  {
   "cont": "Default",
   "name": "Adapter IP",
   "optionsSourceFunc": "Utils.Network.getLocalAdapterEntries",
   "typeHint": "string"
  },
  {
   "cont": "Clock",
   "name": "Timeline",
   "optionsSourceFunc": "self.getTimelines",
   "typeHint": "string"
  },
  {
   "cont": "201.1",
   "name": "Executor",
   "typeHint": "string"
  },
  {
   "cont": "false",
   "name": "Execute on GoBack",
   "typeHint": "bool"
  },
  {
   "cont": "AV Stumpfl GmbH (Benni M.)",
   "name": "Author",
   "readOnly": true,
   "typeHint": "string"
  },
  {
   "cont": "",
   "imageBase64": "",
   "name": "Logo",
   "readOnly": true,
   "showName": false,
   "typeHint": "image"
  },
  {
   "cont": "1.6",
   "name": "Version",
   "readOnly": true,
   "typeHint": "number"
  },
  {
   "cont": "Activate Midi Show Control in Setup MSC Out Ethernet with MSC Out Exec \"Exec.Page\" MSC Out Command \"All\" Send to \"Group\", MSC Out Device 0, MSC Group 1. Second Module Autoinit off and receive functions connected",
   "name": "Description",
   "readOnly": true,
   "typeHint": "string"
  }
 ],
 "separateCode": false,
 "uiUrl": ""
}