{
 "api": [
  {
   "body": "return self()",
   "functionName": "ref()",
   "kind": "fn",
   "name": "ref",
   "path": "VS_88H2.ref",
   "signiture": "ref()",
   "slotStyle": "leftIn;rightOut;triggerHidden"
  },
  {
   "body": "require \"pixcHelper\"\nrequire \"pixcNetwork\"\nif self.lock == true then return end\nself.lock = true\nif self.helper ~= nil then\n\tself.uninit();\n\tUtils.Timer.sleep(500)\nend\nself.lock = nil\nself.helper = createPixcHelper(pixc,self())\nself.network = createPixcNetwork()\nself.connected = false\n--pixc.log(self.helper)\n--pixc.log(self.network)\nself.IsConnected(false, true)\nself.ip = self.helper:getProperty(\"IP\",\"127.0.0.1\")\nself.port = tonumber(self.helper:getProperty(\"Port\",\"6451\"))\nself.ipLocal =pixc.getRoot().Utils.Network.convertLocalAdapterEntry(self.helper:getProperty(\"Adapter IP\",\"0.0.0.0\"))\nlocal ready = false\nself.network:configureTcp(\n\tself.ip,\n\tself.port,\n\tfunction (handle, data) self().receive(data) end,\n\tfunction(handle, error)\n        pixc.log(\"closeCallback: \"..error)\n        ready = true\n    end,\n\tself.ipLocal)\nself.network:setStatusCallbacks(\n\tfunction (...)  end,\n\tfunction(isConnected)\n        self().IsConnected(isConnected, true)\n        ready = true\n\t\tif self.connected == \"true\" or self.connected == true then\n\t\t\tself.send(\"#\\r\")\n\t\t\tself.send(\"#VERSION?\\r\")\n\t\t\tself.send(\"#SN?\\r\")\n\t\t\tself.send(\"#MODEL? \\r\")\n\t\t\tself.send(\"#NAME? \\r\")\n\t\t\tself.send(\"#NET-DHCP? \\r\")\n\t\t\tself.send(\"#NET-GATE? \\r\")\n\t\t\tself.send(\"#NET-IP? \\r\")\n\t\t\tself.send(\"#NET-MAC? \\r\")\n\t\t\tself.send(\"#NET-MASK? \\r\")\n\t\t\tself.send(\"#PROT-VER? \\r\")\n\t\t\tself.send(\"#INFO-IO? \\r\")\n\t\t\tself.send(\"#BUILD-DATE? \\r\")\n\t\t\tself.send(\"#BAUD? \\r\")\n\n\t\t\tif self.interval ~= nil then\n\t\t\t\tpixc.getRoot().Utils.Timer.clearInterval(self.interval)\n\t\t\t\tself.interval = nil\n\t\t\tend\n\t\t\tself.interval = pixc.getRoot().Utils.Timer.setInterval(\n\t\t\t\tfunction()\n\t\t\t\t\tfor i=1,8,1 do\t\t\t\n\t\t\t\t\t\t--input info\n\t\t\t\t\t\t\tself.send(\"#SIGNAL? \" .. i .. \"\\r\")\n\t\t\t\t\t\t--output info\n\t\t\t\t\t\t\tself.send(\"#VID? \" .. i .. \"\\r\")\n\t\t\t\t\t\t--testpattern\n\t\t\t\t\t\t\tself.send(\"#VID-PATTERN? \" .. i .. \"\\r\")\n\t\t\t\t\t\t--mute\n\t\t\t\t\t\t\tself.send(\"#VMUTE? \" .. i .. \"\\r\")\n\t\t\t\t\t\tend\n\t\t\t\t\t\t--self.send(\"#REMOTE-INFO? 0,1\\r\")\n\t\t\t\tend, 4000)\n\n\t\t\t\n\t\tend\n    end)\nself.network:start()\n\nif blocking then\n    while not ready do\n        Utils.Timer.sleep(100)\n    end\nend\n",
   "functionName": "init(bool blocking)",
   "kind": "fn",
   "name": "init",
   "params": [
    {
     "name": "blocking",
     "type": "bool"
    }
   ],
   "path": "VS_88H2.init",
   "signiture": "init(bool blocking)",
   "slotStyle": "leftIn;rightOut"
  },
  {
   "body": "if self.network ~= nil then \r\n\tself.network:close()\r\n\tself.network = nil\r\nend\r\nif self.interval ~= nil then\r\n\tpixc.getRoot().Utils.Timer.clearInterval(self.interval)\r\n\tself.interval = nil\r\nend\r\nself.helper = nil\r\n",
   "functionName": "uninit()",
   "kind": "fn",
   "name": "uninit",
   "path": "VS_88H2.uninit",
   "signiture": "uninit()",
   "slotStyle": "leftIn;rightOut"
  },
  {
   "body": "if self.connected == false or self.connected == \"false\" or self.connected == nil then\r\n\treturn\r\nend\r\nself.network:send(msg)\r\n",
   "functionName": "send(string msg)",
   "kind": "fn",
   "name": "send",
   "params": [
    {
     "name": "msg",
     "type": "string"
    }
   ],
   "path": "VS_88H2.send",
   "signiture": "send(string msg)",
   "slotStyle": "leftIn;rightOut;triggerHidden"
  },
  {
   "body": "--pixc.log(\"got data\")\r\n--self.send(\"Echo: \"..msg)\r\nmsg = string.gsub(msg,\"\\n\",\"\")\r\n\r\nlocal msgs = self.helper.stringSplit(msg,\"\\r\")\r\n\r\nfor i,n in pairs(msgs) do\r\n\tlocal _msgTable = self.helper.stringSplit(n,\"@\")\r\n\tlocal _messageType = self.helper.stringSplit(_msgTable[2],\" \")\r\n\r\n\tif _msgTable[2] ~= nil then\r\n\t\tif not string.match(_msgTable[2],\"ERR\") then\r\n\t\t\tif _messageType[1] == \"VERSION\" then\r\n\t\t\t\tself.System.version(_messageType[2],true)\r\n\t\t\telseif _messageType[1] == \"SN\" then\r\n\t\t\t\tself.System.serialNumber(_messageType[2],true)\r\n\t\t\telseif _messageType[1] == \"RESET\" then\r\n\t\t\t\tpixc.log(self() .. \" Reset Ok\")\r\n\t\t\telseif _messageType[1] == \"REMOTE-INFO\" then\r\n\t\t\t\tlocal _info = self.helper.stringSplit(_messageType[2],\",\")\r\n\t\t\t\tfor i,n in pairs(_info) do\r\n\t\t\t\t\tpixc.log(i,n)\r\n\t\t\t\tend\r\n\t\t\telseif _messageType[1] == \"PROT-VER\" then\r\n\t\t\t\tself.System.protocolVersion(_messageType[2],true)\r\n\t\t\telseif _messageType[1] == \"NET-MASK\" then\r\n\t\t\t\tself.System.subnet(_messageType[2],true)\r\n\t\t\telseif _messageType[1] == \"NET-MAC\" then\r\n\t\t\t\tself.System.macAddress(_messageType[2],true)\r\n\t\t\telseif _messageType[1] == \"NET-IP\" then\r\n\t\t\t\tself.System.ipAddress(_messageType[2],true)\r\n\t\t\telseif _messageType[1] == \"NET-GATE\" then\r\n\t\t\t\tself.System.gateway(_messageType[2],true)\r\n\t\t\telseif _messageType[1] == \"NET-DHCP\" then\r\n\t\t\t\tif _messageType[2] == \"0\" then\r\n\t\t\t\t\tself.System.dhcp(false,true)\r\n\t\t\t\telse\r\n\t\t\t\t\tself.System.dhcp(true,true)\r\n\t\t\t\tend\r\n\t\t\telseif _messageType[1] == \"NAME\" then\r\n\t\t\t\tself.System.name(_messageType[2],true)\r\n\t\t\telseif _messageType[1] == \"MODEL\" then\r\n\t\t\t\tself.System.model(_messageType[2],true)\r\n\t\t\telseif _messageType[1] == \"INFO-IO\" and _messageType[3] ~= nil then\r\n\t\t\t\tlocal _inTable = self.helper.stringSplit(_messageType[3],\",\")\r\n\t\t\t\tself.System.numberInputs(tonumber(_inTable[1]),true)\r\n\t\t\t\tself.System.numberOutputs(tonumber(_messageType[4]),true)\r\n\t\t\telseif _messageType[1] == \"ETH-PORT\" then\r\n\t\t\t\tself.System.ethPortProtocol(_messageType[2],true)\r\n\t\t\telseif _messageType[1] == \"BUILD-DATE\" and _messageType[3] ~= nil then\r\n\t\t\t\tself.System.buildDate(_messageType[2] .. \" - \" .. _messageType[3],true)\r\n\t\t\telseif _messageType[1] == \"BAUD\" then\r\n\t\t\t\tself.System.serialBaudrate(_messageType[2],true)\r\n\t\t\telseif _messageType[1] == \"SIGNAL\" then\r\n\t\t\t\tlocal _info = self.helper.stringSplit(_messageType[2],\",\")\r\n\t\t\t\tif _info[1] ~= nil and _info[2] ~= nil then\r\n\t\t\t\t\tif self.ioStatus[\"Input\" .. _info[1]] ~= nil and _info[1] ~= nil then\r\n\t\t\t\t\t\tlocal state = \"No Signal\"\r\n\t\t\t\t\t\tif _info[2] == \"1\" then state = \"Input Present\" end\r\n\t\t\t\t\t\tif self[\"_i\" .. _info[1] .. \"signalStatus\"] ~= state then\r\n\t\t\t\t\t\t\tself.ioStatus[\"Input\" .. _info[1]].signalStatus(state,true)\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\telseif _messageType[1] == \"VID\" then\r\n\t\t\t\tlocal _info = self.helper.stringSplit(_messageType[2],\">\")\r\n\t\t\t\tif _info[1] ~= nil and _info[2] ~= nil then\r\n\t\t\t\t\tif self.ioStatus[\"Output\" .. _info[2]] ~= nil then\r\n\t\t\t\t\t\tif self[\"_o\" .. _info[2] .. \"inputState\"] ~= _info[1] then\r\n\t\t\t\t\t\t\tself.ioStatus[\"Output\" .. _info[2]].input(_info[1],true)\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\telseif _messageType[1] == \"VID-PATTERN\" then\r\n\t\t\t\tlocal _info = self.helper.stringSplit(_messageType[2],\",\")\r\n\t\t\t\tif _info[1] ~= nil and _info[2] ~= nil then\r\n\t\t\t\t\tif self.ioStatus[\"Output\" .. _info[1]] ~= nil then\r\n\t\t\t\t\t\tif self[\"_o\" .. _info[1] .. \"testpattern\"] ~= _info[2] then\r\n\t\t\t\t\t\t\tself.ioStatus[\"Output\" .. _info[1]].testpattern(_info[2],true)\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\telseif _messageType[1] == \"VMUTE\" then\r\n\t\t\t\tlocal _info = self.helper.stringSplit(_messageType[2],\",\")\r\n\t\t\t\tif _info[1] ~= nil and _info[2] ~= nil then\r\n\t\t\t\t\tif self.ioStatus[\"Output\" .. _info[1]] ~= nil  then\r\n\t\t\t\t\t\tlocal state = \"true\"\r\n\t\t\t\t\t\tif _info[2] == \"1\" then\r\n\t\t\t\t\t\t\tstate = \"false\"\r\n\t\t\t\t\t\telseif _info[2] == \"2\" then\r\n\t\t\t\t\t\t\tstate = \"blank picture\"\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\tif self[\"_o\" .. _info[1] .. \"mute\"] ~= state then\r\n\t\t\t\t\t\t\tself.ioStatus[\"Output\" .. _info[1]].mute(state,true)\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\telseif _messageType[1] == \"PRST-LST\" then\r\n\t\t\t\tpixc.log(_messageType[2])\r\n\t\t\tend\r\n\t\telse\r\n\t\t\t\r\n\t\t\tlocal _type = string.sub(_messageType[1],1,3)\r\n\t\t\tlocal _code = tonumber(string.sub(_messageType[1],4,7))\r\n\t\t\tlocal errorMessages = {\r\n\t\t\t\t\t\"Protocol syntax\",\r\n\t\t\t\t\t\"Command not available\",\r\n\t\t\t\t\t\"Parameter out of range\",\r\n\t\t\t\t\t\"Unauthorized access\",\r\n\t\t\t\t\t\"Internal FW error\",\r\n\t\t\t\t\t\"Protocol busy\",\r\n\t\t\t\t\t\"Wrong CRC\",\r\n\t\t\t\t\t\"Timeout\",\r\n\t\t\t\t\t\"(Reserved)\",\r\n\t\t\t\t\t\"Not enough space for data (firmware, FPGA…)\",\r\n\t\t\t\t\t\"Not enough space – file system\",\r\n\t\t\t\t\t\"File does not exist\",\r\n\t\t\t\t\t\"File can’t be created\",\r\n\t\t\t\t\t\"File can’t open\",\r\n\t\t\t\t\t\"Feature is not supported\",\r\n\t\t\t\t\t\"(Reserved)\",\r\n\t\t\t\t\t\"(Reserved)\",\r\n\t\t\t\t\t\"(Reserved)\",\r\n\t\t\t\t\t\"(Reserved)\",\r\n\t\t\t\t\t\"(Reserved)\",\r\n\t\t\t\t\t\"Packet CRC error\",\r\n\t\t\t\t\t\"Packet number isn't expected (missing packet)\",\r\n\t\t\t\t\t\"Packet size is wrong\",\r\n\t\t\t\t\t\"(Reserved)\",\r\n\t\t\t\t\t\"(Reserved)\",\r\n\t\t\t\t\t\"(Reserved)\",\r\n\t\t\t\t\t\"(Reserved)\",\r\n\t\t\t\t\t\"(Reserved)\",\r\n\t\t\t\t\t\"(Reserved)\",\r\n\t\t\t\t\t\"EDID corrupted\",\r\n\t\t\t\t\t\"Device specific errors\",\r\n\t\t\t\t\t\"File has the same CRC – not changed\",\r\n\t\t\t\t\t\"Wrong operation mode\",\r\n\t\t\t\t\t\"Device/chip was not initialized\"\r\n\t\t\t\t}\r\n\t\t\tif _type == \"ERR\" then --error handler\r\n\t\t\t\tlocal _type = string.sub(_messageType[1],1,3)\r\n\t\t\t\tlocal _code = tonumber(string.sub(_messageType[1],4,7))\r\n\t\t\t\tif _code > 0 and errorMessages[_code] ~= nil then\r\n\t\t\t\t\tpixc.warning(self() .. \" \" .. errorMessages[_code])\r\n\t\t\t\tend\r\n\t\t\telse\r\n\t\t\t\tlocal _type = string.sub(_messageType[2],1,3)\r\n\t\t\t\tlocal _code = tonumber(string.sub(_messageType[2],4,7))\r\n\t\t\t\tif _code > 0 and errorMessages[_code] ~= nil then\r\n\t\t\t\t\tpixc.error(self() .. \" received error on msg command. \", _messageType[1],errorMessages[_code] )\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\nend",
   "functionName": "receive(string msg)",
   "kind": "fn",
   "name": "receive",
   "params": [
    {
     "name": "msg",
     "type": "string"
    }
   ],
   "path": "VS_88H2.receive",
   "signiture": "receive(string msg)",
   "slotStyle": "leftIn;rightOut;triggerHidden"
  },
  {
   "attKind": "internal",
   "body": "self.connected = pixcCommon.execAttribute(false, self.connected, isConnected, doSet)\nif isConnected == true or isConnected == \"true\" then\n\nend",
   "functionName": "IsConnected(bool isConnected,bool doSet)",
   "kind": "fn",
   "name": "IsConnected",
   "params": [
    {
     "name": "isConnected",
     "type": "bool"
    },
    {
     "name": "doSet",
     "type": "bool"
    }
   ],
   "path": "VS_88H2.IsConnected",
   "signiture": "IsConnected(bool isConnected,bool doSet)",
   "slotStyle": "leftNone;rightNone;triggerHidden"
  },
  {
   "elems": [
    {
     "body": "if input == nil or output == nil then\r\n\tpixc.error(self() .. \" Input or Output was nil.\", input, output)\r\n\treturn\r\nend\r\nlocal i = math.floor(math.abs(tonumber(input)))\r\nlocal o = math.floor(math.abs(tonumber(output)))\r\nself.send(\"#VID \" .. o .. \">\" .. i .. \"\\r\")",
     "functionName": "InToOut(int input,int output)",
     "kind": "fn",
     "name": "InToOut",
     "params": [
      {
       "name": "input",
       "type": "int"
      },
      {
       "name": "output",
       "type": "int"
      }
     ],
     "path": "VS_88H2.ioControl.InToOut",
     "signiture": "InToOut(int input,int output)",
     "slotStyle": "leftIn;rightNone"
    },
    {
     "body": "if testpattern == nil or output == nil then\r\n\tpixc.error(self() .. \" Input or Output was nil.\", testpattern, output)\r\n\treturn\r\nend\r\nlocal i = math.floor(math.abs(tonumber(testpattern)))\r\nlocal o = math.floor(math.abs(tonumber(output)))\r\nself.send(\"#VID-PATTERN \" .. o .. \">\" .. i .. \"\\r\")",
     "functionName": "TestpatternToOut(int testpattern,int output)",
     "kind": "fn",
     "name": "TestpatternToOut",
     "params": [
      {
       "name": "testpattern",
       "type": "int"
      },
      {
       "name": "output",
       "type": "int"
      }
     ],
     "path": "VS_88H2.ioControl.TestpatternToOut",
     "signiture": "TestpatternToOut(int testpattern,int output)",
     "slotStyle": "leftIn;rightNone"
    },
    {
     "body": "if flag == nil or output == nil then\r\n\tpixc.error(self() .. \" Input or Output was nil.\", flag, output)\r\n\treturn\r\nend\r\nlocal f = math.floor(math.abs(tonumber(flag)))\r\nlocal o = math.floor(math.abs(tonumber(output)))\r\nself.send(\"#VMUTE \" .. o .. \">\" .. f .. \"\\r\")",
     "documentation": "flag:\n0 = Video enabled\n1 = Video disabled\r2 = Blank picture",
     "functionName": "MuteOut(int flag,int output)",
     "kind": "fn",
     "name": "MuteOut",
     "params": [
      {
       "name": "flag",
       "type": "int"
      },
      {
       "name": "output",
       "type": "int"
      }
     ],
     "path": "VS_88H2.ioControl.MuteOut",
     "signiture": "MuteOut(int flag,int output)",
     "slotStyle": "leftIn;rightNone"
    }
   ],
   "kind": "ns",
   "name": "ioControl"
  },
  {
   "elems": [
    {
     "attKind": "internal",
     "body": "self._name = pixcCommon.execAttribute(0, self._name, val, doSet)\r\n\r\nreturn self._name",
     "functionName": "name(val,bool doSet)",
     "kind": "fn",
     "name": "name",
     "params": [
      {
       "name": "val",
       "type": ""
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "path": "VS_88H2.System.name",
     "signiture": "name(val,bool doSet)"
    },
    {
     "attKind": "internal",
     "body": "self._model = pixcCommon.execAttribute(0, self._model, val, doSet)\r\n\r\nreturn self._model",
     "functionName": "model(val,bool doSet)",
     "kind": "fn",
     "name": "model",
     "params": [
      {
       "name": "val",
       "type": ""
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "path": "VS_88H2.System.model",
     "signiture": "model(val,bool doSet)"
    },
    {
     "attKind": "internal",
     "body": "self._version = pixcCommon.execAttribute(0, self._version, val, doSet)\r\n\r\nreturn self._version",
     "functionName": "version(val,bool doSet)",
     "kind": "fn",
     "name": "version",
     "params": [
      {
       "name": "val",
       "type": ""
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "path": "VS_88H2.System.version",
     "signiture": "version(val,bool doSet)"
    },
    {
     "attKind": "internal",
     "body": "self._serialNumber = pixcCommon.execAttribute(0, self._serialNumber, val, doSet)\r\n\r\nreturn self._serialNumber",
     "functionName": "serialNumber(val,bool doSet)",
     "kind": "fn",
     "name": "serialNumber",
     "params": [
      {
       "name": "val",
       "type": ""
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "path": "VS_88H2.System.serialNumber",
     "signiture": "serialNumber(val,bool doSet)"
    },
    {
     "attKind": "internal",
     "body": "self._ipAddress = pixcCommon.execAttribute(0, self._ipAddress, val, doSet)\r\n\r\nreturn self._ipAddress",
     "functionName": "ipAddress(val,bool doSet)",
     "kind": "fn",
     "name": "ipAddress",
     "params": [
      {
       "name": "val",
       "type": ""
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "path": "VS_88H2.System.ipAddress",
     "signiture": "ipAddress(val,bool doSet)"
    },
    {
     "attKind": "internal",
     "body": "self._subnet = pixcCommon.execAttribute(0, self._subnet, val, doSet)\r\n\r\nreturn self._subnet",
     "functionName": "subnet(val,bool doSet)",
     "kind": "fn",
     "name": "subnet",
     "params": [
      {
       "name": "val",
       "type": ""
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "path": "VS_88H2.System.subnet",
     "signiture": "subnet(val,bool doSet)"
    },
    {
     "attKind": "internal",
     "body": "self._gateway = pixcCommon.execAttribute(0, self._gateway, val, doSet)\r\n\r\nreturn self._gateway",
     "functionName": "gateway(val,bool doSet)",
     "kind": "fn",
     "name": "gateway",
     "params": [
      {
       "name": "val",
       "type": ""
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "path": "VS_88H2.System.gateway",
     "signiture": "gateway(val,bool doSet)"
    },
    {
     "attKind": "internal",
     "body": "self._macAddress = pixcCommon.execAttribute(0, self._macAddress, val, doSet)\r\n\r\nreturn self._macAddress",
     "functionName": "macAddress(val,bool doSet)",
     "kind": "fn",
     "name": "macAddress",
     "params": [
      {
       "name": "val",
       "type": ""
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "path": "VS_88H2.System.macAddress",
     "signiture": "macAddress(val,bool doSet)"
    },
    {
     "attKind": "internal",
     "body": "self._dhcp = pixcCommon.execAttribute(0, self._dhcp, val, doSet)\r\n\r\nreturn self._dhcp",
     "functionName": "dhcp(val,bool doSet)",
     "kind": "fn",
     "name": "dhcp",
     "params": [
      {
       "name": "val",
       "type": ""
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "path": "VS_88H2.System.dhcp",
     "signiture": "dhcp(val,bool doSet)"
    },
    {
     "attKind": "internal",
     "body": "self._numberInputs = pixcCommon.execAttribute(0, self._numberInputs, val, doSet)\r\n\r\nreturn self._numberInputs",
     "functionName": "numberInputs(val,bool doSet)",
     "kind": "fn",
     "name": "numberInputs",
     "params": [
      {
       "name": "val",
       "type": ""
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "path": "VS_88H2.System.numberInputs",
     "signiture": "numberInputs(val,bool doSet)"
    },
    {
     "attKind": "internal",
     "body": "self._numberOutputs = pixcCommon.execAttribute(0, self._numberOutputs, val, doSet)\r\n\r\nreturn self._numberOutputs",
     "functionName": "numberOutputs(val,bool doSet)",
     "kind": "fn",
     "name": "numberOutputs",
     "params": [
      {
       "name": "val",
       "type": ""
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "path": "VS_88H2.System.numberOutputs",
     "signiture": "numberOutputs(val,bool doSet)"
    },
    {
     "attKind": "internal",
     "body": "self._protocolVersion = pixcCommon.execAttribute(0, self._protocolVersion, val, doSet)\r\n\r\nreturn self._protocolVersion",
     "functionName": "protocolVersion(val,bool doSet)",
     "kind": "fn",
     "name": "protocolVersion",
     "params": [
      {
       "name": "val",
       "type": ""
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "path": "VS_88H2.System.protocolVersion",
     "signiture": "protocolVersion(val,bool doSet)"
    },
    {
     "attKind": "internal",
     "body": "self._serialBaudrate = pixcCommon.execAttribute(0, self._serialBaudrate, val, doSet)\r\n\r\nreturn self._serialBaudrate",
     "functionName": "serialBaudrate(val,bool doSet)",
     "kind": "fn",
     "name": "serialBaudrate",
     "params": [
      {
       "name": "val",
       "type": ""
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "path": "VS_88H2.System.serialBaudrate",
     "signiture": "serialBaudrate(val,bool doSet)"
    },
    {
     "attKind": "internal",
     "body": "self._buildDate = pixcCommon.execAttribute(0, self._buildDate, val, doSet)\r\n\r\nreturn self._buildDate",
     "functionName": "buildDate(val,bool doSet)",
     "kind": "fn",
     "name": "buildDate",
     "params": [
      {
       "name": "val",
       "type": ""
      },
      {
       "name": "doSet",
       "type": "bool"
      }
     ],
     "path": "VS_88H2.System.buildDate",
     "signiture": "buildDate(val,bool doSet)"
    },
    {
     "body": "self.send(\"#RESET\\r\")",
     "functionName": "resetDevice()",
     "kind": "fn",
     "name": "resetDevice",
     "path": "VS_88H2.System.resetDevice",
     "signiture": "resetDevice()"
    }
   ],
   "kind": "ns",
   "name": "System"
  },
  {
   "elems": [
    {
     "elems": [
      {
       "attKind": "internal",
       "body": "self._i1signalStatus = pixcCommon.execAttribute(0, self._i1signalStatus, val, doSet)\r\n\r\nreturn self._i1signalStatus",
       "functionName": "signalStatus(val,bool doSet)",
       "kind": "fn",
       "name": "signalStatus",
       "params": [
        {
         "name": "val",
         "type": ""
        },
        {
         "name": "doSet",
         "type": "bool"
        }
       ],
       "path": "VS_88H2.ioStatus.Input1.signalStatus",
       "signiture": "signalStatus(val,bool doSet)",
       "slotStyle": "leftNone;rightOut;triggerHidden"
      }
     ],
     "kind": "ns",
     "name": "Input1"
    },
    {
     "elems": [
      {
       "attKind": "internal",
       "body": "self._i2signalStatus = pixcCommon.execAttribute(0, self._i2signalStatus, val, doSet)\r\n\r\nreturn self._i2signalStatus",
       "functionName": "signalStatus(val,bool doSet)",
       "kind": "fn",
       "name": "signalStatus",
       "params": [
        {
         "name": "val",
         "type": ""
        },
        {
         "name": "doSet",
         "type": "bool"
        }
       ],
       "path": "VS_88H2.ioStatus.Input2.signalStatus",
       "signiture": "signalStatus(val,bool doSet)",
       "slotStyle": "leftNone;rightOut;triggerHidden"
      }
     ],
     "kind": "ns",
     "name": "Input2"
    },
    {
     "elems": [
      {
       "attKind": "internal",
       "body": "self._i3signalStatus = pixcCommon.execAttribute(0, self._i3signalStatus, val, doSet)\r\n\r\nreturn self._i3signalStatus",
       "functionName": "signalStatus(val,bool doSet)",
       "kind": "fn",
       "name": "signalStatus",
       "params": [
        {
         "name": "val",
         "type": ""
        },
        {
         "name": "doSet",
         "type": "bool"
        }
       ],
       "path": "VS_88H2.ioStatus.Input3.signalStatus",
       "signiture": "signalStatus(val,bool doSet)",
       "slotStyle": "leftNone;rightOut;triggerHidden"
      }
     ],
     "kind": "ns",
     "name": "Input3"
    },
    {
     "elems": [
      {
       "attKind": "internal",
       "body": "self._i4signalStatus = pixcCommon.execAttribute(0, self._i4signalStatus, val, doSet)\r\n\r\nreturn self._i4signalStatus",
       "functionName": "signalStatus(val,bool doSet)",
       "kind": "fn",
       "name": "signalStatus",
       "params": [
        {
         "name": "val",
         "type": ""
        },
        {
         "name": "doSet",
         "type": "bool"
        }
       ],
       "path": "VS_88H2.ioStatus.Input4.signalStatus",
       "signiture": "signalStatus(val,bool doSet)",
       "slotStyle": "leftNone;rightOut;triggerHidden"
      }
     ],
     "kind": "ns",
     "name": "Input4"
    },
    {
     "elems": [
      {
       "attKind": "internal",
       "body": "self._i5signalStatus = pixcCommon.execAttribute(0, self._i5signalStatus, val, doSet)\r\n\r\nreturn self._i5signalStatus",
       "functionName": "signalStatus(val,bool doSet)",
       "kind": "fn",
       "name": "signalStatus",
       "params": [
        {
         "name": "val",
         "type": ""
        },
        {
         "name": "doSet",
         "type": "bool"
        }
       ],
       "path": "VS_88H2.ioStatus.Input5.signalStatus",
       "signiture": "signalStatus(val,bool doSet)",
       "slotStyle": "leftNone;rightOut"
      }
     ],
     "kind": "ns",
     "name": "Input5"
    },
    {
     "elems": [
      {
       "attKind": "internal",
       "body": "self._i6signalStatus = pixcCommon.execAttribute(0, self._i6signalStatus, val, doSet)\r\n\r\nreturn self._i6signalStatus",
       "functionName": "signalStatus(val,bool doSet)",
       "kind": "fn",
       "name": "signalStatus",
       "params": [
        {
         "name": "val",
         "type": ""
        },
        {
         "name": "doSet",
         "type": "bool"
        }
       ],
       "path": "VS_88H2.ioStatus.Input6.signalStatus",
       "signiture": "signalStatus(val,bool doSet)",
       "slotStyle": "leftNone;rightOut"
      }
     ],
     "kind": "ns",
     "name": "Input6"
    },
    {
     "elems": [
      {
       "attKind": "internal",
       "body": "self._i7signalStatus = pixcCommon.execAttribute(0, self._i7signalStatus, val, doSet)\r\n\r\nreturn self._i7signalStatus",
       "functionName": "signalStatus(val,bool doSet)",
       "kind": "fn",
       "name": "signalStatus",
       "params": [
        {
         "name": "val",
         "type": ""
        },
        {
         "name": "doSet",
         "type": "bool"
        }
       ],
       "path": "VS_88H2.ioStatus.Input7.signalStatus",
       "signiture": "signalStatus(val,bool doSet)",
       "slotStyle": "leftNone;rightOut"
      }
     ],
     "kind": "ns",
     "name": "Input7"
    },
    {
     "elems": [
      {
       "attKind": "internal",
       "body": "self._i8signalStatus = pixcCommon.execAttribute(0, self._i8signalStatus, val, doSet)\r\n\r\nreturn self._i8signalStatus",
       "functionName": "signalStatus(val,bool doSet)",
       "kind": "fn",
       "name": "signalStatus",
       "params": [
        {
         "name": "val",
         "type": ""
        },
        {
         "name": "doSet",
         "type": "bool"
        }
       ],
       "path": "VS_88H2.ioStatus.Input8.signalStatus",
       "signiture": "signalStatus(val,bool doSet)",
       "slotStyle": "leftNone;rightOut;triggerHidden"
      }
     ],
     "kind": "ns",
     "name": "Input8"
    },
    {
     "elems": [
      {
       "attKind": "internal",
       "body": "self._o1inputState = pixcCommon.execAttribute(0, self._o1inputState, val, doSet)\r\n\r\nreturn self._o1inputState",
       "functionName": "input(val,bool doSet)",
       "kind": "fn",
       "name": "input",
       "params": [
        {
         "name": "val",
         "type": ""
        },
        {
         "name": "doSet",
         "type": "bool"
        }
       ],
       "path": "VS_88H2.ioStatus.Output1.input",
       "signiture": "input(val,bool doSet)",
       "slotStyle": "leftNone;rightOut;triggerHidden"
      },
      {
       "attKind": "internal",
       "body": "self._o1testpattern = pixcCommon.execAttribute(0, self._o1testpattern, val, doSet)\r\n\r\nreturn self._o1testpattern",
       "functionName": "testpattern(val,bool doSet)",
       "kind": "fn",
       "name": "testpattern",
       "params": [
        {
         "name": "val",
         "type": ""
        },
        {
         "name": "doSet",
         "type": "bool"
        }
       ],
       "path": "VS_88H2.ioStatus.Output1.testpattern",
       "signiture": "testpattern(val,bool doSet)",
       "slotStyle": "leftNone;rightOut;triggerHidden"
      },
      {
       "attKind": "internal",
       "body": "self._o1mute = pixcCommon.execAttribute(0, self._o1mute, val, doSet)\r\n\r\nreturn self._o1mute",
       "functionName": "mute(val,bool doSet)",
       "kind": "fn",
       "name": "mute",
       "params": [
        {
         "name": "val",
         "type": ""
        },
        {
         "name": "doSet",
         "type": "bool"
        }
       ],
       "path": "VS_88H2.ioStatus.Output1.mute",
       "signiture": "mute(val,bool doSet)",
       "slotStyle": "leftNone;rightOut;triggerHidden"
      }
     ],
     "kind": "ns",
     "name": "Output1"
    },
    {
     "elems": [
      {
       "attKind": "internal",
       "body": "self._o2inputState = pixcCommon.execAttribute(0, self._o2inputState, val, doSet)\r\n\r\nreturn self._o2inputState",
       "functionName": "input(val,bool doSet)",
       "kind": "fn",
       "name": "input",
       "params": [
        {
         "name": "val",
         "type": ""
        },
        {
         "name": "doSet",
         "type": "bool"
        }
       ],
       "path": "VS_88H2.ioStatus.Output2.input",
       "signiture": "input(val,bool doSet)",
       "slotStyle": "leftNone;rightOut;triggerHidden"
      },
      {
       "attKind": "internal",
       "body": "self._o2testpattern = pixcCommon.execAttribute(0, self._o2testpattern, val, doSet)\r\n\r\nreturn self._o2testpattern",
       "functionName": "testpattern(val,bool doSet)",
       "kind": "fn",
       "name": "testpattern",
       "params": [
        {
         "name": "val",
         "type": ""
        },
        {
         "name": "doSet",
         "type": "bool"
        }
       ],
       "path": "VS_88H2.ioStatus.Output2.testpattern",
       "signiture": "testpattern(val,bool doSet)",
       "slotStyle": "leftNone;rightOut;triggerHidden"
      },
      {
       "attKind": "internal",
       "body": "self._o2mute = pixcCommon.execAttribute(0, self._o2mute, val, doSet)\r\n\r\nreturn self._o2mute",
       "functionName": "mute(val,bool doSet)",
       "kind": "fn",
       "name": "mute",
       "params": [
        {
         "name": "val",
         "type": ""
        },
        {
         "name": "doSet",
         "type": "bool"
        }
       ],
       "path": "VS_88H2.ioStatus.Output2.mute",
       "signiture": "mute(val,bool doSet)",
       "slotStyle": "leftNone;rightOut;triggerHidden"
      }
     ],
     "kind": "ns",
     "name": "Output2"
    },
    {
     "elems": [
      {
       "attKind": "internal",
       "body": "self._o3inputState = pixcCommon.execAttribute(0, self._o3inputState, val, doSet)\r\n\r\nreturn self._o3inputState",
       "functionName": "input(val,bool doSet)",
       "kind": "fn",
       "name": "input",
       "params": [
        {
         "name": "val",
         "type": ""
        },
        {
         "name": "doSet",
         "type": "bool"
        }
       ],
       "path": "VS_88H2.ioStatus.Output3.input",
       "signiture": "input(val,bool doSet)",
       "slotStyle": "leftNone;rightOut;triggerHidden"
      },
      {
       "attKind": "internal",
       "body": "self._o3testpattern = pixcCommon.execAttribute(0, self._o3testpattern, val, doSet)\r\n\r\nreturn self._o3testpattern",
       "functionName": "testpattern(val,bool doSet)",
       "kind": "fn",
       "name": "testpattern",
       "params": [
        {
         "name": "val",
         "type": ""
        },
        {
         "name": "doSet",
         "type": "bool"
        }
       ],
       "path": "VS_88H2.ioStatus.Output3.testpattern",
       "signiture": "testpattern(val,bool doSet)",
       "slotStyle": "leftNone;rightOut;triggerHidden"
      },
      {
       "attKind": "internal",
       "body": "self._o3mute = pixcCommon.execAttribute(0, self._o3mute, val, doSet)\r\n\r\nreturn self._o3mute",
       "functionName": "mute(val,bool doSet)",
       "kind": "fn",
       "name": "mute",
       "params": [
        {
         "name": "val",
         "type": ""
        },
        {
         "name": "doSet",
         "type": "bool"
        }
       ],
       "path": "VS_88H2.ioStatus.Output3.mute",
       "signiture": "mute(val,bool doSet)",
       "slotStyle": "leftNone;rightOut;triggerHidden"
      }
     ],
     "kind": "ns",
     "name": "Output3"
    },
    {
     "elems": [
      {
       "attKind": "internal",
       "body": "self._o4inputState = pixcCommon.execAttribute(0, self._o4inputState, val, doSet)\r\n\r\nreturn self._o4inputState",
       "functionName": "input(val,bool doSet)",
       "kind": "fn",
       "name": "input",
       "params": [
        {
         "name": "val",
         "type": ""
        },
        {
         "name": "doSet",
         "type": "bool"
        }
       ],
       "path": "VS_88H2.ioStatus.Output4.input",
       "signiture": "input(val,bool doSet)",
       "slotStyle": "leftNone;rightOut;triggerHidden"
      },
      {
       "attKind": "internal",
       "body": "self._o4testpattern = pixcCommon.execAttribute(0, self._o4testpattern, val, doSet)\r\n\r\nreturn self._o4testpattern",
       "functionName": "testpattern(val,bool doSet)",
       "kind": "fn",
       "name": "testpattern",
       "params": [
        {
         "name": "val",
         "type": ""
        },
        {
         "name": "doSet",
         "type": "bool"
        }
       ],
       "path": "VS_88H2.ioStatus.Output4.testpattern",
       "signiture": "testpattern(val,bool doSet)",
       "slotStyle": "leftNone;rightOut;triggerHidden"
      },
      {
       "attKind": "internal",
       "body": "self._o4mute = pixcCommon.execAttribute(0, self._o4mute, val, doSet)\r\n\r\nreturn self._o4mute",
       "functionName": "mute(val,bool doSet)",
       "kind": "fn",
       "name": "mute",
       "params": [
        {
         "name": "val",
         "type": ""
        },
        {
         "name": "doSet",
         "type": "bool"
        }
       ],
       "path": "VS_88H2.ioStatus.Output4.mute",
       "signiture": "mute(val,bool doSet)",
       "slotStyle": "leftNone;rightOut;triggerHidden"
      }
     ],
     "kind": "ns",
     "name": "Output4"
    },
    {
     "elems": [
      {
       "attKind": "internal",
       "body": "self._o5inputState = pixcCommon.execAttribute(0, self._o5inputState, val, doSet)\r\n\r\nreturn self._o5inputState",
       "functionName": "input(val,bool doSet)",
       "kind": "fn",
       "name": "input",
       "params": [
        {
         "name": "val",
         "type": ""
        },
        {
         "name": "doSet",
         "type": "bool"
        }
       ],
       "path": "VS_88H2.ioStatus.Output5.input",
       "signiture": "input(val,bool doSet)",
       "slotStyle": "leftNone;rightOut;triggerHidden"
      },
      {
       "attKind": "internal",
       "body": "self._o5testpattern = pixcCommon.execAttribute(0, self._o5testpattern, val, doSet)\r\n\r\nreturn self._o5testpattern",
       "functionName": "testpattern(val,bool doSet)",
       "kind": "fn",
       "name": "testpattern",
       "params": [
        {
         "name": "val",
         "type": ""
        },
        {
         "name": "doSet",
         "type": "bool"
        }
       ],
       "path": "VS_88H2.ioStatus.Output5.testpattern",
       "signiture": "testpattern(val,bool doSet)",
       "slotStyle": "leftNone;rightOut;triggerHidden"
      },
      {
       "attKind": "internal",
       "body": "self._o5mute = pixcCommon.execAttribute(0, self._o5mute, val, doSet)\r\n\r\nreturn self._o5mute",
       "functionName": "mute(val,bool doSet)",
       "kind": "fn",
       "name": "mute",
       "params": [
        {
         "name": "val",
         "type": ""
        },
        {
         "name": "doSet",
         "type": "bool"
        }
       ],
       "path": "VS_88H2.ioStatus.Output5.mute",
       "signiture": "mute(val,bool doSet)",
       "slotStyle": "leftNone;rightOut;triggerHidden"
      }
     ],
     "kind": "ns",
     "name": "Output5"
    },
    {
     "elems": [
      {
       "attKind": "internal",
       "body": "self._o6inputState = pixcCommon.execAttribute(0, self._o6inputState, val, doSet)\r\n\r\nreturn self._o6inputState",
       "functionName": "input(val,bool doSet)",
       "kind": "fn",
       "name": "input",
       "params": [
        {
         "name": "val",
         "type": ""
        },
        {
         "name": "doSet",
         "type": "bool"
        }
       ],
       "path": "VS_88H2.ioStatus.Output6.input",
       "signiture": "input(val,bool doSet)",
       "slotStyle": "leftNone;rightOut;triggerHidden"
      },
      {
       "attKind": "internal",
       "body": "self._o6testpattern = pixcCommon.execAttribute(0, self._o6testpattern, val, doSet)\r\n\r\nreturn self._o6testpattern",
       "functionName": "testpattern(val,bool doSet)",
       "kind": "fn",
       "name": "testpattern",
       "params": [
        {
         "name": "val",
         "type": ""
        },
        {
         "name": "doSet",
         "type": "bool"
        }
       ],
       "path": "VS_88H2.ioStatus.Output6.testpattern",
       "signiture": "testpattern(val,bool doSet)",
       "slotStyle": "leftNone;rightOut;triggerHidden"
      },
      {
       "attKind": "internal",
       "body": "self._o6mute = pixcCommon.execAttribute(0, self._o6mute, val, doSet)\r\n\r\nreturn self._o6mute",
       "functionName": "mute(val,bool doSet)",
       "kind": "fn",
       "name": "mute",
       "params": [
        {
         "name": "val",
         "type": ""
        },
        {
         "name": "doSet",
         "type": "bool"
        }
       ],
       "path": "VS_88H2.ioStatus.Output6.mute",
       "signiture": "mute(val,bool doSet)",
       "slotStyle": "leftNone;rightOut;triggerHidden"
      }
     ],
     "kind": "ns",
     "name": "Output6"
    },
    {
     "elems": [
      {
       "attKind": "internal",
       "body": "self._o7inputState = pixcCommon.execAttribute(0, self._o7inputState, val, doSet)\r\n\r\nreturn self._o7inputState",
       "functionName": "input(val,bool doSet)",
       "kind": "fn",
       "name": "input",
       "params": [
        {
         "name": "val",
         "type": ""
        },
        {
         "name": "doSet",
         "type": "bool"
        }
       ],
       "path": "VS_88H2.ioStatus.Output7.input",
       "signiture": "input(val,bool doSet)",
       "slotStyle": "leftNone;rightOut;triggerHidden"
      },
      {
       "attKind": "internal",
       "body": "self._o7testpattern = pixcCommon.execAttribute(0, self._o7testpattern, val, doSet)\r\n\r\nreturn self._o7testpattern",
       "functionName": "testpattern(val,bool doSet)",
       "kind": "fn",
       "name": "testpattern",
       "params": [
        {
         "name": "val",
         "type": ""
        },
        {
         "name": "doSet",
         "type": "bool"
        }
       ],
       "path": "VS_88H2.ioStatus.Output7.testpattern",
       "signiture": "testpattern(val,bool doSet)",
       "slotStyle": "leftNone;rightOut;triggerHidden"
      },
      {
       "attKind": "internal",
       "body": "self._o7mute = pixcCommon.execAttribute(0, self._o7mute, val, doSet)\r\n\r\nreturn self._o7mute",
       "functionName": "mute(val,bool doSet)",
       "kind": "fn",
       "name": "mute",
       "params": [
        {
         "name": "val",
         "type": ""
        },
        {
         "name": "doSet",
         "type": "bool"
        }
       ],
       "path": "VS_88H2.ioStatus.Output7.mute",
       "signiture": "mute(val,bool doSet)",
       "slotStyle": "leftNone;rightOut;triggerHidden"
      }
     ],
     "kind": "ns",
     "name": "Output7"
    },
    {
     "elems": [
      {
       "attKind": "internal",
       "body": "self._o8inputState = pixcCommon.execAttribute(0, self._o8inputState, val, doSet)\r\n\r\nreturn self._o8inputState",
       "functionName": "input(val,bool doSet)",
       "kind": "fn",
       "name": "input",
       "params": [
        {
         "name": "val",
         "type": ""
        },
        {
         "name": "doSet",
         "type": "bool"
        }
       ],
       "path": "VS_88H2.ioStatus.Output8.input",
       "signiture": "input(val,bool doSet)",
       "slotStyle": "leftNone;rightOut;triggerHidden"
      },
      {
       "attKind": "internal",
       "body": "self._o8testpattern = pixcCommon.execAttribute(0, self._o8testpattern, val, doSet)\r\n\r\nreturn self._o8testpattern",
       "functionName": "testpattern(val,bool doSet)",
       "kind": "fn",
       "name": "testpattern",
       "params": [
        {
         "name": "val",
         "type": ""
        },
        {
         "name": "doSet",
         "type": "bool"
        }
       ],
       "path": "VS_88H2.ioStatus.Output8.testpattern",
       "signiture": "testpattern(val,bool doSet)",
       "slotStyle": "leftNone;rightOut;triggerHidden"
      },
      {
       "attKind": "internal",
       "body": "self._o8mute = pixcCommon.execAttribute(0, self._o8mute, val, doSet)\r\n\r\nreturn self._o8mute",
       "functionName": "mute(val,bool doSet)",
       "kind": "fn",
       "name": "mute",
       "params": [
        {
         "name": "val",
         "type": ""
        },
        {
         "name": "doSet",
         "type": "bool"
        }
       ],
       "path": "VS_88H2.ioStatus.Output8.mute",
       "signiture": "mute(val,bool doSet)",
       "slotStyle": "leftNone;rightOut;triggerHidden"
      }
     ],
     "kind": "ns",
     "name": "Output8"
    }
   ],
   "kind": "ns",
   "name": "ioStatus"
  },
  {
   "elems": [
    {
     "body": "if id == nil then\r\n\tpixc.error(self() .. \" Input or Output was nil.\", id)\r\n\treturn\r\nend\r\nlocal i = math.floor(math.abs(tonumber(id)))\r\nself.send(\"#PRST-RCL \" .. i .. \"\\r\")",
     "functionName": "recallPreset(int id)",
     "kind": "fn",
     "name": "recallPreset",
     "params": [
      {
       "name": "id",
       "type": "int"
      }
     ],
     "path": "VS_88H2.Presets.recallPreset",
     "signiture": "recallPreset(int id)"
    },
    {
     "body": "if id == nil then\r\n\tpixc.error(self() .. \" Input or Output was nil.\", id)\r\n\treturn\r\nend\r\nlocal i = math.floor(math.abs(tonumber(id)))\r\nself.send(\"#PRST-STO \" .. i .. \"\\r\")",
     "functionName": "storePreset(int id)",
     "kind": "fn",
     "name": "storePreset",
     "params": [
      {
       "name": "id",
       "type": "int"
      }
     ],
     "path": "VS_88H2.Presets.storePreset",
     "signiture": "storePreset(int id)"
    },
    {
     "body": "self.send(\"#PRST-LST? \\r\")",
     "functionName": "logPresetNumbers()",
     "kind": "fn",
     "name": "logPresetNumbers",
     "path": "VS_88H2.Presets.logPresetNumbers",
     "signiture": "logPresetNumbers()"
    }
   ],
   "kind": "ns",
   "name": "Presets"
  }
 ],
 "canHaveExternalConnections": true,
 "cjv": {
  "h": 965.0,
  "w": 425.0,
  "x": 290.00000000000006,
  "y": 102.22222222222223
 },
 "definedExternally": false,
 "hostInfo": {
  "systemType": ""
 },
 "libraryExportPath": "C:/Program Files/AV Stumpfl/Pixera/build_2-0-0/data/control_library_standard/Drivers/Kramer/VS_88H2.json",
 "license": "1GNTlyr7sewU1l3S6nhV4sLFq1P2HzBVqhGQDxE+M0uuXf1itYcM01LjPR6umlBzrEClhJWojfZR1gmEVtvwGobFDLsXtpA9in1I9gi9JmqZKrz4tbS92Jt0M/r/SZIZRAARUX4gsW0kUVhHPiVAcw==",
 "name": "VS_88H2",
 "properties": [
  {
   "cont": "true",
   "name": "Auto Init",
   "typeHint": "bool"
  },
  {
   "cont": "127.0.0.1",
   "name": "IP",
   "typeHint": "string"
  },
  {
   "cont": "6451",
   "name": "Port",
   "typeHint": "number"
  },
  {
   "cont": "Any",
   "name": "Adapter IP",
   "optionsSourceFunc": "Utils.Network.getLocalAdapterEntries",
   "typeHint": "string"
  },
  {
   "cont": "Kramer Swicther Protocol 3000",
   "name": "Description",
   "readOnly": true,
   "typeHint": "string"
  },
  {
   "cont": "AV Stumpfl GmbH",
   "name": "Author",
   "readOnly": true,
   "typeHint": "string"
  },
  {
   "cont": "",
   "imageBase64": "",
   "name": "Logo",
   "typeHint": "image"
  },
  {
   "cont": "1.2",
   "name": "Version",
   "readOnly": true,
   "typeHint": "number"
  }
 ],
 "separateCode": false,
 "uiUrl": ""
}