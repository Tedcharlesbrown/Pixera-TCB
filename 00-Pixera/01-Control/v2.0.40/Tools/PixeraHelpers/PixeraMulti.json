{
 "api": [
  {
   "body": "return pixc.callRefs()",
   "functionName": "toPixeraModules()",
   "kind": "fn",
   "name": "toPixeraModules",
   "path": "PixeraMulti.toPixeraModules",
   "signiture": "toPixeraModules()"
  },
  {
   "body": "self.PixeraInstances = self.toPixeraModules()\r\n",
   "functionName": "init()",
   "kind": "fn",
   "name": "init",
   "path": "PixeraMulti.init",
   "signiture": "init()"
  },
  {
   "elems": [
    {
     "elems": [
      {
       "body": "self.Timeline.play()",
       "functionName": "play()",
       "kind": "fn",
       "name": "play",
       "path": "PixeraMulti.Timeline.Selected.play",
       "signiture": "play()"
      },
      {
       "body": "self.Timeline.pause()",
       "functionName": "pause()",
       "kind": "fn",
       "name": "pause",
       "path": "PixeraMulti.Timeline.Selected.pause",
       "signiture": "pause()"
      },
      {
       "body": "self.Timeline.stop()",
       "functionName": "stop()",
       "kind": "fn",
       "name": "stop",
       "path": "PixeraMulti.Timeline.Selected.stop",
       "signiture": "stop()"
      },
      {
       "body": "self.Timeline.fadeInTimeline(nil,fadeDuration)",
       "functionName": "fadeInTimeline(double fadeDuration)",
       "kind": "fn",
       "name": "fadeInTimeline",
       "params": [
        {
         "name": "fadeDuration",
         "type": "double"
        }
       ],
       "path": "PixeraMulti.Timeline.Selected.fadeInTimeline",
       "signiture": "fadeInTimeline(double fadeDuration)"
      },
      {
       "body": "self.Timeline.fadeOutTimeline(nil,fadeDuration)",
       "functionName": "fadeOutTimeline(double fadeDuration)",
       "kind": "fn",
       "name": "fadeOutTimeline",
       "params": [
        {
         "name": "fadeDuration",
         "type": "double"
        }
       ],
       "path": "PixeraMulti.Timeline.Selected.fadeOutTimeline",
       "signiture": "fadeOutTimeline(double fadeDuration)"
      },
      {
       "body": "self.Timeline.moveToNextCue()",
       "functionName": "moveToNextCue()",
       "kind": "fn",
       "name": "moveToNextCue",
       "path": "PixeraMulti.Timeline.Selected.moveToNextCue",
       "signiture": "moveToNextCue()"
      },
      {
       "body": "self.Timeline.moveToNextCueIgnoreProperties()",
       "functionName": "moveToNextCueIgnoreProperties()",
       "kind": "fn",
       "name": "moveToNextCueIgnoreProperties",
       "path": "PixeraMulti.Timeline.Selected.moveToNextCueIgnoreProperties",
       "signiture": "moveToNextCueIgnoreProperties()"
      },
      {
       "body": "self.Timeline.moveToPreviousCue()",
       "functionName": "moveToPreviousCue()",
       "kind": "fn",
       "name": "moveToPreviousCue",
       "path": "PixeraMulti.Timeline.Selected.moveToPreviousCue",
       "signiture": "moveToPreviousCue()"
      },
      {
       "body": "self.Timeline.moveToPreviousCueIgnoreProperties()",
       "functionName": "moveToPreviousCueIgnoreProperties()",
       "kind": "fn",
       "name": "moveToPreviousCueIgnoreProperties",
       "path": "PixeraMulti.Timeline.Selected.moveToPreviousCueIgnoreProperties",
       "signiture": "moveToPreviousCueIgnoreProperties()"
      },
      {
       "body": "self.Timeline.setOpacity(value)",
       "functionName": "setOpacity(double value)",
       "kind": "fn",
       "name": "setOpacity",
       "params": [
        {
         "name": "value",
         "type": "double"
        }
       ],
       "path": "PixeraMulti.Timeline.Selected.setOpacity",
       "signiture": "setOpacity(double value)"
      },
      {
       "body": "self.Timeline.setCurrentTime(time)",
       "functionName": "setCurrentTime(int time)",
       "kind": "fn",
       "name": "setCurrentTime",
       "params": [
        {
         "name": "time",
         "type": "int"
        }
       ],
       "path": "PixeraMulti.Timeline.Selected.setCurrentTime",
       "signiture": "setCurrentTime(int time)"
      },
      {
       "body": "self.Timeline.toggleTransport()",
       "functionName": "toggleTransport()",
       "kind": "fn",
       "name": "toggleTransport",
       "path": "PixeraMulti.Timeline.Selected.toggleTransport",
       "signiture": "toggleTransport()"
      },
      {
       "body": "self.Timeline.moveToCueName(name)",
       "functionName": "moveToCueName(string name)",
       "kind": "fn",
       "name": "moveToCueName",
       "params": [
        {
         "name": "name",
         "type": "string"
        }
       ],
       "path": "PixeraMulti.Timeline.Selected.moveToCueName",
       "signiture": "moveToCueName(string name)"
      },
      {
       "body": "self.Timeline.blendToCueName(name,nil,blendDuration)",
       "functionName": "blendToCueName(string name,double blendDuration)",
       "kind": "fn",
       "name": "blendToCueName",
       "params": [
        {
         "name": "name",
         "type": "string"
        },
        {
         "name": "blendDuration",
         "type": "double"
        }
       ],
       "path": "PixeraMulti.Timeline.Selected.blendToCueName",
       "signiture": "blendToCueName(string name,double blendDuration)"
      },
      {
       "body": "self.Timeline.moveToCueNumber(number)",
       "functionName": "moveToCueNumber(int number)",
       "kind": "fn",
       "name": "moveToCueNumber",
       "params": [
        {
         "name": "number",
         "type": "int"
        }
       ],
       "path": "PixeraMulti.Timeline.Selected.moveToCueNumber",
       "signiture": "moveToCueNumber(int number)"
      },
      {
       "body": "self.Timeline.setSmpte(mode)",
       "functionName": "setSmpte(int mode)",
       "kind": "fn",
       "name": "setSmpte",
       "params": [
        {
         "name": "mode",
         "type": "int"
        }
       ],
       "path": "PixeraMulti.Timeline.Selected.setSmpte",
       "signiture": "setSmpte(int mode)"
      }
     ],
     "kind": "ns",
     "name": "Selected"
    },
    {
     "body": "local tab = {}\r\n\r\nfor i,n in pairs(self.PixeraInstances) do\r\n\tfor t,p in pairs(n) do\r\n\t\tif timelineName == nil then\r\n\t\t\tfor g,l in pairs(p.Timelines.getTimelinesSelected()) do\r\n\t\t\t\ttable.insert(tab,l.play)\r\n\t\t\tend\r\n\t\telse\r\n\t\t\tlocal handle = p.Timelines.Timeline.getInst(timelineName)\r\n\t\t\tif handle ~= nil then\r\n\t\t\t\ttable.insert(tab,handle.play)\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\nend\r\n\r\nfor i,n in pairs(tab) do\r\n\tif n ~= nil then\r\n\t\tn()\r\n\tend\r\nend",
     "functionName": "play(string timelineName)",
     "kind": "fn",
     "name": "play",
     "params": [
      {
       "name": "timelineName",
       "type": "string"
      }
     ],
     "path": "PixeraMulti.Timeline.play",
     "signiture": "play(string timelineName)"
    },
    {
     "body": "local tab = {}\r\n\r\nfor i,n in pairs(self.PixeraInstances) do\r\n\tfor t,p in pairs(n) do\r\n\t\tif timelineName == nil then\r\n\t\t\tfor g,l in pairs(p.Timelines.getTimelinesSelected()) do\r\n\t\t\t\ttable.insert(tab,l.pause)\r\n\t\t\tend\r\n\t\telse\r\n\t\t\tlocal handle = p.Timelines.Timeline.getInst(timelineName)\r\n\t\t\tif handle ~= nil then\r\n\t\t\t\ttable.insert(tab,handle.pause)\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\nend\r\n\r\nfor i,n in pairs(tab) do\r\n\tif n ~= nil then\r\n\t\tn()\r\n\tend\r\nend",
     "functionName": "pause(string timelineName)",
     "kind": "fn",
     "name": "pause",
     "params": [
      {
       "name": "timelineName",
       "type": "string"
      }
     ],
     "path": "PixeraMulti.Timeline.pause",
     "signiture": "pause(string timelineName)"
    },
    {
     "body": "local tab = {}\r\n\r\nfor i,n in pairs(self.PixeraInstances) do\r\n\tfor t,p in pairs(n) do\r\n\t\tif timelineName == nil then\r\n\t\t\tfor g,l in pairs(p.Timelines.getTimelinesSelected()) do\r\n\t\t\t\ttable.insert(tab,l.stop)\r\n\t\t\tend\r\n\t\telse\r\n\t\t\tlocal handle = p.Timelines.Timeline.getInst(timelineName)\r\n\t\t\tif handle ~= nil then\r\n\t\t\t\ttable.insert(tab,handle.stop)\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\nend\r\n\r\nfor i,n in pairs(tab) do\r\n\tif n ~= nil then\r\n\t\tn()\r\n\tend\r\nend",
     "functionName": "stop(string timelineName)",
     "kind": "fn",
     "name": "stop",
     "params": [
      {
       "name": "timelineName",
       "type": "string"
      }
     ],
     "path": "PixeraMulti.Timeline.stop",
     "signiture": "stop(string timelineName)"
    },
    {
     "body": "local tab = {}\r\n\r\nfor i,n in pairs(self.PixeraInstances) do\r\n\tfor t,p in pairs(n) do\r\n\t\tif timelineName == nil then\r\n\t\t\tfor g,l in pairs(p.Timelines.getTimelinesSelected()) do\r\n\t\t\t\ttable.insert(tab,l.toggleTransport)\r\n\t\t\tend\r\n\t\telse\r\n\t\t\tlocal handle = p.Timelines.Timeline.getInst(timelineName)\r\n\t\t\tif handle ~= nil then\r\n\t\t\t\ttable.insert(tab,handle.toggleTransport)\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\nend\r\n\r\nfor i,n in pairs(tab) do\r\n\tif n ~= nil then\r\n\t\tn()\r\n\tend\r\nend",
     "functionName": "toggleTransport(string timelineName)",
     "kind": "fn",
     "name": "toggleTransport",
     "params": [
      {
       "name": "timelineName",
       "type": "string"
      }
     ],
     "path": "PixeraMulti.Timeline.toggleTransport",
     "signiture": "toggleTransport(string timelineName)"
    },
    {
     "body": "local fadeDuration = fadeDuration or 1 --default value \r\nlocal tab = {}\r\nfor i,n in pairs(self.PixeraInstances) do\r\n\tfor t,p in pairs(n) do\r\n\t\tif timelineName == nil then\r\n\t\t\tfor g,l in pairs(p.Timelines.getTimelinesSelected()) do\r\n\t\t\t\tlocal fadeDuration = l.getFps() * fadeDuration\r\n\t\t\t\ttable.insert(tab,l.startOpacityAnimation(true,fadeDuration))\r\n\t\t\tend\r\n\t\telse\r\n\t\t\tlocal handle = p.Timelines.Timeline.getInst(timelineName)\r\n\t\t\tif handle ~= nil then\r\n\t\t\t\tlocal fadeDuration = handle.getFps() * fadeDuration\r\n\t\t\t\ttable.insert(tab,handle.startOpacityAnimation(true,fadeDuration))\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\nend\r\n\r\nfor i,n in pairs(tab) do\r\n\tif n ~= nil then\r\n\t\tn()\r\n\tend\r\nend\r\n",
     "functionName": "fadeInTimeline(string timelineName,double fadeDuration)",
     "kind": "fn",
     "name": "fadeInTimeline",
     "params": [
      {
       "name": "timelineName",
       "type": "string"
      },
      {
       "name": "fadeDuration",
       "type": "double"
      }
     ],
     "path": "PixeraMulti.Timeline.fadeInTimeline",
     "signiture": "fadeInTimeline(string timelineName,double fadeDuration)"
    },
    {
     "body": "local fadeDuration = fadeDuration or 1 --default value \r\nlocal tab = {}\r\nfor i,n in pairs(self.PixeraInstances) do\r\n\tfor t,p in pairs(n) do\r\n\t\tif timelineName == nil then\r\n\t\t\tfor g,l in pairs(p.Timelines.getTimelinesSelected()) do\r\n\t\t\t\tlocal fadeDuration = l.getFps() * fadeDuration\r\n\t\t\t\ttable.insert(tab,l.startOpacityAnimation(false,fadeDuration))\r\n\t\t\tend\r\n\t\telse\r\n\t\t\tlocal handle = p.Timelines.Timeline.getInst(timelineName)\r\n\t\t\tif handle ~= nil then\r\n\t\t\t\tlocal fadeDuration = handle.getFps() * fadeDuration\r\n\t\t\t\ttable.insert(tab,handle.startOpacityAnimation(false,fadeDuration))\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\nend\r\n\r\nfor i,n in pairs(tab) do\r\n\tif n ~= nil then\r\n\t\tn()\r\n\tend\r\nend",
     "functionName": "fadeOutTimeline(string timelineName,double fadeDuration)",
     "kind": "fn",
     "name": "fadeOutTimeline",
     "params": [
      {
       "name": "timelineName",
       "type": "string"
      },
      {
       "name": "fadeDuration",
       "type": "double"
      }
     ],
     "path": "PixeraMulti.Timeline.fadeOutTimeline",
     "signiture": "fadeOutTimeline(string timelineName,double fadeDuration)"
    },
    {
     "body": "local tab = {}\r\n\r\nfor i,n in pairs(self.PixeraInstances) do\r\n\tfor t,p in pairs(n) do\r\n\t\tif timelineName == nil then\r\n\t\t\tfor g,l in pairs(p.Timelines.getTimelinesSelected()) do\r\n\t\t\t\ttable.insert(tab,l.moveToNextCue)\r\n\t\t\tend\r\n\t\telse\r\n\t\t\tlocal handle = p.Timelines.Timeline.getInst(timelineName)\r\n\t\t\tif handle ~= nil then\r\n\t\t\t\ttable.insert(tab,handle.moveToNextCue)\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\nend\r\n\r\nfor i,n in pairs(tab) do\r\n\tif n ~= nil then\r\n\t\tn()\r\n\tend\r\nend",
     "functionName": "moveToNextCue(string timelineName)",
     "kind": "fn",
     "name": "moveToNextCue",
     "params": [
      {
       "name": "timelineName",
       "type": "string"
      }
     ],
     "path": "PixeraMulti.Timeline.moveToNextCue",
     "signiture": "moveToNextCue(string timelineName)"
    },
    {
     "body": "local tab = {}\r\n\r\nfor i,n in pairs(self.PixeraInstances) do\r\n\tfor t,p in pairs(n) do\r\n\t\tif timelineName == nil then\r\n\t\t\tfor g,l in pairs(p.Timelines.getTimelinesSelected()) do\r\n\t\t\t\ttable.insert(tab,l.moveToNextCueIgnoreProperties)\r\n\t\t\tend\r\n\t\telse\r\n\t\t\tlocal handle = p.Timelines.Timeline.getInst(timelineName)\r\n\t\t\tif handle ~= nil then\r\n\t\t\t\ttable.insert(tab,handle.moveToNextCueIgnoreProperties)\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\nend\r\n\r\nfor i,n in pairs(tab) do\r\n\tif n ~= nil then\r\n\t\tn()\r\n\tend\r\nend",
     "functionName": "moveToNextCueIgnoreProperties(string timelineName)",
     "kind": "fn",
     "name": "moveToNextCueIgnoreProperties",
     "params": [
      {
       "name": "timelineName",
       "type": "string"
      }
     ],
     "path": "PixeraMulti.Timeline.moveToNextCueIgnoreProperties",
     "signiture": "moveToNextCueIgnoreProperties(string timelineName)"
    },
    {
     "body": "local tab = {}\r\n\r\nfor i,n in pairs(self.PixeraInstances) do\r\n\tfor t,p in pairs(n) do\r\n\t\tif timelineName == nil then\r\n\t\t\tfor g,l in pairs(p.Timelines.getTimelinesSelected()) do\r\n\t\t\t\ttable.insert(tab,l.moveToPreviousCue)\r\n\t\t\tend\r\n\t\telse\r\n\t\t\tlocal handle = p.Timelines.Timeline.getInst(timelineName)\r\n\t\t\tif handle ~= nil then\r\n\t\t\t\ttable.insert(tab,handle.moveToPreviousCue)\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\nend\r\n\r\nfor i,n in pairs(tab) do\r\n\tif n ~= nil then\r\n\t\tn()\r\n\tend\r\nend",
     "functionName": "moveToPreviousCue(string timelineName)",
     "kind": "fn",
     "name": "moveToPreviousCue",
     "params": [
      {
       "name": "timelineName",
       "type": "string"
      }
     ],
     "path": "PixeraMulti.Timeline.moveToPreviousCue",
     "signiture": "moveToPreviousCue(string timelineName)"
    },
    {
     "body": "local tab = {}\r\n\r\nfor i,n in pairs(self.PixeraInstances) do\r\n\tfor t,p in pairs(n) do\r\n\t\tif timelineName == nil then\r\n\t\t\tfor g,l in pairs(p.Timelines.getTimelinesSelected()) do\r\n\t\t\t\ttable.insert(tab,l.moveToPreviousCueIgnoreProperties)\r\n\t\t\tend\r\n\t\telse\r\n\t\t\tlocal handle = p.Timelines.Timeline.getInst(timelineName)\r\n\t\t\tif handle ~= nil then\r\n\t\t\t\ttable.insert(tab,handle.moveToPreviousCueIgnoreProperties)\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\nend\r\n\r\nfor i,n in pairs(tab) do\r\n\tif n ~= nil then\r\n\t\tn()\r\n\tend\r\nend",
     "functionName": "moveToPreviousCueIgnoreProperties(string timelineName)",
     "kind": "fn",
     "name": "moveToPreviousCueIgnoreProperties",
     "params": [
      {
       "name": "timelineName",
       "type": "string"
      }
     ],
     "path": "PixeraMulti.Timeline.moveToPreviousCueIgnoreProperties",
     "signiture": "moveToPreviousCueIgnoreProperties(string timelineName)"
    },
    {
     "body": "local tab = {}\r\n\r\nfor i,n in pairs(self.PixeraInstances) do\r\n\tfor t,p in pairs(n) do\r\n\t\tif timelineName == nil then\r\n\t\t\tfor g,l in pairs(p.Timelines.getTimelinesSelected()) do\r\n\t\t\t\ttable.insert(tab,l.setOpacity)\r\n\t\t\tend\r\n\t\telse\r\n\t\t\tlocal handle = p.Timelines.Timeline.getInst(timelineName)\r\n\t\t\tif handle ~= nil then\r\n\t\t\t\ttable.insert(tab,handle.setOpacity)\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\nend\r\n\r\nfor i,n in pairs(tab) do\r\n\tif n ~= nil then\r\n\t\tn(Value)\r\n\tend\r\nend",
     "functionName": "setOpacity(double Value,string timelineName)",
     "kind": "fn",
     "name": "setOpacity",
     "params": [
      {
       "name": "Value",
       "type": "double"
      },
      {
       "name": "timelineName",
       "type": "string"
      }
     ],
     "path": "PixeraMulti.Timeline.setOpacity",
     "signiture": "setOpacity(double Value,string timelineName)"
    },
    {
     "body": "local tab = {}\r\n\r\nfor i,n in pairs(self.PixeraInstances) do\r\n\tfor t,p in pairs(n) do\r\n\t\tif timelineName == nil then\r\n\t\t\tfor g,l in pairs(p.Timelines.getTimelinesSelected()) do\r\n\t\t\t\ttable.insert(tab,l.setCurrentTime)\r\n\t\t\tend\r\n\t\telse\r\n\t\t\tlocal handle = p.Timelines.Timeline.getInst(timelineName)\r\n\t\t\tif handle ~= nil then\r\n\t\t\t\ttable.insert(tab,handle.setCurrentTime)\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\nend\r\n\r\nfor i,n in pairs(tab) do\r\n\tif n ~= nil then\r\n\t\tn(time)\r\n\tend\r\nend",
     "functionName": "setCurrentTime(int time,string timelineName)",
     "kind": "fn",
     "name": "setCurrentTime",
     "params": [
      {
       "name": "time",
       "type": "int"
      },
      {
       "name": "timelineName",
       "type": "string"
      }
     ],
     "path": "PixeraMulti.Timeline.setCurrentTime",
     "signiture": "setCurrentTime(int time,string timelineName)"
    },
    {
     "body": "for i,n in pairs(self.PixeraInstances) do\r\n\tfor t,p in pairs(n) do\r\n\t\tif timelineName == nil then\r\n\t\t\tfor g,l in pairs(p.Timelines.getTimelinesSelected()) do\r\n\t\t\t\tp.Compound.applyCueOnTimeline(l.getName(),name)\r\n\t\t\tend\r\n\t\telse\r\n\t\t\tp.Compound.applyCueOnTimeline(timelineName,name)\r\n\t\tend\r\n\tend\r\nend",
     "functionName": "moveToCueName(string name,string timelineName)",
     "kind": "fn",
     "name": "moveToCueName",
     "params": [
      {
       "name": "name",
       "type": "string"
      },
      {
       "name": "timelineName",
       "type": "string"
      }
     ],
     "path": "PixeraMulti.Timeline.moveToCueName",
     "signiture": "moveToCueName(string name,string timelineName)"
    },
    {
     "body": "local blendDuration = blendDuration or 1 --default value \r\n\r\nfor i,n in pairs(self.PixeraInstances) do\r\n\tfor t,p in pairs(n) do\r\n\t\tif timelineName == nil then\r\n\t\t\tfor g,l in pairs(p.Timelines.getTimelinesSelected()) do\r\n\t\t\t\tp.Compound.applyCueOnTimeline(l.getName(),name,blendDuration)\r\n\t\t\tend\r\n\t\telse\r\n\t\t\tp.Compound.applyCueOnTimeline(timelineName,name,blendDuration)\r\n\t\tend\r\n\tend\r\nend",
     "functionName": "blendToCueName(string name,string timelineName,double blendDuration)",
     "kind": "fn",
     "name": "blendToCueName",
     "params": [
      {
       "name": "name",
       "type": "string"
      },
      {
       "name": "timelineName",
       "type": "string"
      },
      {
       "name": "blendDuration",
       "type": "double"
      }
     ],
     "path": "PixeraMulti.Timeline.blendToCueName",
     "signiture": "blendToCueName(string name,string timelineName,double blendDuration)"
    },
    {
     "body": "for i,n in pairs(self.PixeraInstances) do\r\n\tfor t,p in pairs(n) do\r\n\t\tif timelineName == nil then\r\n\t\t\tfor g,l in pairs(p.Timelines.getTimelinesSelected()) do\r\n\t\t\t\tp.Compound.applyCueNumberOnTimeline(l.getName(),number)\r\n\t\t\tend\r\n\t\telse\r\n\t\t\tp.Compound.applyCueNumberOnTimeline(timelineName,number)\r\n\t\tend\r\n\tend\r\nend",
     "functionName": "moveToCueNumber(int number,string timelineName)",
     "kind": "fn",
     "name": "moveToCueNumber",
     "params": [
      {
       "name": "number",
       "type": "int"
      },
      {
       "name": "timelineName",
       "type": "string"
      }
     ],
     "path": "PixeraMulti.Timeline.moveToCueNumber",
     "signiture": "moveToCueNumber(int number,string timelineName)"
    },
    {
     "body": "local tab = {}\r\n\r\nfor i,n in pairs(self.PixeraInstances) do\r\n\tfor t,p in pairs(n) do\r\n\t\tif timelineName == nil then\r\n\t\t\tfor g,l in pairs(p.Timelines.getTimelinesSelected()) do\r\n\t\t\t\ttable.insert(tab,l.setSmpteMode)\r\n\t\t\tend\r\n\t\telse\r\n\t\t\tlocal handle = p.Timelines.Timeline.getInst(timelineName)\r\n\t\t\tif handle ~= nil then\r\n\t\t\t\ttable.insert(tab,handle.setSmpteMode)\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\nend\r\n\r\nfor i,n in pairs(tab) do\r\n\tif n ~= nil then\r\n\t\tn(mode)\r\n\tend\r\nend",
     "functionName": "setSmpte(string timelineName,int mode)",
     "kind": "fn",
     "name": "setSmpte",
     "params": [
      {
       "name": "timelineName",
       "type": "string"
      },
      {
       "name": "mode",
       "type": "int"
      }
     ],
     "path": "PixeraMulti.Timeline.setSmpte",
     "signiture": "setSmpte(string timelineName,int mode)"
    }
   ],
   "kind": "ns",
   "name": "Timeline"
  }
 ],
 "canHaveExternalConnections": false,
 "cjv": {
  "h": 572.3859649122807,
  "w": 645.3157894736842,
  "x": 30.0,
  "y": 515.0
 },
 "definedExternally": false,
 "hostInfo": {
  "systemType": ""
 },
 "libraryExportPath": "C:/PixeraCode/control-modules/control_library_standard/Tools/PixeraHelpers/PixeraMulti.json",
 "license": "1GNTlyr7sewU1l3S6nhV4uLDNKHIl8W2xUH0aYRob2+nicUFp/Px0FDkZr/br8p6bFL0uXkJ9jimrvN/XU1M78A+NO6qrYw7zMZ+tNY9jBrU77CgJqQ0yClUQcEjjX8LqvWrxny2ZvV3nvsAJLBv9Q==",
 "name": "PixeraMulti",
 "properties": [
  {
   "cont": "true",
   "name": "Auto Init",
   "typeHint": "bool"
  },
  {
   "cont": "connect the toPixera Modules action with all Pixera Modules to control them simultan.",
   "name": "Description",
   "readOnly": true,
   "typeHint": "string"
  },
  {
   "cont": "AV Stumpfl GmbH",
   "name": "Author",
   "readOnly": true,
   "typeHint": "string"
  },
  {
   "cont": "",
   "imageBase64": "",
   "name": "Logo",
   "readOnly": true,
   "showName": false,
   "typeHint": "image"
  },
  {
   "cont": "http://www.pixera.one",
   "name": "URL",
   "readOnly": true,
   "showName": false,
   "typeHint": "url"
  },
  {
   "cont": "1.3",
   "name": "Version",
   "readOnly": true,
   "typeHint": "string"
  }
 ],
 "separateCode": false,
 "uiUrl": ""
}