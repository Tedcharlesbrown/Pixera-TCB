{
 "api": [
  {
   "body": "--Utils.Timer.sleep(2000)\r\n\r\nif self.helper == nil then\r\n\trequire \"pixcHelper\"\r\n\tself.helper = createPixcHelper(pixc,self())\r\nend\r\n\r\nself.fadeDuration = self.helper:getProperty('Crossfade duration (Seconds)')\r\nself.tl_name = self.helper:getProperty(\"Timeline\")\r\nif self.tl_name == \"Select...\" then\r\n\tpixc.log(\"Timeline not set in Module: \".. self(\"\"))\r\n\treturn\r\nend\r\n--load now to have it available in the fillClips() action\r\nself.maxNewClipNumber = tonumber(self.helper:getProperty(\"Numbers of New Clip in Loop\"))\r\nself.numberClips = tonumber(self.helper:getProperty('Clips on Timeline'))\r\nself.tl = Pixera.Timelines.getTimelineFromName(self.tl_name)\r\nself.layer = Pixera.Timelines.Layer.getInst(self.tl_name .. \".\" .. self.helper:getProperty(\"Layer\"))\r\nself.clips = self.layer.getClips()\r\nself.fps = self.tl.getFps()\r\nself.lastClipToFillStartTime = self.clips[self.numberClips].getTime()\r\nself.lastClipToFillEndTime = self.clips[self.numberClips].getDuration() + self.lastClipToFillStartTime\r\n\r\n\r\n--if self._nextClipToFill == nil then\r\n--\tself.nextClipToFill(3,true)\r\n--end\r\n\r\nif self._intervalTicker ~= nil then\r\n\tpixc.getRoot().Utils.Timer.clearInterval(self._intervalTicker);\r\n\tself._intervalTicker = nil\r\nend\r\nself.clipsFilled = 0\r\n--self.Internal.loadPropertys()\r\nself._intervalTicker = pixc.getRoot().Utils.Timer.setInterval(\r\n\tfunction()\r\n\t\tself.fillClips()\r\n\tend, (1500.0)\r\n)\r\nself.isInit = true",
   "kind": "func",
   "name": "init"
  },
  {
   "body": "if self._intervalTicker ~= nil then\r\n\tpixc.getRoot().Utils.Timer.clearInterval(self._intervalTicker);\r\n\tself._intervalTicker = nil\r\nend",
   "kind": "func",
   "name": "uninit"
  },
  {
   "attKind": "standard",
   "attReports": {
    "0": "1.00"
   },
   "body": "self._currentResourceNumber = pixcCommon.execAttribute(0, self._currentResourceNumber, tonumber(val), doSet)\r\nreturn self._currentResourceNumber",
   "kind": "func",
   "name": "currentResourceNumber",
   "params": [
    {
     "name": "val",
     "type": "int"
    },
    {
     "name": "doSet",
     "type": "bool"
    }
   ],
   "result": {
    "name": "result",
    "type": "int"
   }
  },
  {
   "body": "self.currentResourceNumber(1,true)",
   "kind": "func",
   "name": "resetCurrentResourceNumber"
  },
  {
   "body": "\nif self.isInit ~= nil then\n\tself.init()\nend\n\nlocal tl_name = self.helper:getProperty(\"Timeline\")\nlocal tl = Pixera.Timelines.getTimelineFromName(tl_name)\n\nlocal layer = Pixera.Timelines.Layer.getInst(tl_name .. \".\" .. self.helper:getProperty(\"Layer\"))\nif layer == nil or layer.getHandleInt() == 0 then\n\treturn\nend\n\nself.Internal.createClips(tl,layer)\n\n--reset next clip to fill and reset timeline cursor\nself.nextClipToFill(1,true)\nself.readyToAdd(true)\npixc.log(\"Timeline Built\")\nself.uninit()\nself.init()\npixc.log(\"container is only filled when cursor is not inside or in preload \")\n",
   "kind": "func",
   "name": "buildTimeline"
  },
  {
   "body": "\r\nself.res = Pixera.Resources.getResourceFolderWithNamePath(self.helper:getProperty(\"Pixera Content Folder\")).getResources()\r\n\r\nif #self.res == 0 then\r\n\tpixc.log(\"No resources found in folder\")\r\nend\r\n\r\n--convert list to map with id's\r\nself.resMap = {}\r\n--This loop is has a lot of api calls and could be more efficient\r\nfor k,v in pairs(self.res) do\r\n\tlocal name = self.helper.stringSplit(v.getName(),\".\")\r\n\tlocal clipNumber = tonumber(string.sub(name[1], -3)) -- get number from name -3 is for nameing numbering chars\r\n\tself.resMap[clipNumber] = v.getId()\r\nend\r\n\r\n-- Are there new self.clips to add, search the next 10 numbers\r\nfunction checkNextClip()\r\n\tlocal maxNumbersToSearch = 9\r\n\tfor i=0,maxNumbersToSearch,1 do\r\n\t\tif  self.resMap[self._currentResourceNumber + i] ~= nil then\r\n\t\t\tif i == 0 then --skip function call if there is no jump in numbers\r\n\t\t\t\treturn true\r\n\t\t\tend\r\n\t\t\tself.currentResourceNumber(self._currentResourceNumber + i,true)\r\n\t\t\treturn true\r\n\t\tend\r\n\t\tif i == maxNumbersToSearch then\r\n\t\t\treturn false\r\n\t\tend\r\n\tend\r\nend\r\n\r\n--do nothing if there are no new self.clips\r\nif checkNextClip() ~= true then\r\n\treturn\r\nend\r\n\r\n--fill next clip on timeline and assign as many self.clips as selected\r\nif self._readyToAdd then --only add if ready\r\n\r\n\r\n\tfor i=1,self.maxNewClipNumber do\r\n\r\n\t\t--if some self.clips were already added\r\n\t\tif self.clipsFilled == self.maxNewClipNumber then\r\n\t\t\tself.readyToAdd(false)\r\n\t\t\treturn\r\n\t\tend\r\n\r\n\t\tlocal preloadTimeInFrames = 6 * self.fps -- Usually 5 Seconds but i will give it some more buffer time\r\n\t\t--if now pointer is in the self.clips or in preload then wait for the next tick\r\n\t\tlocal clipFillNumber = tonumber(self._nextClipToFill)\r\n\t\t--pixc.log(clipFillNumber)\r\n\t\t\r\n\t\tlocal clipToFillStartTime = self.clips[clipFillNumber].getTime() --because to not fill the next wile in preload\r\n\t\tif clipToFillStartTime <= 0 then -- check for the first clip \r\n\t\t\tclipToFillStartTime = 1\r\n\t\tend\r\n\t\tlocal clipDuration = self.clips[clipFillNumber].getDuration()\r\n\t\tlocal clipToFillEndTime = clipDuration + clipToFillStartTime -- (clipDuration * self.maxNewClipNumber)\r\n\t\tlocal timelineFrame = self.tl.getCurrentTime()\r\n\t\tif timelineFrame > clipToFillStartTime - preloadTimeInFrames and timelineFrame < clipToFillEndTime then\r\n\t\t\t--pixc.log(\"Skipped filling because NowPointer is in Clip or Preload before Clip\")\r\n\t\t\treturn\r\n\t\tend\r\n\r\n\t\tif timelineFrame >= (self.lastClipToFillEndTime - preloadTimeInFrames - self.fadeDuration) then\r\n\t\t\t--pixc.log(\"Skipped filling because NowPointer is in JumpCue Preload\")\r\n\t\t\treturn\r\n\t\tend\r\n\t\r\n\t\t-- Check in each loop if there are still enough resources left\r\n\t\tif checkNextClip() ~= true then\r\n\t\t\treturn\r\n\t\tend\r\n\t\t\r\n\t\tclipFillNumber = tonumber(self._nextClipToFill)\r\n\t\tself.clips[clipFillNumber].assignResource(self.resMap[self._currentResourceNumber],false) --assign resource to container here\r\n\t\t--pixc.log(self.resMap[self._currentResourceNumber],clipFillNumber)\r\n\t\tself.nextClipToFill(clipFillNumber + 1 ,true) -- iterate number\r\n\t\tself.currentResourceNumber(self._currentResourceNumber + 1,true) -- iterate number\r\n\t\tself.clipsFilled = self.clipsFilled + 1\r\n\tend\r\n\t--do not add more self.clips until new loop\r\n\tself.readyToAdd(false)\r\n\r\nend\r\n",
   "kind": "func",
   "name": "fillClips"
  },
  {
   "elems": [
    {
     "body": "\r\nself.dropdown = Pixera.Timelines.getTimelines()\r\n\r\n-- Copy the keys from this map to another table for the dropdown\r\nlocal list = {}\r\nfor k,v in pairs(self.dropdown) do\r\ntable.insert(list,v.getName())\r\nend\r\nreturn list --return list for dropdown window\r\n\r\n--list = Pixera.Timelines.getTimelines()\r\n--return list\r\n",
     "kind": "func",
     "name": "getTimelines",
     "slotStyle": "leftNone;rightNone"
    },
    {
     "body": "if self.helper == nil then\r\n\trequire \"pixcHelper\"\r\n\tself.helper = createPixcHelper(pixc,self())\r\nend\r\nlocal tl_name = self.helper:getProperty(\"Timeline\")\r\n--The property is also called up again here because of the dropdown selection fields, which are also triggered when the core is rebuilt\r\nif tl_name == \"Select...\" then\r\n\t--pixc.log(\"Timeline not set in Module: \".. self(\"\"))\r\n\treturn\r\nend\r\n--\t\r\nlocal tl = Pixera.Timelines.getTimelineFromName(tl_name)\r\nlocal layers = tl.getLayers()\r\n\r\n--convert to names without api command\r\nlocal layer_name = {}\r\nfor i,n in pairs(layers) do\r\n\ttable.insert(layer_name,n.getName())\r\nend\r\n\r\n--local layer_name = tl.getLayerNames()\r\nif #layer_name == 0 then\r\n\tpixc.log(\"No Layer on Timeline\")\r\n\treturn\r\nend\r\n\r\nreturn layer_name\r\n",
     "kind": "func",
     "name": "getLayers",
     "slotStyle": "leftNone;rightNone"
    },
    {
     "body": "local iter = function(input, array, fn)\r\n\tfor i,_ in pairs(input.getResourceFolders()) do\r\n\t\tif type(_) == \"userdata\" and _.getName() ~= \"Live Inputs\"  and _.getName() ~= \"Exported Content\" then\r\n\t\t\ttable.insert(array,_.getInstancePath())\r\n\t\t\tarray = fn(_,array,fn)\r\n\t\tend\r\n\tend\r\n\treturn array, handleArray\r\nend\r\n\r\nlocal array = {}\r\nself.handleArray = {}\r\narray = iter(Pixera.Resources,array,iter)\r\n\r\nreturn array\r\n",
     "kind": "func",
     "name": "getFolderPixera",
     "slotStyle": "leftNone;rightNone"
    },
    {
     "body": "\r\nlocal fps = timeline.getFps()\r\ntimeline.removeCues()\r\nlayer.removeClips() \r\nlocal numberClips = tonumber(self.helper:getProperty('Clips on Timeline'))\r\nlocal firstClipStartTime = tonumber(self.helper:getProperty('First Clip Start Time (Seconds)'))\r\nlocal fadeDuration = tonumber(self.helper:getProperty('Crossfade duration (Seconds)'))\r\nlocal time = firstClipStartTime\r\n\r\nlocal endTime = 0\r\nlocal duration = tonumber(self.helper:getProperty('Clip duration (Seconds)'))\r\n\r\nif fadeDuration >= (duration / 2) then\r\n\tpixc.log(\"Crossfade duration is higher or equal then halft the Clip duration\")\r\n\treturn\r\nend\r\n\r\nfor i = 1, numberClips do\r\n\tif duration == 0 then\r\n\t pixc.log(\"Duration can not be 0\")\r\n\tend\r\n\tlocal clip = layer.createClip()\r\n\tif clip ~= nil then\r\n\t\tclip.setDuration(duration * fps)\r\n\t\tclip.setTime(time * fps)\r\n\t\tendTime = time + duration\r\n\t\ttime = endTime\r\n\t\tif duration >= fadeDuration then\r\n\t\t\ttime = time - fadeDuration\r\n\t\tend\r\n\tend\r\nend\r\nif endTime > 1 then\r\n\tlocal cue = timeline.createCue(\"ToBeginning\", ((endTime - fadeDuration) * fps) - 1, 4)\r\n\tif cue ~= nil then\r\n\t\tcue.setJumpGoalTime(firstClipStartTime * fps)\r\n\t\tcue.setCommand(\"pixc\", self(\"\").. \".\"..\"readyToAdd(true)\")\r\n\t\tcue.setBlendDuration(fadeDuration * fps)\r\n\tend\r\nend\r\ntimeline.setCurrentFrame(firstClipStartTime * fps)\r\n",
     "kind": "func",
     "name": "createClips",
     "params": [
      {
       "name": "timeline",
       "type": "handle"
      },
      {
       "name": "layer",
       "type": "handle"
      }
     ],
     "slotStyle": "leftNone;rightNone"
    }
   ],
   "kind": "ns",
   "name": "Internal"
  },
  {
   "attKind": "standard",
   "attReports": {
    "0": "1.00"
   },
   "body": "if self.numberClips == nil then\r\n\tself._nextClipToFill = pixcCommon.execAttribute(0, self._nextClipToFill, val, doSet)\r\n\treturn self._nextClipToFill\r\nend\r\n\r\nif val == nil and self._nextClipToFill == nil then\r\n\tval = 1\r\nend\r\n\r\nif val > self.numberClips then\r\n\tval = 1 --restart at one\r\nend\r\nself._nextClipToFill = pixcCommon.execAttribute(0, self._nextClipToFill, val, doSet)\r\nreturn self._nextClipToFill",
   "kind": "func",
   "name": "nextClipToFill",
   "params": [
    {
     "name": "val",
     "type": "int"
    }
   ],
   "result": {
    "name": "result",
    "type": "int"
   }
  },
  {
   "attKind": "standard",
   "attReports": {
    "0": "false"
   },
   "body": "self._readyToAdd = pixcCommon.execAttribute(false, self._readyToAdd, val, doSet)\r\nself.clipsFilled = 0\r\nreturn self._readyToAdd\r\n",
   "kind": "func",
   "name": "readyToAdd",
   "params": [
    {
     "name": "val",
     "type": "bool"
    },
    {
     "name": "doSet",
     "type": "bool"
    }
   ],
   "result": {
    "name": "result",
    "type": "bool"
   }
  }
 ],
 "canHaveExternalConnections": false,
 "cjv": {
  "h": 450.4761904761905,
  "w": 366.66666666666663,
  "x": 1196.0,
  "y": 658.0
 },
 "definedExternally": false,
 "hostInfo": {
  "systemType": ""
 },
 "libraryExportPath": "C:/ProgramData/AV Stumpfl/Pixera/control_library_user/TimelineLoopFiller.json",
 "license": "1GNTlyr7sewU1l3S6nhV4rs423HB9nYPpRb+0786Rh0YIPzXglAawJJfmUA5Q6iphqvi7IPa66qmL2QdOY+q6mF5b3/H0JW62VtxulWvJbxnymsT1xwCiLQn5JRD1EAOmwL4uJY0SC647gswvAg3ZD5DVBULF/jTe1YF82jmbDQ=",
 "name": "TimelineLoopFiller",
 "properties": [
  {
   "cont": "true",
   "name": "Auto Init",
   "typeHint": "bool"
  },
  {
   "cont": "Select...",
   "name": "Timeline",
   "optionsSourceFunc": "self.Internal.getTimelines",
   "typeHint": "string"
  },
  {
   "cont": "Select...",
   "name": "Layer",
   "optionsSourceFunc": "self.Internal.getLayers"
  },
  {
   "cont": "Select...",
   "name": "Pixera Content Folder",
   "optionsSourceFunc": "self.Internal.getFolderPixera",
   "typeHint": "string"
  },
  {
   "cont": "10",
   "name": "Clips on Timeline",
   "typeHint": "number"
  },
  {
   "cont": "5",
   "name": "Clip duration (Seconds)"
  },
  {
   "cont": "1",
   "name": "Crossfade duration (Seconds)",
   "typeHint": "number"
  },
  {
   "cont": "3",
   "name": "Numbers of New Clip in Loop",
   "typeHint": "number"
  },
  {
   "cont": "1",
   "name": "First Clip Start Time (Seconds)"
  },
  {
   "cont": "5",
   "name": "Default Seconds for Pictures",
   "typeHint": "number"
  },
  {
   "cont": "Build Timeline",
   "name": "Build",
   "optionsAction": "self.buildTimeline",
   "showName": false,
   "typeHint": "button"
  },
  {
   "cont": "AV Stumpfl GmbH (Johannes)",
   "name": "Author",
   "readOnly": true,
   "typeHint": "string"
  },
  {
   "cont": "",
   "imageBase64": "",
   "name": "Logo",
   "readOnly": true,
   "showName": false,
   "typeHint": "image"
  },
  {
   "cont": "",
   "name": "Url",
   "typeHint": "url"
  },
  {
   "cont": "1.12",
   "name": "Version",
   "readOnly": true,
   "typeHint": "string"
  },
  {
   "cont": "20.10.2023",
   "name": "Date",
   "readOnly": true,
   "showName": false,
   "typeHint": "string"
  },
  {
   "cont": "This module is intended to build a timeline with empty clips and replace them with content from a folder. The content must have a three-digit numbering at the end as an example: orange_HD_h264_001.mp4    The timeline is filled with the numbering in ascending order, it can be configured how many are loaded into the timeline per run.    The purpose of this module is to work in combination with the Filewatchfolder and to automatically place and play content on the timeline when it is uploaded to a folder.  Logics are integrated to ensure that the clips are not swapped during preload or while the Nowpointer is in the clip.    ",
   "name": "Description",
   "readOnly": true,
   "typeHint": "string"
  }
 ],
 "separateCode": false,
 "uiUrl": ""
}