This documentation describes revision 367 of the API.

// All class methods imply a handle parameter in the JSON params object (see examples).
namespace Pixera
{
namespace Utility
{
   // Returns the current revision of the API.
   // Release versions have even revision numbers. Beta versions have odd revision numbers.
   int getApiRevision();
    => {"jsonrpc":"2.0", "id":1, "method":"Pixera.Utility.getApiRevision"}
    <= {"jsonrpc":"2.0", "id":1, "result":1}

   // Returns true if the function (or class method) is available.
   // functionName must be the fully qualified name of the function or method,
   // e.g. "Pixera.Screens.Screen.setPosition".
   boolean getHasFunction(string functionName);
    => {"jsonrpc":"2.0", "id":2, "method":"Pixera.Utility.getHasFunction", "params":{"functionName":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":2, "result":true}

   // Outputs a debug string into the Pixera log and returns the same string in
   // the reply.
   string outputDebug(string message);
    => {"jsonrpc":"2.0", "id":3, "method":"Pixera.Utility.outputDebug", "params":{"message":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":3, "result":"Abcd"}
   string getLicenseJson();
    => {"jsonrpc":"2.0", "id":4, "method":"Pixera.Utility.getLicenseJson"}
    <= {"jsonrpc":"2.0", "id":4, "result":"Abcd"}

   // Returns the number of milliseconds since midnight Jan 1st 1970 UTC.
   double getCurrentTime();
    => {"jsonrpc":"2.0", "id":5, "method":"Pixera.Utility.getCurrentTime"}
    <= {"jsonrpc":"2.0", "id":5, "result":1.0}

   // Returns the current time as an ISO-8601 string (using the local timezone).
   string getCurrentTimeAsString();
    => {"jsonrpc":"2.0", "id":6, "method":"Pixera.Utility.getCurrentTimeAsString"}
    <= {"jsonrpc":"2.0", "id":6, "result":"Abcd"}

   // No operation. This function does nothing. It can be used in request/response scenarios
   // (e.g. JSON-RPC) to bookend a set of API invocations. This gives the client a way
   // to know that the last invocation in the set has been processed by Pixera.
   null noop();
    => {"jsonrpc":"2.0", "id":7, "method":"Pixera.Utility.noop"}
    <= {"jsonrpc":"2.0", "id":7}

   // Experimental. Currently only relevant to Javascript interpretation within Pixera.
   null requestCallback(string functionName);
    => {"jsonrpc":"2.0", "id":8, "method":"Pixera.Utility.requestCallback", "params":{"functionName":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":8}
   string readFileString(string path);
    => {"jsonrpc":"2.0", "id":9, "method":"Pixera.Utility.readFileString", "params":{"path":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":9, "result":"Abcd"}
   null writeFileString(string path,string fileStr);
    => {"jsonrpc":"2.0", "id":10, "method":"Pixera.Utility.writeFileString", "params":{"path":"Abcd", "fileStr":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":10}
   string getAccessRecipe(string hdlPath);
    => {"jsonrpc":"2.0", "id":11, "method":"Pixera.Utility.getAccessRecipe", "params":{"hdlPath":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":11, "result":"Abcd"}

   // See the documentation PDF for more information on monitoring.
   // The Javascript implementation does not support monitoring.
   // In the JSON implementation, the result of this function is a JSON object, not a string.
   string pollMonitoring();
    => {"jsonrpc":"2.0", "id":12, "method":"Pixera.Utility.pollMonitoring"}
    <= {"jsonrpc":"2.0", "id":12, "result":"Abcd"}
   boolean unsubscribeMonitoringSubject(string subject);
    => {"jsonrpc":"2.0", "id":13, "method":"Pixera.Utility.unsubscribeMonitoringSubject", "params":{"subject":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":13, "result":true}
   boolean subscribeMonitoringSubject(string subject);
    => {"jsonrpc":"2.0", "id":14, "method":"Pixera.Utility.subscribeMonitoringSubject", "params":{"subject":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":14, "result":true}
   boolean setMonitoringEventMode(string mode);
    => {"jsonrpc":"2.0", "id":15, "method":"Pixera.Utility.setMonitoringEventMode", "params":{"mode":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":15, "result":true}

   // In the Control implementation this function is called when monitoring events are sent.
   null monitoringEvent(string eventDescription);
    => {"jsonrpc":"2.0", "id":16, "method":"Pixera.Utility.monitoringEvent", "params":{"eventDescription":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":16}

   // Only available in json implementation.
   boolean setShowContextInReplies(boolean doShow);
    => {"jsonrpc":"2.0", "id":17, "method":"Pixera.Utility.setShowContextInReplies", "params":{"doShow":true}}
    <= {"jsonrpc":"2.0", "id":17, "result":true}
   boolean setMonitoringHasDelimiter(boolean hasDelimiter);
    => {"jsonrpc":"2.0", "id":18, "method":"Pixera.Utility.setMonitoringHasDelimiter", "params":{"hasDelimiter":true}}
    <= {"jsonrpc":"2.0", "id":18, "result":true}

   // Runs the javascript function jsFunction with code jsCode.
   string runJsScript(string jsFunction,string jsCode);
    => {"jsonrpc":"2.0", "id":19, "method":"Pixera.Utility.runJsScript", "params":{"jsFunction":"Abcd", "jsCode":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":19, "result":"Abcd"}
   null dynamicRebuildFromJsonDescription(string deviceName,string jsonDescription,string folder);
    => {"jsonrpc":"2.0", "id":20, "method":"Pixera.Utility.dynamicRebuildFromJsonDescription", "params":{"deviceName":"Abcd", "jsonDescription":"Abcd", "folder":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":20}
}

// The Network namespace establishes a bridge between the network connections defined in the API
// tab and the API entities. E.g. it allows Javascript objects created during use of the API to
// send data on the connections defined in the API tab.
namespace Network
{
   handle getConveyor(string conveyorName);
    => {"jsonrpc":"2.0", "id":21, "method":"Pixera.Network.getConveyor", "params":{"conveyorName":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":21, "result":123456789}

   // An input or output access as defined in the API.
   class Conveyor
   {
      null sendString(string str);
       => {"jsonrpc":"2.0", "id":22, "method":"Pixera.Network.Conveyor.sendString", "params":{"handle":123456789, "str":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":22}
   }
}

// The Compound namespace contains functions that represent core Pixera capabilites and can be invoked
// without first gathering supplemental information via the API. This makes it suited for quickly getting
// simple integrations up and running. In addition, systems that only support a unidirectional connection
// can use this namespace to control Pixera without requiring that the user input handles, etc. accessed
// by other means.
// The fact that all functions in this namespace must be "standalone" means that the signatures must include
// more information than the typical class-oriented function in the other namespaces (which is what lead to
// the name "Compound" for this namespace). A consequence of this is that the functionality here can not
// be recombined as flexibly as in the other namespaces. For this reason, all but the very simplest
// integrations should prefer use of the other namespaces. The Compound namespace will _not_ be updated
// to reflect all the expressive possibilities of the other namespaces. Rather, it will always only contain
// a subset of the API functionality focused on the simplest use cases.
namespace Compound
{
   // Sets the transport mode of the timeline identified by its (zero-based) index
   // in the timeline library of the Compositing tab.
   // Mode Parameter: Play = 1, Pause = 2, Stop = 3.
   boolean setTransportModeOnTimelineAtIndex(int index,int mode);
    => {"jsonrpc":"2.0", "id":23, "method":"Pixera.Compound.setTransportModeOnTimelineAtIndex", "params":{"index":1, "mode":1}}
    <= {"jsonrpc":"2.0", "id":23, "result":true}

   // Sets the transport mode of the timeline identified by its name.
   // Mode Parameter: Play = 1, Pause = 2, Stop = 3.
   null setTransportModeOnTimeline(string timelineName,int mode);
    => {"jsonrpc":"2.0", "id":24, "method":"Pixera.Compound.setTransportModeOnTimeline", "params":{"timelineName":"Abcd", "mode":1}}
    <= {"jsonrpc":"2.0", "id":24}

   // Toggles the timeline transport mode of timeline identified by its name.
   // Mode toggles between Play and Pause.
   null toggleTransport(string timelineName);
    => {"jsonrpc":"2.0", "id":25, "method":"Pixera.Compound.toggleTransport", "params":{"timelineName":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":25}

   // Returns the current transport mode of the timeline identified by its name.
   // Return values: Play = 1, Pause = 2, Stop = 3.
   int getTransportModeOnTimeline(string timelineName);
    => {"jsonrpc":"2.0", "id":26, "method":"Pixera.Compound.getTransportModeOnTimeline", "params":{"timelineName":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":26, "result":1}

   // Sets the transport mode of the first timeline
   // in the timeline library of the Compositing tab to Play.
   null startFirstTimeline();
    => {"jsonrpc":"2.0", "id":27, "method":"Pixera.Compound.startFirstTimeline"}
    <= {"jsonrpc":"2.0", "id":27}

   // Sets the transport mode of the first timeline
   // in the timeline library of the Compositing tab to Pause.
   null pauseFirstTimeline();
    => {"jsonrpc":"2.0", "id":28, "method":"Pixera.Compound.pauseFirstTimeline"}
    <= {"jsonrpc":"2.0", "id":28}

   // Sets the transport mode of the first timeline
   // in the timeline library of the Compositing tab to Stop.
   null stopFirstTimeline();
    => {"jsonrpc":"2.0", "id":29, "method":"Pixera.Compound.stopFirstTimeline"}
    <= {"jsonrpc":"2.0", "id":29}

   // Sets the opacity of the timeline identified by its name.
   null setOpacityOnTimeline(string timelineName,double opacity);
    => {"jsonrpc":"2.0", "id":30, "method":"Pixera.Compound.setOpacityOnTimeline", "params":{"timelineName":"Abcd", "opacity":1.0}}
    <= {"jsonrpc":"2.0", "id":30}

   // Returns the opacity of the timeline identified by its name.
   double getOpacityOnTimeline(string timelineName);
    => {"jsonrpc":"2.0", "id":31, "method":"Pixera.Compound.getOpacityOnTimeline", "params":{"timelineName":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":31, "result":1.0}

   // Set the x position of the first layer of the first timeline.
   // Purely for demonstration, testing purposes.
   null setPosValue(double val);
    => {"jsonrpc":"2.0", "id":32, "method":"Pixera.Compound.setPosValue", "params":{"val":1.0}}
    <= {"jsonrpc":"2.0", "id":32}

   // Set the x/y position of the first layer of the first timeline.
   // Purely for demonstration, testing purposes.
   null setPosValueXY(double valX,double valY);
    => {"jsonrpc":"2.0", "id":33, "method":"Pixera.Compound.setPosValueXY", "params":{"valX":1.0, "valY":1.0}}
    <= {"jsonrpc":"2.0", "id":33}

   // Sets the current value of the parameter.
   // The parameter is identified by a path separated by periods (e.g. "Timeline 1.Layer 1.Opacity").
   null setParamValue(string path,double value);
    => {"jsonrpc":"2.0", "id":34, "method":"Pixera.Compound.setParamValue", "params":{"path":"Abcd", "value":1.0}}
    <= {"jsonrpc":"2.0", "id":34}

   // Jumps to and executes the cue at the (zero-based) index in the timeline at the (zero-based) index in
   // the timeline library of the Compositing tab.
   // cueIndex: zero-based index of cue
   // timelineIndex: zero-based index of timeline in library
   // blendDuration: optional parameter to set blend duration in seconds.
   null applyCueAtIndexOnTimelineAtIndex(int cueIndex,int timelineIndex,optional<double> blendDuration);
    => {"jsonrpc":"2.0", "id":35, "method":"Pixera.Compound.applyCueAtIndexOnTimelineAtIndex", "params":{"cueIndex":1, "timelineIndex":1, "blendDuration":val}}
    <= {"jsonrpc":"2.0", "id":35}

   // Jumps to and executes the cue with the given number in the timeline at the (zero-based) index in
   // the timeline library of the Compositing tab.
   // cueNumber: number of cue
   // timelineIndex: zero-based index of timeline in library
   // blendDuration: optional parameter to set blend duration in seconds.
   null applyCueNumberOnTimelineAtIndex(int cueNumber,int timelineIndex,optional<double> blendDuration);
    => {"jsonrpc":"2.0", "id":36, "method":"Pixera.Compound.applyCueNumberOnTimelineAtIndex", "params":{"cueNumber":1, "timelineIndex":1, "blendDuration":val}}
    <= {"jsonrpc":"2.0", "id":36}

   // Jumps to and executes the cue with the given number in the timeline with the given timelineName.
   // timelineName: name of timeline
   // cueNumber: number of cue
   // blendDuration: optional parameter to set blend duration in seconds.
   null applyCueNumberOnTimeline(string timelineName,int cueNumber,optional<double> blendDuration);
    => {"jsonrpc":"2.0", "id":37, "method":"Pixera.Compound.applyCueNumberOnTimeline", "params":{"timelineName":"Abcd", "cueNumber":1, "blendDuration":val}}
    <= {"jsonrpc":"2.0", "id":37}

   // Jumps to and executes the cue with given name in the timeline with the given timelineName.
   // timelineName: name of timeline
   // cueName: name of cue
   // blendDuration: optional parameter to set blend duration in seconds.
   null applyCueOnTimeline(string timelineName,string cueName,optional<double> blendDuration);
    => {"jsonrpc":"2.0", "id":38, "method":"Pixera.Compound.applyCueOnTimeline", "params":{"timelineName":"Abcd", "cueName":"Abcd", "blendDuration":val}}
    <= {"jsonrpc":"2.0", "id":38}

   // Adds the file at the path to the folder with the given name path.
   handle addResourceToFolder(string namePath,string filePath);
    => {"jsonrpc":"2.0", "id":39, "method":"Pixera.Compound.addResourceToFolder", "params":{"namePath":"Abcd", "filePath":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":39, "result":123456789}

   // Assigns a resource to a layer. The resource is identified by a path build from signatures and separated by forward slashes 
   // (e.g. "Media/Folder/video.mov"). The layer is identified by a path separated by periods (e.g. "Timeline 1.Layer 1").
   null assignResourceToLayer(string resourcePath,string layerPath);
    => {"jsonrpc":"2.0", "id":40, "method":"Pixera.Compound.assignResourceToLayer", "params":{"resourcePath":"Abcd", "layerPath":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":40}

   // Refreshes a resource from file. The resource is identified by a path build from signatures and separated by forward slashes 
   // (e.g. "Media/Folder/video.mov").
   null refreshResource(string resourcePath);
    => {"jsonrpc":"2.0", "id":41, "method":"Pixera.Compound.refreshResource", "params":{"resourcePath":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":41}

   // Sets the transport mode of a layer: Play = 1, Pause = 2, Stop = 3.
   // The layer is identified by a path separated by periods (e.g. "Timeline 1.Layer 1").
   null setTransportModeOnLayer(string layerPath,int mode,boolean loop);
    => {"jsonrpc":"2.0", "id":42, "method":"Pixera.Compound.setTransportModeOnLayer", "params":{"layerPath":"Abcd", "mode":1, "loop":true}}
    <= {"jsonrpc":"2.0", "id":42}

   // Returns the transport mode of a layer: Play = 1, Pause = 2, Stop = 3.
   // The layer is identified by a path separated by periods (e.g. "Timeline 1.Layer 1").
   int getTransportModeOnLayer(string layerPath);
    => {"jsonrpc":"2.0", "id":43, "method":"Pixera.Compound.getTransportModeOnLayer", "params":{"layerPath":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":43, "result":1}

   // Returns the resource currently assigned to the layer.
   // The layer is identified by a path separated by periods (e.g. "Timeline 1.Layer 1").
   // The returned string is the path build from signatures and separated by forward slashes 
   // (e.g. "Media/Folder/video.mov").
   string getResourceAssignedToLayer(string layerPath);
    => {"jsonrpc":"2.0", "id":44, "method":"Pixera.Compound.getResourceAssignedToLayer", "params":{"layerPath":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":44, "result":"Abcd"}

   // Assign the resource with dmxfolder/dmxfile id to the clip at time in frames by layerpath
   null assignResourceToClipAtTimeByDmxId(string layerPath,int dmxFolderId,int dmxFileId,double time);
    => {"jsonrpc":"2.0", "id":45, "method":"Pixera.Compound.assignResourceToClipAtTimeByDmxId", "params":{"layerPath":"Abcd", "dmxFolderId":1, "dmxFileId":1, "time":1.0}}
    <= {"jsonrpc":"2.0", "id":45}

   // Assign the resource with dmxfolder/dmxfile id to the clip at hmsf time by layerpath
   null assignResourceToClipAtHMSFStringByDmxId(string layerPath,int dmxFolderId,int dmxFileId,string hmsf);
    => {"jsonrpc":"2.0", "id":46, "method":"Pixera.Compound.assignResourceToClipAtHMSFStringByDmxId", "params":{"layerPath":"Abcd", "dmxFolderId":1, "dmxFileId":1, "hmsf":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":46}

   // Assign the resource with dmxfolder/dmxfile id to the clip at h m s f by layerpath
   null assignResourceToClipAtHMSFByDmxId(string layerPath,int dmxFolderId,int dmxFileId,int h,int m,int s,int f);
    => {"jsonrpc":"2.0", "id":47, "method":"Pixera.Compound.assignResourceToClipAtHMSFByDmxId", "params":{"layerPath":"Abcd", "dmxFolderId":1, "dmxFileId":1, "h":1, "m":1, "s":1, "f":1}}
    <= {"jsonrpc":"2.0", "id":47}

   // Sets the current time of the timeline identified by name in frames.
   // Use getFpsOfTimeline() to relate the frames to seconds.
   // name: Name of timeline.
   // time: New time in frames.
   null setCurrentTimeOfTimeline(string name,int time);
    => {"jsonrpc":"2.0", "id":48, "method":"Pixera.Compound.setCurrentTimeOfTimeline", "params":{"name":"Abcd", "time":1}}
    <= {"jsonrpc":"2.0", "id":48}

   // Sets the current time of the timeline identified by name in seconds.
   // Use getFpsOfTimeline() to relate the frames to seconds.
   // name: Name of timeline.
   // time: New time in seconds.
   null setCurrentTimeOfTimelineInSeconds(string name,double time);
    => {"jsonrpc":"2.0", "id":49, "method":"Pixera.Compound.setCurrentTimeOfTimelineInSeconds", "params":{"name":"Abcd", "time":1.0}}
    <= {"jsonrpc":"2.0", "id":49}

   // Sets the current time in seconds and the applied playback mode of the timeline identified by name.
   // Use getFpsOfTimeline() to relate the frames to seconds.
   // name: Name of timeline.
   // time: New time in seconds.
   // mode: New playback mode (Play = 1, Pause = 2, Stop = 3).
   null setCurrentTimeAndTransportModeOfTimelineInSeconds(string name,double time,int mode);
    => {"jsonrpc":"2.0", "id":50, "method":"Pixera.Compound.setCurrentTimeAndTransportModeOfTimelineInSeconds", "params":{"name":"Abcd", "time":1.0, "mode":1}}
    <= {"jsonrpc":"2.0", "id":50}

   // Returns the frames per second of the timeline identified by name.
   // name: Name of timeline.
   double getFpsOfTimeline(string name);
    => {"jsonrpc":"2.0", "id":51, "method":"Pixera.Compound.getFpsOfTimeline", "params":{"name":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":51, "result":1.0}

   // Returns the current time in frames. Use getFpsOfTimeline() to relate the frames to seconds.
   int getCurrentTimeOfTimeline(string name);
    => {"jsonrpc":"2.0", "id":52, "method":"Pixera.Compound.getCurrentTimeOfTimeline", "params":{"name":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":52, "result":1}

   // Returns the current time in seconds.
   double getCurrentTimeOfTimelineInSeconds(string name);
    => {"jsonrpc":"2.0", "id":53, "method":"Pixera.Compound.getCurrentTimeOfTimelineInSeconds", "params":{"name":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":53, "result":1.0}

   // Returns the current time of the timeline identified by name as hours, minutes, seconds, frames string.
   // name: Name of timeline.
   string getCurrentHMSFOfTimeline(string name);
    => {"jsonrpc":"2.0", "id":54, "method":"Pixera.Compound.getCurrentHMSFOfTimeline", "params":{"name":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":54, "result":"Abcd"}

   // Returns the current countdown in frames. Use getFpsOfTimeline() to relate the frames to seconds.
   int getCurrentCountdownOfTimeline(string name);
    => {"jsonrpc":"2.0", "id":55, "method":"Pixera.Compound.getCurrentCountdownOfTimeline", "params":{"name":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":55, "result":1}

   // Returns the current countdown as a hours, minutes, seconds, frames string.
   string getCurrentCountdownHMSFOfTimeline(string name);
    => {"jsonrpc":"2.0", "id":56, "method":"Pixera.Compound.getCurrentCountdownHMSFOfTimeline", "params":{"name":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":56, "result":"Abcd"}

   // Blocks timeline updates in Pixera UI.
   // Use with caution. Should exclusively be used for performance optimization
   // when adding multiple objects (layer, clip, keys, ...) to timelines.
   // Do never forget to unblock.
   // doBlock: 'true' means start blocking and 'false' means unblock.
   // terminationDurationInMs: Default value is 10 sec. Duration until the blocking period is automatically terminated. We emphasize that if the default value is sufficient you should always use blockUiTimelineUpdates(false) for a controlled termination. Unit is milliseconds.
   null blockUiTimelineUpdates(boolean doBlock,optional<int> terminationDurationInMs);
    => {"jsonrpc":"2.0", "id":57, "method":"Pixera.Compound.blockUiTimelineUpdates", "params":{"doBlock":true, "terminationDurationInMs":val}}
    <= {"jsonrpc":"2.0", "id":57}
   null startOpacityAnimationOfTimeline(string name,boolean fadeIn,double fullFadeDuration);
    => {"jsonrpc":"2.0", "id":58, "method":"Pixera.Compound.startOpacityAnimationOfTimeline", "params":{"name":"Abcd", "fadeIn":true, "fullFadeDuration":1.0}}
    <= {"jsonrpc":"2.0", "id":58}

   // Creates a clip at the given time in frames and assigns the resource.
   // The layer is identified by a path separated by periods (e.g. "Timeline 1.Layer 1").
   // The resource is identified by a path build from signatures and separated by forward slashes (e.g. "Media/Folder/video.mov").
   null createClipOnLayerAtTimeWithResource(string layerPath,double time,string resourcePath);
    => {"jsonrpc":"2.0", "id":59, "method":"Pixera.Compound.createClipOnLayerAtTimeWithResource", "params":{"layerPath":"Abcd", "time":1.0, "resourcePath":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":59}

   // Removes the clip identified by the 0-based clipIndex on the layer.
   // The layer is identified by a path separated by periods (e.g. "Timeline 1.Layer 1").
   null removeClipOnLayerWithIndex(string layerPath,int clipIndex);
    => {"jsonrpc":"2.0", "id":60, "method":"Pixera.Compound.removeClipOnLayerWithIndex", "params":{"layerPath":"Abcd", "clipIndex":1}}
    <= {"jsonrpc":"2.0", "id":60}

   // Removes all clips on the layer.
   // The layer is identified by a path separated by periods (e.g. "Timeline 1.Layer 1").
   null removeAllClipsOnLayer(string layerPath);
    => {"jsonrpc":"2.0", "id":61, "method":"Pixera.Compound.removeAllClipsOnLayer", "params":{"layerPath":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":61}

   // Returns the clip duration in seconds identified by the 0-based clipIndex on the layer.
   // The layer is identified by a path separated by periods (e.g. "Timeline 1.Layer 1").
   double getClipDurationInSecondsWithIndex(string layerPath,int clipIndex);
    => {"jsonrpc":"2.0", "id":62, "method":"Pixera.Compound.getClipDurationInSecondsWithIndex", "params":{"layerPath":"Abcd", "clipIndex":1}}
    <= {"jsonrpc":"2.0", "id":62, "result":1.0}

   // Returns the clip duration in frames identified by the 0-based clipIndex on the layer.
   // The layer is identified by a path separated by periods (e.g. "Timeline 1.Layer 1").
   int getClipDurationInFramesWithIndex(string layerPath,int clipIndex);
    => {"jsonrpc":"2.0", "id":63, "method":"Pixera.Compound.getClipDurationInFramesWithIndex", "params":{"layerPath":"Abcd", "clipIndex":1}}
    <= {"jsonrpc":"2.0", "id":63, "result":1}

   // Returns the clip start time in seconds identified by the 0-based clipIndex on the layer.
   // The layer is identified by a path separated by periods (e.g. "Timeline 1.Layer 1").
   double getClipTimeInSecondsWithIndex(string layerPath,int clipIndex);
    => {"jsonrpc":"2.0", "id":64, "method":"Pixera.Compound.getClipTimeInSecondsWithIndex", "params":{"layerPath":"Abcd", "clipIndex":1}}
    <= {"jsonrpc":"2.0", "id":64, "result":1.0}

   // Returns the clip end time in seconds identified by the 0-based clipIndex on the layer.
   // The layer is identified by a path separated by periods (e.g. "Timeline 1.Layer 1").
   double getClipEndTimeInSecondsWithIndex(string layerPath,int clipIndex);
    => {"jsonrpc":"2.0", "id":65, "method":"Pixera.Compound.getClipEndTimeInSecondsWithIndex", "params":{"layerPath":"Abcd", "clipIndex":1}}
    <= {"jsonrpc":"2.0", "id":65, "result":1.0}

   // Returns the duration of the resource in seconds.
   // The resource is identified by a path build from signatures and separated by forward slashes (e.g. "Media/Folder/video.mov").
   double getResourceDurationInSeconds(string resourcePath);
    => {"jsonrpc":"2.0", "id":66, "method":"Pixera.Compound.getResourceDurationInSeconds", "params":{"resourcePath":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":66, "result":1.0}

   // Returns the current value of the parameter.
   // The parameter is identified by a path separated by periods (e.g. "Timeline 1.Layer 1.Opacity").
   double getParamValue(string path);
    => {"jsonrpc":"2.0", "id":67, "method":"Pixera.Compound.getParamValue", "params":{"path":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":67, "result":1.0}

   // Set timecode input for midi and artnet timecode.
   double setTimecodeInput(int hour,int minute,int second,int frame,double elapsedTime,boolean running,int freshMode,int stateToken,int format);
    => {"jsonrpc":"2.0", "id":68, "method":"Pixera.Compound.setTimecodeInput", "params":{"hour":1, "minute":1, "second":1, "frame":1, "elapsedTime":1.0, "running":true, "freshMode":1, "stateToken":1, "format":1}}
    <= {"jsonrpc":"2.0", "id":68, "result":1.0}

   //takeover all clients
   null takeOverAllClients();
    => {"jsonrpc":"2.0", "id":69, "method":"Pixera.Compound.takeOverAllClients"}
    <= {"jsonrpc":"2.0", "id":69}

   //mute all incomming smpte inputs
   null setPauseSmpteInput(boolean doPause);
    => {"jsonrpc":"2.0", "id":70, "method":"Pixera.Compound.setPauseSmpteInput", "params":{"doPause":true}}
    <= {"jsonrpc":"2.0", "id":70}
}

namespace Session
{
   null closeApp(boolean saveProject);
    => {"jsonrpc":"2.0", "id":71, "method":"Pixera.Session.closeApp", "params":{"saveProject":true}}
    <= {"jsonrpc":"2.0", "id":71}
   null loadProject(string path);
    => {"jsonrpc":"2.0", "id":72, "method":"Pixera.Session.loadProject", "params":{"path":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":72}
   null saveProject();
    => {"jsonrpc":"2.0", "id":73, "method":"Pixera.Session.saveProject"}
    <= {"jsonrpc":"2.0", "id":73}
   null saveProjectAs(string path);
    => {"jsonrpc":"2.0", "id":74, "method":"Pixera.Session.saveProjectAs", "params":{"path":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":74}
   string getProjectName();
    => {"jsonrpc":"2.0", "id":75, "method":"Pixera.Session.getProjectName"}
    <= {"jsonrpc":"2.0", "id":75, "result":"Abcd"}
   null setProjectName(string name);
    => {"jsonrpc":"2.0", "id":76, "method":"Pixera.Session.setProjectName", "params":{"name":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":76}
   string getProjectDirectory();
    => {"jsonrpc":"2.0", "id":77, "method":"Pixera.Session.getProjectDirectory"}
    <= {"jsonrpc":"2.0", "id":77, "result":"Abcd"}
   string getControlMultiUserSessionName();
    => {"jsonrpc":"2.0", "id":78, "method":"Pixera.Session.getControlMultiUserSessionName"}
    <= {"jsonrpc":"2.0", "id":78, "result":"Abcd"}

   // Shut down the local machine. There are three options for mode:
   // 1: Shut down.
   // 2: Shut down and turn off power (if supported).
   // 3: Shut down and reboot.
   // Default if no mode is set is 1.
   null shutdownSystem(optional<int> mode);
    => {"jsonrpc":"2.0", "id":79, "method":"Pixera.Session.shutdownSystem", "params":{"mode":val}}
    <= {"jsonrpc":"2.0", "id":79}
   string[] getLiveSystemIps();
    => {"jsonrpc":"2.0", "id":80, "method":"Pixera.Session.getLiveSystemIps"}
    <= {"jsonrpc":"2.0", "id":80, "result":[Efgh, ...]}
   string getLiveSystemState(string ip);
    => {"jsonrpc":"2.0", "id":81, "method":"Pixera.Session.getLiveSystemState", "params":{"ip":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":81, "result":"Abcd"}

   // This function is called in Pixera Control when the live system's state changes.
   null liveSystemStateChange(string ip,string state);
    => {"jsonrpc":"2.0", "id":82, "method":"Pixera.Session.liveSystemStateChange", "params":{"ip":"Abcd", "state":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":82}

   // Shut down the live system with the given IP. The mode options are the same as for shutdownSystem():
   // Default if no mode is set is 1.
   null shutdownLiveSystem(string ip,optional<int> mode);
    => {"jsonrpc":"2.0", "id":83, "method":"Pixera.Session.shutdownLiveSystem", "params":{"ip":"Abcd", "mode":val}}
    <= {"jsonrpc":"2.0", "id":83}

   // Wake up the live system that last had the given IP. Uses the MAC address that was last reported
   // for the IP.
   string wakeLiveSystem(string ip);
    => {"jsonrpc":"2.0", "id":84, "method":"Pixera.Session.wakeLiveSystem", "params":{"ip":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":84, "result":"Abcd"}

   // Returns the last MAC address associated with the live system with the given IP.
   string getLiveSystemMacAddress(string ip);
    => {"jsonrpc":"2.0", "id":85, "method":"Pixera.Session.getLiveSystemMacAddress", "params":{"ip":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":85, "result":"Abcd"}

   // Start live system.
   null startLiveSystem(string ip);
    => {"jsonrpc":"2.0", "id":86, "method":"Pixera.Session.startLiveSystem", "params":{"ip":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":86}

   // Start all live systems in mapping/live sub-tab.
   null startLiveSystems();
    => {"jsonrpc":"2.0", "id":87, "method":"Pixera.Session.startLiveSystems"}
    <= {"jsonrpc":"2.0", "id":87}

   // Stop live system.
   null stopLiveSystem(string ip);
    => {"jsonrpc":"2.0", "id":88, "method":"Pixera.Session.stopLiveSystem", "params":{"ip":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":88}

   // Stop all live systems in mapping/live sub-tab.
   null stopLiveSystems();
    => {"jsonrpc":"2.0", "id":89, "method":"Pixera.Session.stopLiveSystems"}
    <= {"jsonrpc":"2.0", "id":89}

   // Restart live system.
   null restartLiveSystem(string ip);
    => {"jsonrpc":"2.0", "id":90, "method":"Pixera.Session.restartLiveSystem", "params":{"ip":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":90}

   // Restart all live systems in mapping/live sub-tab.
   null restartLiveSystems();
    => {"jsonrpc":"2.0", "id":91, "method":"Pixera.Session.restartLiveSystems"}
    <= {"jsonrpc":"2.0", "id":91}

   // This action is run when remote heartbeat tracking detects a state change in the system.
   null remoteSystemStateChange(string ip,string state);
    => {"jsonrpc":"2.0", "id":92, "method":"Pixera.Session.remoteSystemStateChange", "params":{"ip":"Abcd", "state":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":92}
   string[] getRemoteSystemIps();
    => {"jsonrpc":"2.0", "id":93, "method":"Pixera.Session.getRemoteSystemIps"}
    <= {"jsonrpc":"2.0", "id":93, "result":[Efgh, ...]}
   string getRemoteSystemState(string ip);
    => {"jsonrpc":"2.0", "id":94, "method":"Pixera.Session.getRemoteSystemState", "params":{"ip":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":94, "result":"Abcd"}
   null setVideoStreamActiveState(string ip,string device,boolean isActive);
    => {"jsonrpc":"2.0", "id":95, "method":"Pixera.Session.setVideoStreamActiveState", "params":{"ip":"Abcd", "device":"Abcd", "isActive":true}}
    <= {"jsonrpc":"2.0", "id":95}
   boolean getVideoStreamActiveState(string ip,string device);
    => {"jsonrpc":"2.0", "id":96, "method":"Pixera.Session.getVideoStreamActiveState", "params":{"ip":"Abcd", "device":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":96, "result":true}
   string getDefaultClipDurationsAsJsonString();
    => {"jsonrpc":"2.0", "id":97, "method":"Pixera.Session.getDefaultClipDurationsAsJsonString"}
    <= {"jsonrpc":"2.0", "id":97, "result":"Abcd"}
}

namespace LiveSystems
{
   // Get the handles of the live systems.
   // This will also return handles of live systems that are no longer connected.
   handle[] getLiveSystems();
    => {"jsonrpc":"2.0", "id":98, "method":"Pixera.LiveSystems.getLiveSystems"}
    <= {"jsonrpc":"2.0", "id":98, "result":[123456789, ...]}

   // Called when the live system has become unavailable.
   null liveSystemNotAvailable(int reason,handle system);
    => {"jsonrpc":"2.0", "id":99, "method":"Pixera.LiveSystems.liveSystemNotAvailable", "params":{"reason":1, "system":123456789}}
    <= {"jsonrpc":"2.0", "id":99}
   handle[] getMultiUserMembers();
    => {"jsonrpc":"2.0", "id":100, "method":"Pixera.LiveSystems.getMultiUserMembers"}
    <= {"jsonrpc":"2.0", "id":100, "result":[123456789, ...]}
   handle[] getUsagePresets();
    => {"jsonrpc":"2.0", "id":101, "method":"Pixera.LiveSystems.getUsagePresets"}
    <= {"jsonrpc":"2.0", "id":101, "result":[123456789, ...]}

   class MultiUserMember
   {
      // Get hardware name of specified multi-user member.
      string getName();
       => {"jsonrpc":"2.0", "id":102, "method":"Pixera.LiveSystems.MultiUserMember.getName", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":102, "result":"Abcd"}

      // Get ip of specified multi-user member.
      string getIp();
       => {"jsonrpc":"2.0", "id":103, "method":"Pixera.LiveSystems.MultiUserMember.getIp", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":103, "result":"Abcd"}

      // Get a description of the state of the specified multi-user member.
      string getState();
       => {"jsonrpc":"2.0", "id":104, "method":"Pixera.LiveSystems.MultiUserMember.getState", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":104, "result":"Abcd"}
      string getPerformanceMonitoringValuesJson();
       => {"jsonrpc":"2.0", "id":105, "method":"Pixera.LiveSystems.MultiUserMember.getPerformanceMonitoringValuesJson", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":105, "result":"Abcd"}

      // Filter example: system,outputs,outputsIndividual,outputsTotal,unreal
      string getPerformanceMonitoringValuesJsonEx(string filter);
       => {"jsonrpc":"2.0", "id":106, "method":"Pixera.LiveSystems.MultiUserMember.getPerformanceMonitoringValuesJsonEx", "params":{"handle":123456789, "filter":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":106, "result":"Abcd"}
      null resetCumulativePerformanceMonitoringValues();
       => {"jsonrpc":"2.0", "id":107, "method":"Pixera.LiveSystems.MultiUserMember.resetCumulativePerformanceMonitoringValues", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":107}

      // Starts file distribution to the multi-user member of all files that are used in a timeline. If includeNotUsedYet is true then
      // all files that have not been used yet in any timeline are also distributed.
      null ensureFileDistribution(boolean includeNotUsedYet);
       => {"jsonrpc":"2.0", "id":108, "method":"Pixera.LiveSystems.MultiUserMember.ensureFileDistribution", "params":{"handle":123456789, "includeNotUsedYet":true}}
       <= {"jsonrpc":"2.0", "id":108}

      // Shut down the multi-user member's machine. There are three options for mode:
      // 1: Shut down.
      // 2: Shut down and turn off power (if supported).
      // 3: Shut down and reboot.
      null shutDown(int mode);
       => {"jsonrpc":"2.0", "id":109, "method":"Pixera.LiveSystems.MultiUserMember.shutDown", "params":{"handle":123456789, "mode":1}}
       <= {"jsonrpc":"2.0", "id":109}

      // Try to wake up specified multi-user member.
      string wakeUp();
       => {"jsonrpc":"2.0", "id":110, "method":"Pixera.LiveSystems.MultiUserMember.wakeUp", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":110, "result":"Abcd"}

      // Returns the MAC address of the specified multi-user member.
      string getMacAddress();
       => {"jsonrpc":"2.0", "id":111, "method":"Pixera.LiveSystems.MultiUserMember.getMacAddress", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":111, "result":"Abcd"}
      null resetEngine();
       => {"jsonrpc":"2.0", "id":112, "method":"Pixera.LiveSystems.MultiUserMember.resetEngine", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":112}
      null restartEngine();
       => {"jsonrpc":"2.0", "id":113, "method":"Pixera.LiveSystems.MultiUserMember.restartEngine", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":113}
      null startEngine();
       => {"jsonrpc":"2.0", "id":114, "method":"Pixera.LiveSystems.MultiUserMember.startEngine", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":114}
      null closeEngine();
       => {"jsonrpc":"2.0", "id":115, "method":"Pixera.LiveSystems.MultiUserMember.closeEngine", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":115}
      null triggerBackup(optional<bool> applyControlCommand);
       => {"jsonrpc":"2.0", "id":116, "method":"Pixera.LiveSystems.MultiUserMember.triggerBackup", "params":{"handle":123456789, "applyControlCommand":val}}
       <= {"jsonrpc":"2.0", "id":116}

      // Get a JSON description of the hardware structure of the specified multi-user member.
      string getStructureJson();
       => {"jsonrpc":"2.0", "id":117, "method":"Pixera.LiveSystems.MultiUserMember.getStructureJson", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":117, "result":"Abcd"}
   handle getInst(string instancePath);
    => {"jsonrpc":"2.0", "id":118, "method":"Pixera.LiveSystems.MultiUserMember.getInst", "params":{"instancePath":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":118, "result":123456789}
   }

   class LiveSystem
   {
      // Get hardware name of a specified live system.
      string getName();
       => {"jsonrpc":"2.0", "id":119, "method":"Pixera.LiveSystems.LiveSystem.getName", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":119, "result":"Abcd"}

      // Get ip of a specified live system.
      string getIp();
       => {"jsonrpc":"2.0", "id":120, "method":"Pixera.LiveSystems.LiveSystem.getIp", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":120, "result":"Abcd"}
      string getState();
       => {"jsonrpc":"2.0", "id":121, "method":"Pixera.LiveSystems.LiveSystem.getState", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":121, "result":"Abcd"}
      null setBackupRole(int role);
       => {"jsonrpc":"2.0", "id":122, "method":"Pixera.LiveSystems.LiveSystem.setBackupRole", "params":{"handle":123456789, "role":1}}
       <= {"jsonrpc":"2.0", "id":122}
      int getBackupRole();
       => {"jsonrpc":"2.0", "id":123, "method":"Pixera.LiveSystems.LiveSystem.getBackupRole", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":123, "result":1}
      string getPerformanceMonitoringValuesJson();
       => {"jsonrpc":"2.0", "id":124, "method":"Pixera.LiveSystems.LiveSystem.getPerformanceMonitoringValuesJson", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":124, "result":"Abcd"}

      // Filter example: system,outputs,outputsIndividual,outputsTotal,unreal
      string getPerformanceMonitoringValuesJsonEx(string filter);
       => {"jsonrpc":"2.0", "id":125, "method":"Pixera.LiveSystems.LiveSystem.getPerformanceMonitoringValuesJsonEx", "params":{"handle":123456789, "filter":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":125, "result":"Abcd"}
      null resetCumulativePerformanceMonitoringValues();
       => {"jsonrpc":"2.0", "id":126, "method":"Pixera.LiveSystems.LiveSystem.resetCumulativePerformanceMonitoringValues", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":126}
      null moveMappingsToOutputs(handle hdlSrc,string outputIdPathMapStr);
       => {"jsonrpc":"2.0", "id":127, "method":"Pixera.LiveSystems.LiveSystem.moveMappingsToOutputs", "params":{"handle":123456789, "hdlSrc":123456789, "outputIdPathMapStr":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":127}
      null setUsagePresetName(string name);
       => {"jsonrpc":"2.0", "id":128, "method":"Pixera.LiveSystems.LiveSystem.setUsagePresetName", "params":{"handle":123456789, "name":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":128}
      string getUsagePresetName();
       => {"jsonrpc":"2.0", "id":129, "method":"Pixera.LiveSystems.LiveSystem.getUsagePresetName", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":129, "result":"Abcd"}
      null updateUsagePreset();
       => {"jsonrpc":"2.0", "id":130, "method":"Pixera.LiveSystems.LiveSystem.updateUsagePreset", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":130}
      null saveUsagePresetAs(string name);
       => {"jsonrpc":"2.0", "id":131, "method":"Pixera.LiveSystems.LiveSystem.saveUsagePresetAs", "params":{"handle":123456789, "name":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":131}
      null applyUsagePreset(string name);
       => {"jsonrpc":"2.0", "id":132, "method":"Pixera.LiveSystems.LiveSystem.applyUsagePreset", "params":{"handle":123456789, "name":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":132}
      null exportUsagePreset(string path);
       => {"jsonrpc":"2.0", "id":133, "method":"Pixera.LiveSystems.LiveSystem.exportUsagePreset", "params":{"handle":123456789, "path":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":133}
      null importUsagePreset(string path);
       => {"jsonrpc":"2.0", "id":134, "method":"Pixera.LiveSystems.LiveSystem.importUsagePreset", "params":{"handle":123456789, "path":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":134}

      // Starts file distribution to the live system of all files that are used in a timeline. If includeNotUsedYet is true then
      // all files that have not been used yet in any timeline are also distributed.
      null ensureFileDistribution(boolean includeNotUsedYet);
       => {"jsonrpc":"2.0", "id":135, "method":"Pixera.LiveSystems.LiveSystem.ensureFileDistribution", "params":{"handle":123456789, "includeNotUsedYet":true}}
       <= {"jsonrpc":"2.0", "id":135}

      // Shut down the local machine. There are three options for mode:
      // 1: Shut down.
      // 2: Shut down and turn off power (if supported).
      // 3: Shut down and reboot.
      null shutDown(int mode);
       => {"jsonrpc":"2.0", "id":136, "method":"Pixera.LiveSystems.LiveSystem.shutDown", "params":{"handle":123456789, "mode":1}}
       <= {"jsonrpc":"2.0", "id":136}

      // Try to wake up specified live system.
      string wakeUp();
       => {"jsonrpc":"2.0", "id":137, "method":"Pixera.LiveSystems.LiveSystem.wakeUp", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":137, "result":"Abcd"}

      // Returns the MAC address of the specified Live System.
      string getMacAddress();
       => {"jsonrpc":"2.0", "id":138, "method":"Pixera.LiveSystems.LiveSystem.getMacAddress", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":138, "result":"Abcd"}

      // Returns handles to the graphics devices of a Live System.
      handle[] getGraphicsDevices();
       => {"jsonrpc":"2.0", "id":139, "method":"Pixera.LiveSystems.LiveSystem.getGraphicsDevices", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":139, "result":[123456789, ...]}

      // Returns handles to all enabled outputs.
      handle[] getEnabledOutputs();
       => {"jsonrpc":"2.0", "id":140, "method":"Pixera.LiveSystems.LiveSystem.getEnabledOutputs", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":140, "result":[123456789, ...]}

      // Returns handles of all outputs even if they are not physically connected.
      handle[] getAllOutputs();
       => {"jsonrpc":"2.0", "id":141, "method":"Pixera.LiveSystems.LiveSystem.getAllOutputs", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":141, "result":[123456789, ...]}

      // Returns handles to all video stream outputs (NDI, Art-Net, etc.).
      handle[] getVideoStreamOutputs();
       => {"jsonrpc":"2.0", "id":142, "method":"Pixera.LiveSystems.LiveSystem.getVideoStreamOutputs", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":142, "result":[123456789, ...]}
      null resetEngine();
       => {"jsonrpc":"2.0", "id":143, "method":"Pixera.LiveSystems.LiveSystem.resetEngine", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":143}
      null restartEngine();
       => {"jsonrpc":"2.0", "id":144, "method":"Pixera.LiveSystems.LiveSystem.restartEngine", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":144}
      null startEngine();
       => {"jsonrpc":"2.0", "id":145, "method":"Pixera.LiveSystems.LiveSystem.startEngine", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":145}
      null closeEngine();
       => {"jsonrpc":"2.0", "id":146, "method":"Pixera.LiveSystems.LiveSystem.closeEngine", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":146}
      null setAudioMasterVolume(int channel,double volume);
       => {"jsonrpc":"2.0", "id":147, "method":"Pixera.LiveSystems.LiveSystem.setAudioMasterVolume", "params":{"handle":123456789, "channel":1, "volume":1.0}}
       <= {"jsonrpc":"2.0", "id":147}
      double getAudioMasterVolume(int channel);
       => {"jsonrpc":"2.0", "id":148, "method":"Pixera.LiveSystems.LiveSystem.getAudioMasterVolume", "params":{"handle":123456789, "channel":1}}
       <= {"jsonrpc":"2.0", "id":148, "result":1.0}
      null setAudioMasterMute(int channel,boolean state);
       => {"jsonrpc":"2.0", "id":149, "method":"Pixera.LiveSystems.LiveSystem.setAudioMasterMute", "params":{"handle":123456789, "channel":1, "state":true}}
       <= {"jsonrpc":"2.0", "id":149}
      boolean getAudioMasterMute(int channel);
       => {"jsonrpc":"2.0", "id":150, "method":"Pixera.LiveSystems.LiveSystem.getAudioMasterMute", "params":{"handle":123456789, "channel":1}}
       <= {"jsonrpc":"2.0", "id":150, "result":true}
      null toggleAudioMasterMute(int channel);
       => {"jsonrpc":"2.0", "id":151, "method":"Pixera.LiveSystems.LiveSystem.toggleAudioMasterMute", "params":{"handle":123456789, "channel":1}}
       <= {"jsonrpc":"2.0", "id":151}
      null setAudioTimecodeInput(int channel,boolean state);
       => {"jsonrpc":"2.0", "id":152, "method":"Pixera.LiveSystems.LiveSystem.setAudioTimecodeInput", "params":{"handle":123456789, "channel":1, "state":true}}
       <= {"jsonrpc":"2.0", "id":152}
      null triggerBackup(optional<bool> applyControlCommand);
       => {"jsonrpc":"2.0", "id":153, "method":"Pixera.LiveSystems.LiveSystem.triggerBackup", "params":{"handle":123456789, "applyControlCommand":val}}
       <= {"jsonrpc":"2.0", "id":153}
      string getStructureJson();
       => {"jsonrpc":"2.0", "id":154, "method":"Pixera.LiveSystems.LiveSystem.getStructureJson", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":154, "result":"Abcd"}
   handle getInst(string instancePath);
    => {"jsonrpc":"2.0", "id":155, "method":"Pixera.LiveSystems.LiveSystem.getInst", "params":{"instancePath":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":155, "result":123456789}
      string getInstancePath();
       => {"jsonrpc":"2.0", "id":156, "method":"Pixera.LiveSystems.LiveSystem.getInstancePath", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":156, "result":"Abcd"}
   }

   class UsagePreset
   {
      string getName();
       => {"jsonrpc":"2.0", "id":157, "method":"Pixera.LiveSystems.UsagePreset.getName", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":157, "result":"Abcd"}
      null update();
       => {"jsonrpc":"2.0", "id":158, "method":"Pixera.LiveSystems.UsagePreset.update", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":158}
      null apply(string destinationIp);
       => {"jsonrpc":"2.0", "id":159, "method":"Pixera.LiveSystems.UsagePreset.apply", "params":{"handle":123456789, "destinationIp":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":159}
      null importFromFile(string path);
       => {"jsonrpc":"2.0", "id":160, "method":"Pixera.LiveSystems.UsagePreset.importFromFile", "params":{"handle":123456789, "path":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":160}
      null exportToFile(string path);
       => {"jsonrpc":"2.0", "id":161, "method":"Pixera.LiveSystems.UsagePreset.exportToFile", "params":{"handle":123456789, "path":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":161}
   handle getInst(string instancePath);
    => {"jsonrpc":"2.0", "id":162, "method":"Pixera.LiveSystems.UsagePreset.getInst", "params":{"instancePath":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":162, "result":123456789}
      string getInstancePath();
       => {"jsonrpc":"2.0", "id":163, "method":"Pixera.LiveSystems.UsagePreset.getInstancePath", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":163, "result":"Abcd"}
   }

   class GraphicsDevice
   {
      string getName();
       => {"jsonrpc":"2.0", "id":164, "method":"Pixera.LiveSystems.GraphicsDevice.getName", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":164, "result":"Abcd"}

      // Returns handles to all enabled outputs.
      handle[] getEnabledOutputs();
       => {"jsonrpc":"2.0", "id":165, "method":"Pixera.LiveSystems.GraphicsDevice.getEnabledOutputs", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":165, "result":[123456789, ...]}

      // Returns handles of all outputs even if they are not physically connected.
      handle[] getAllOutputs();
       => {"jsonrpc":"2.0", "id":166, "method":"Pixera.LiveSystems.GraphicsDevice.getAllOutputs", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":166, "result":[123456789, ...]}
   }

   class Output
   {
      string getName();
       => {"jsonrpc":"2.0", "id":167, "method":"Pixera.LiveSystems.Output.getName", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":167, "result":"Abcd"}

      // Set output active/inactive.
      null setActive(boolean active);
       => {"jsonrpc":"2.0", "id":168, "method":"Pixera.LiveSystems.Output.setActive", "params":{"handle":123456789, "active":true}}
       <= {"jsonrpc":"2.0", "id":168}

      // Return current active state of output.
      boolean getActive();
       => {"jsonrpc":"2.0", "id":169, "method":"Pixera.LiveSystems.Output.getActive", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":169, "result":true}

      // set output identify.
      null setIdentify(boolean state);
       => {"jsonrpc":"2.0", "id":170, "method":"Pixera.LiveSystems.Output.setIdentify", "params":{"handle":123456789, "state":true}}
       <= {"jsonrpc":"2.0", "id":170}

      // get output identify.
      boolean getIdentify();
       => {"jsonrpc":"2.0", "id":171, "method":"Pixera.LiveSystems.Output.getIdentify", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":171, "result":true}

      // Return assigned Screens.
      handle[] getAssignedScreens();
       => {"jsonrpc":"2.0", "id":172, "method":"Pixera.LiveSystems.Output.getAssignedScreens", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":172, "result":[123456789, ...]}

      // Return assigned Projectors.
      handle[] getAssignedProjectors();
       => {"jsonrpc":"2.0", "id":173, "method":"Pixera.LiveSystems.Output.getAssignedProjectors", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":173, "result":[123456789, ...]}
      boolean getEnabled();
       => {"jsonrpc":"2.0", "id":174, "method":"Pixera.LiveSystems.Output.getEnabled", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":174, "result":true}
      boolean getForPreview();
       => {"jsonrpc":"2.0", "id":175, "method":"Pixera.LiveSystems.Output.getForPreview", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":175, "result":true}

      // set outputs is aggregate
      null setIsOutputAggregate(boolean state);
       => {"jsonrpc":"2.0", "id":176, "method":"Pixera.LiveSystems.Output.setIsOutputAggregate", "params":{"handle":123456789, "state":true}}
       <= {"jsonrpc":"2.0", "id":176}

      // set outputs is aggregate
      boolean getIsOutputAggregate();
       => {"jsonrpc":"2.0", "id":177, "method":"Pixera.LiveSystems.Output.getIsOutputAggregate", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":177, "result":true}

      // set vertical and horizontal aggregate settings
      null setAggregateDims(int horizontalCount,int verticalCount);
       => {"jsonrpc":"2.0", "id":178, "method":"Pixera.LiveSystems.Output.setAggregateDims", "params":{"handle":123456789, "horizontalCount":1, "verticalCount":1}}
       <= {"jsonrpc":"2.0", "id":178}

      // get vertical and horizontal aggregate settings
      int[] getAggregateDims();
       => {"jsonrpc":"2.0", "id":179, "method":"Pixera.LiveSystems.Output.getAggregateDims", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":179, "result":[1, ...]}
   }

   class VideoStream
   {
      string getName();
       => {"jsonrpc":"2.0", "id":180, "method":"Pixera.LiveSystems.VideoStream.getName", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":180, "result":"Abcd"}

      // Set video stream active/inactive.
      null setActive(boolean active);
       => {"jsonrpc":"2.0", "id":181, "method":"Pixera.LiveSystems.VideoStream.setActive", "params":{"handle":123456789, "active":true}}
       <= {"jsonrpc":"2.0", "id":181}

      // Get active state of video stream.
      boolean getActive();
       => {"jsonrpc":"2.0", "id":182, "method":"Pixera.LiveSystems.VideoStream.getActive", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":182, "result":true}
   }
}

namespace Settings
{
namespace SettingsGeneral
{
   //If this is true, the values for transformation and scale, set in Node::setValues have to be in pixels.
   boolean getShowDimsInPixels();
    => {"jsonrpc":"2.0", "id":183, "method":"Pixera.Settings.SettingsGeneral.getShowDimsInPixels"}
    <= {"jsonrpc":"2.0", "id":183, "result":true}

   //If this is true, the nodes will be using size instead of scale.
   boolean getShowScaleAsSize();
    => {"jsonrpc":"2.0", "id":184, "method":"Pixera.Settings.SettingsGeneral.getShowScaleAsSize"}
    <= {"jsonrpc":"2.0", "id":184, "result":true}
   null setFadeToTimeDelay(int timeInMilliseconds);
    => {"jsonrpc":"2.0", "id":185, "method":"Pixera.Settings.SettingsGeneral.setFadeToTimeDelay", "params":{"timeInMilliseconds":1}}
    <= {"jsonrpc":"2.0", "id":185}
   int getFadeToTimeDelay();
    => {"jsonrpc":"2.0", "id":186, "method":"Pixera.Settings.SettingsGeneral.getFadeToTimeDelay"}
    <= {"jsonrpc":"2.0", "id":186, "result":1}
}

namespace SettingsTranscoding
{
   // Get Transcoding presets as a vector of Json-Strings
   // With the stucture:
   // Available container/codec strings:
   // vp9: mkv, mp4
   // H264: mp4
   // H265: mp4
   // HAP: mov
   // HAP Alpha: mov
   // HAP Q: mov
   // Image: png, tiff, dpx
   // 
   // Compression settings:
   // Lossless : 0
   // Low : 1
   // Medium : 2
   // High : 3
   // 
   // Hap compression settings:
   // None : 0
   // Snappy : 1
   // 
   // H264 Presets:
   // Default : 1
   // Slow : 2
   // Medium : 3
   // Fast : 4
   // Hp (High Performance): 5
   // Hq : 6
   // Bd : 7
   // Ll (Low latency) : 8
   // LlHq : 9
   // LlHp : 10
   // Lossless : 11
   // Lossless Hp : 12
   string[] getTranscodingPresets();
    => {"jsonrpc":"2.0", "id":187, "method":"Pixera.Settings.SettingsTranscoding.getTranscodingPresets"}
    <= {"jsonrpc":"2.0", "id":187, "result":[Efgh, ...]}

   // Search for preset with given name if found it will be set to the given setup,
   // if not a new one will be created.
   null addOrChangeTranscodingPreset(string preset);
    => {"jsonrpc":"2.0", "id":188, "method":"Pixera.Settings.SettingsTranscoding.addOrChangeTranscodingPreset", "params":{"preset":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":188}
}

}

namespace Screens
{
   // Screen name as shown in the inspector.
   handle getScreenWithName(string name);
    => {"jsonrpc":"2.0", "id":189, "method":"Pixera.Screens.getScreenWithName", "params":{"name":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":189, "result":123456789}

   // This function was introduced for test purposes, is not typical of the API
   // and is likely to be removed soon. Do not use it in shipping products!
   // The function sets the position of the screen with the given name.
   // The recommended way of doing this is to first use getScreenWithName(.) and
   // then Screen.setPosition(.).
   null setNamedScreenPosition(string name,optional<double> xPos,optional<double> yPos,optional<double> zPos);
    => {"jsonrpc":"2.0", "id":190, "method":"Pixera.Screens.setNamedScreenPosition", "params":{"name":"Abcd", "xPos":val, "yPos":val, "zPos":val}}
    <= {"jsonrpc":"2.0", "id":190}

   // Returns handles to all screens currently used in the Screens tab.
   handle[] getScreens();
    => {"jsonrpc":"2.0", "id":191, "method":"Pixera.Screens.getScreens"}
    <= {"jsonrpc":"2.0", "id":191, "result":[123456789, ...]}
   string[] getScreenNames();
    => {"jsonrpc":"2.0", "id":192, "method":"Pixera.Screens.getScreenNames"}
    <= {"jsonrpc":"2.0", "id":192, "result":[Efgh, ...]}
   handle getFirstTimelineWithHomeScreen(string screenName);
    => {"jsonrpc":"2.0", "id":193, "method":"Pixera.Screens.getFirstTimelineWithHomeScreen", "params":{"screenName":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":193, "result":123456789}

   // Returns handles to all studio cameras currently used in the Screens tab.
   handle[] getStudioCameras();
    => {"jsonrpc":"2.0", "id":194, "method":"Pixera.Screens.getStudioCameras"}
    <= {"jsonrpc":"2.0", "id":194, "result":[123456789, ...]}

   struct ScreenPosValues
   {
      double x;
      double y;
      double z;
   }

   class Screen
   {
      // Returns an id based on the handle. This is currently necessary in some situations
      // because some API implementations can not yet consume handles as parameters. 
      double getId();
       => {"jsonrpc":"2.0", "id":195, "method":"Pixera.Screens.Screen.getId", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":195, "result":1.0}
      string getName();
       => {"jsonrpc":"2.0", "id":196, "method":"Pixera.Screens.Screen.getName", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":196, "result":"Abcd"}

      // Sets the position in meters.
      boolean setPosition(optional<double> xPos,optional<double> yPos,optional<double> zPos);
       => {"jsonrpc":"2.0", "id":197, "method":"Pixera.Screens.Screen.setPosition", "params":{"handle":123456789, "xPos":val, "yPos":val, "zPos":val}}
       <= {"jsonrpc":"2.0", "id":197, "result":true}

      // Returns the position in meters.
      null getPosition();
       => {"jsonrpc":"2.0", "id":198, "method":"Pixera.Screens.Screen.getPosition", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":198, "result":{"x":1.0, "y":1.0, "z":1.0}}

      // Sets the rotation in degrees.
      boolean setRotation(optional<double> xRot,optional<double> yRot,optional<double> zRot);
       => {"jsonrpc":"2.0", "id":199, "method":"Pixera.Screens.Screen.setRotation", "params":{"handle":123456789, "xRot":val, "yRot":val, "zRot":val}}
       <= {"jsonrpc":"2.0", "id":199, "result":true}

      // Returns the Rotation in degrees.
      null getRotation();
       => {"jsonrpc":"2.0", "id":200, "method":"Pixera.Screens.Screen.getRotation", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":200, "result":{"x":1.0, "y":1.0, "z":1.0}}

      // Scales the screen proportionally (a value of 1.0 leaves the size unchanged). 
      boolean setScale(optional<double> xScale,optional<double> yScale,optional<double> zScale);
       => {"jsonrpc":"2.0", "id":201, "method":"Pixera.Screens.Screen.setScale", "params":{"handle":123456789, "xScale":val, "yScale":val, "zScale":val}}
       <= {"jsonrpc":"2.0", "id":201, "result":true}

      // Returns the Scale.
      null getScale();
       => {"jsonrpc":"2.0", "id":202, "method":"Pixera.Screens.Screen.getScale", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":202, "result":{"x":1.0, "y":1.0, "z":1.0}}

      // Sets position and rotation in one API call.
      boolean setPosRot(optional<double> xPos,optional<double> yPos,optional<double> zPos,optional<double> xRot,optional<double> yRot,optional<double> zRot);
       => {"jsonrpc":"2.0", "id":203, "method":"Pixera.Screens.Screen.setPosRot", "params":{"handle":123456789, "xPos":val, "yPos":val, "zPos":val, "xRot":val, "yRot":val, "zRot":val}}
       <= {"jsonrpc":"2.0", "id":203, "result":true}

      // Sets position, rotation and the perspective position for the first screen group in one API call.
      boolean setPosRotAndPerspectivePos(optional<double> xPos,optional<double> yPos,optional<double> zPos,optional<double> xRot,optional<double> yRot,optional<double> zRot,optional<double> perspXPos,optional<double> perspYPos,optional<double> perspZPos);
       => {"jsonrpc":"2.0", "id":204, "method":"Pixera.Screens.Screen.setPosRotAndPerspectivePos", "params":{"handle":123456789, "xPos":val, "yPos":val, "zPos":val, "xRot":val, "yRot":val, "zRot":val, "perspXPos":val, "perspYPos":val, "perspZPos":val}}
       <= {"jsonrpc":"2.0", "id":204, "result":true}

      // Sets position, rotation and scale in one API call.
      boolean setPosRotScale(optional<double> xPos,optional<double> yPos,optional<double> zPos,optional<double> xRot,optional<double> yRot,optional<double> zRot,optional<double> xScale,optional<double> yScale,optional<double> zScale);
       => {"jsonrpc":"2.0", "id":205, "method":"Pixera.Screens.Screen.setPosRotScale", "params":{"handle":123456789, "xPos":val, "yPos":val, "zPos":val, "xRot":val, "yRot":val, "zRot":val, "xScale":val, "yScale":val, "zScale":val}}
       <= {"jsonrpc":"2.0", "id":205, "result":true}
      handle getPersepective();
       => {"jsonrpc":"2.0", "id":206, "method":"Pixera.Screens.Screen.getPersepective", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":206, "result":123456789}

      // Snap the Perspective to Screen
      // 0 : Snap Mode to Bounding Box
      // 1 : Snap Mode to UV Coords
      // 2 : Snap Mode to Vertices
      // 3 : Snap Mode to Bounding Box in View
      null snapPerspectiveCornersToScreen(int mode);
       => {"jsonrpc":"2.0", "id":207, "method":"Pixera.Screens.Screen.snapPerspectiveCornersToScreen", "params":{"handle":123456789, "mode":1}}
       <= {"jsonrpc":"2.0", "id":207}

      // Sets the position of the perspective in meters.
      boolean setPerspectivePosition(optional<double> xPos,optional<double> yPos,optional<double> zPos);
       => {"jsonrpc":"2.0", "id":208, "method":"Pixera.Screens.Screen.setPerspectivePosition", "params":{"handle":123456789, "xPos":val, "yPos":val, "zPos":val}}
       <= {"jsonrpc":"2.0", "id":208, "result":true}

      // Sets the position of the perspective in meters and moves the look-at point so that the
      // relationship between eye and look-at point is maintained. Look-at point will not be moved
      // if generalized perspective projection is being used.
      boolean setPerspectivePositionWithLookAt(optional<double> xPos,optional<double> yPos,optional<double> zPos);
       => {"jsonrpc":"2.0", "id":209, "method":"Pixera.Screens.Screen.setPerspectivePositionWithLookAt", "params":{"handle":123456789, "xPos":val, "yPos":val, "zPos":val}}
       <= {"jsonrpc":"2.0", "id":209, "result":true}

      // Returns the position of the perspective in meters.
      null getPerspectivePosition();
       => {"jsonrpc":"2.0", "id":210, "method":"Pixera.Screens.Screen.getPerspectivePosition", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":210, "result":{"x":1.0, "y":1.0, "z":1.0}}

      // Sets the rotation around the view axis of the screen's perspective in degrees.
      boolean setPerspectiveRotation(optional<double> xRot,optional<double> yRot,optional<double> zRot);
       => {"jsonrpc":"2.0", "id":211, "method":"Pixera.Screens.Screen.setPerspectiveRotation", "params":{"handle":123456789, "xRot":val, "yRot":val, "zRot":val}}
       <= {"jsonrpc":"2.0", "id":211, "result":true}

      // Returns the rotation around the view axis of the screen's perspective in degrees.
      null getPerspectiveRotation();
       => {"jsonrpc":"2.0", "id":212, "method":"Pixera.Screens.Screen.getPerspectiveRotation", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":212, "result":{"x":1.0, "y":1.0, "z":1.0}}

      // This method is deprecated. Please use setPerspectivePosition(.) instead.
      boolean setCameraPosition(optional<double> xPos,optional<double> yPos,optional<double> zPos);
       => {"jsonrpc":"2.0", "id":213, "method":"Pixera.Screens.Screen.setCameraPosition", "params":{"handle":123456789, "xPos":val, "yPos":val, "zPos":val}}
       <= {"jsonrpc":"2.0", "id":213, "result":true}

      // This method is deprecated. Please use setPerspectivePositionWithLookAt(.) instead.
      boolean setCameraPositionWithLookAt(optional<double> xPos,optional<double> yPos,optional<double> zPos);
       => {"jsonrpc":"2.0", "id":214, "method":"Pixera.Screens.Screen.setCameraPositionWithLookAt", "params":{"handle":123456789, "xPos":val, "yPos":val, "zPos":val}}
       <= {"jsonrpc":"2.0", "id":214, "result":true}

      // This method is deprecated. Please use getPerspectivePosition(.) instead.
      null getCameraPosition();
       => {"jsonrpc":"2.0", "id":215, "method":"Pixera.Screens.Screen.getCameraPosition", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":215, "result":{"x":1.0, "y":1.0, "z":1.0}}

      // This method is deprecated. Please use setPerspectiveRotation(.) instead.
      boolean setCameraRotation(optional<double> xRot,optional<double> yRot,optional<double> zRot);
       => {"jsonrpc":"2.0", "id":216, "method":"Pixera.Screens.Screen.setCameraRotation", "params":{"handle":123456789, "xRot":val, "yRot":val, "zRot":val}}
       <= {"jsonrpc":"2.0", "id":216, "result":true}

      // This method is deprecated. Please use getPerspectiveRotation(.) instead.
      null getCameraRotation();
       => {"jsonrpc":"2.0", "id":217, "method":"Pixera.Screens.Screen.getCameraRotation", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":217, "result":{"x":1.0, "y":1.0, "z":1.0}}

      // Sets the frustum base of the screen's perspective in pixels. The frustum base is positioned in the X/Y plane of the content compositing
      // space so that its center is at the position given by the x and y parameters. The origin the position relates to is that of the screen given
      // by originScreenId  (use Screen.getId() to access this id or pass a handle to the origin screen). This makes it possible to relate
      // multiple perspective pixel positions  to the same origin.
      // The width and height of the frustum base are set to pixel dimensions as given by the width and height parameters.
      // The rotation parameter rotates the frustum base around the Z axis the given number of degrees.
      null setContentSamplingFrustumBase(double x,double y,double width,double height,double rotation,double originScreenId);
       => {"jsonrpc":"2.0", "id":218, "method":"Pixera.Screens.Screen.setContentSamplingFrustumBase", "params":{"handle":123456789, "x":1.0, "y":1.0, "width":1.0, "height":1.0, "rotation":1.0, "originScreenId":1.0}}
       <= {"jsonrpc":"2.0", "id":218}

      // Launches a calibration tool for the screen. The mode and diff strings 
      // depend on the tool. If they are left empty appropriate defaults will be used.
      // mode options:
      // "newCalib": Launches "New Calibration" dialog.
      // "autoRecalib": Launches re-calibration without user interaction. Dialog is closed automatically afterwards.
      // diff options:
      // "vioso"
      null runCalibration(string mode,string diff);
       => {"jsonrpc":"2.0", "id":219, "method":"Pixera.Screens.Screen.runCalibration", "params":{"handle":123456789, "mode":"Abcd", "diff":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":219}

      // Relaunches a calibration tool for the screen for further editing. The diff string
      // depends on the tool. If it is left empty an appropriate default will be used.
      null editCalibration(string diff);
       => {"jsonrpc":"2.0", "id":220, "method":"Pixera.Screens.Screen.editCalibration", "params":{"handle":123456789, "diff":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":220}

      // Resets a warp that originated with a calibration tool. The diff string depends
      // on the tool. If it is empty an appropriate default will be used.
      null resetWarpFile(string diff);
       => {"jsonrpc":"2.0", "id":221, "method":"Pixera.Screens.Screen.resetWarpFile", "params":{"handle":123456789, "diff":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":221}

      // Loads the warp file at the specified path for the screen.
      null loadWarpFile(string filePath);
       => {"jsonrpc":"2.0", "id":222, "method":"Pixera.Screens.Screen.loadWarpFile", "params":{"handle":123456789, "filePath":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":222}

      // Like loadWarpFile() except diff string can be used to control the format. Use "mpcdi"
      // to load MPCDI files.
      null loadWarpFileWithDiff(string filePath,string diff);
       => {"jsonrpc":"2.0", "id":223, "method":"Pixera.Screens.Screen.loadWarpFileWithDiff", "params":{"handle":123456789, "filePath":"Abcd", "diff":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":223}

      // Adds the warp file at the specified path to those loaded for the screen.
      null addWarpFile(string filePath);
       => {"jsonrpc":"2.0", "id":224, "method":"Pixera.Screens.Screen.addWarpFile", "params":{"handle":123456789, "filePath":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":224}

      // Like loadWarpFile() except diff string can be used to control the format. Use "mpcdi"
      // to add MPCDI files.
      null addWarpFileWithDiff(string filePath,string diff);
       => {"jsonrpc":"2.0", "id":225, "method":"Pixera.Screens.Screen.addWarpFileWithDiff", "params":{"handle":123456789, "filePath":"Abcd", "diff":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":225}
      null loadColorCalibration(string calibrationName);
       => {"jsonrpc":"2.0", "id":226, "method":"Pixera.Screens.Screen.loadColorCalibration", "params":{"handle":123456789, "calibrationName":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":226}
      null runColorCalibration();
       => {"jsonrpc":"2.0", "id":227, "method":"Pixera.Screens.Screen.runColorCalibration", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":227}

      // Sets the screen visibility in the workspace.
      null setIsVisible(boolean isVisible);
       => {"jsonrpc":"2.0", "id":228, "method":"Pixera.Screens.Screen.setIsVisible", "params":{"handle":123456789, "isVisible":true}}
       <= {"jsonrpc":"2.0", "id":228}

      // Get the screen visibility in the workspace.
      boolean getIsVisible();
       => {"jsonrpc":"2.0", "id":229, "method":"Pixera.Screens.Screen.getIsVisible", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":229, "result":true}

      // Sets if a screen can be used as a projection surface. 
      null setIsProjectable(boolean isProjectable);
       => {"jsonrpc":"2.0", "id":230, "method":"Pixera.Screens.Screen.setIsProjectable", "params":{"handle":123456789, "isProjectable":true}}
       <= {"jsonrpc":"2.0", "id":230}

      // Get if the screen can be used as a projection surface.
      boolean getIsProjectable();
       => {"jsonrpc":"2.0", "id":231, "method":"Pixera.Screens.Screen.getIsProjectable", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":231, "result":true}

      // Triggers a manual update of the mappings between this screen and the projectors. 
      null triggerRefreshMapping();
       => {"jsonrpc":"2.0", "id":232, "method":"Pixera.Screens.Screen.triggerRefreshMapping", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":232}

      // Reset all color correction
      null resetAllColorCorrections();
       => {"jsonrpc":"2.0", "id":233, "method":"Pixera.Screens.Screen.resetAllColorCorrections", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":233}

      //Set ColorCorrection Value by Path
      null setColorCorrectionWithPath(string path,float value);
       => {"jsonrpc":"2.0", "id":234, "method":"Pixera.Screens.Screen.setColorCorrectionWithPath", "params":{"handle":123456789, "path":"Abcd", "value":1.0}}
       <= {"jsonrpc":"2.0", "id":234}

      //Get ColorCorrection Value by Path
      float getColorCorrectionWithPath(string path);
       => {"jsonrpc":"2.0", "id":235, "method":"Pixera.Screens.Screen.getColorCorrectionWithPath", "params":{"handle":123456789, "path":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":235, "result":1.0}

      //Set colorcorrection with jsonstring
      null setColorCorrectionAsJsonString(string colorCorrection);
       => {"jsonrpc":"2.0", "id":236, "method":"Pixera.Screens.Screen.setColorCorrectionAsJsonString", "params":{"handle":123456789, "colorCorrection":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":236}

      //Get colorcorrection as jsonstring
      string getColorCorrectionAsJsonString();
       => {"jsonrpc":"2.0", "id":237, "method":"Pixera.Screens.Screen.getColorCorrectionAsJsonString", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":237, "result":"Abcd"}

      //get outputs
      handle[] getOutput();
       => {"jsonrpc":"2.0", "id":238, "method":"Pixera.Screens.Screen.getOutput", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":238, "result":[123456789, ...]}

      // Set the active state of a active screen Blackout. 
      null setBlackout(boolean isActive);
       => {"jsonrpc":"2.0", "id":239, "method":"Pixera.Screens.Screen.setBlackout", "params":{"handle":123456789, "isActive":true}}
       <= {"jsonrpc":"2.0", "id":239}

      // Get the active state of a active screen blackout. 
      boolean getBlackout();
       => {"jsonrpc":"2.0", "id":240, "method":"Pixera.Screens.Screen.getBlackout", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":240, "result":true}
   handle getInst(string instancePath);
    => {"jsonrpc":"2.0", "id":241, "method":"Pixera.Screens.Screen.getInst", "params":{"instancePath":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":241, "result":123456789}
   handle getHandleFromInstancePath(string instancePath);
    => {"jsonrpc":"2.0", "id":242, "method":"Pixera.Screens.Screen.getHandleFromInstancePath", "params":{"instancePath":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":242, "result":123456789}
      string getInstancePath();
       => {"jsonrpc":"2.0", "id":243, "method":"Pixera.Screens.Screen.getInstancePath", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":243, "result":"Abcd"}
   }

   class StudioCamera
   {
      string getName();
       => {"jsonrpc":"2.0", "id":244, "method":"Pixera.Screens.StudioCamera.getName", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":244, "result":"Abcd"}

      // Sets the position in meters.
      null setPosition(optional<double> xPos,optional<double> yPos,optional<double> zPos);
       => {"jsonrpc":"2.0", "id":245, "method":"Pixera.Screens.StudioCamera.setPosition", "params":{"handle":123456789, "xPos":val, "yPos":val, "zPos":val}}
       <= {"jsonrpc":"2.0", "id":245}

      // Returns the position in meters.
      double[] getPosition(double xPos,double yPos,double zPos);
       => {"jsonrpc":"2.0", "id":246, "method":"Pixera.Screens.StudioCamera.getPosition", "params":{"handle":123456789, "xPos":1.0, "yPos":1.0, "zPos":1.0}}
       <= {"jsonrpc":"2.0", "id":246, "result":[1.0, ...]}

      // Sets rotation degrees.
      null setRotation(optional<double> xRot,optional<double> yRot,optional<double> zRot);
       => {"jsonrpc":"2.0", "id":247, "method":"Pixera.Screens.StudioCamera.setRotation", "params":{"handle":123456789, "xRot":val, "yRot":val, "zRot":val}}
       <= {"jsonrpc":"2.0", "id":247}

      // Returns the rotation in degrees.
      double[] getRotation(double xPos,double yPos,double zPos);
       => {"jsonrpc":"2.0", "id":248, "method":"Pixera.Screens.StudioCamera.getRotation", "params":{"handle":123456789, "xPos":1.0, "yPos":1.0, "zPos":1.0}}
       <= {"jsonrpc":"2.0", "id":248, "result":[1.0, ...]}

      // Sets the position in meters, rotation and fov in degrees.
      null setTransformation(optional<double> xPos,optional<double> yPos,optional<double> zPos,optional<double> xRot,optional<double> yRot,optional<double> zRot,optional<double> fov,optional<double> aspectRatio);
       => {"jsonrpc":"2.0", "id":249, "method":"Pixera.Screens.StudioCamera.setTransformation", "params":{"handle":123456789, "xPos":val, "yPos":val, "zPos":val, "xRot":val, "yRot":val, "zRot":val, "fov":val, "aspectRatio":val}}
       <= {"jsonrpc":"2.0", "id":249}

      // Sets the position in meters, rotation and fov in degrees, centerX, centerX and panelWidth in millimeters.
      null setTransformationAndLensProps(double xPos,double yPos,double zPos,double xRot,double yRot,double zRot,double fov,double aspectRatio,double nearClip,double farClip,double aperture,double focus,double iris,double k1,double k2,double centerX,double centerY,double panelWidth);
       => {"jsonrpc":"2.0", "id":250, "method":"Pixera.Screens.StudioCamera.setTransformationAndLensProps", "params":{"handle":123456789, "xPos":1.0, "yPos":1.0, "zPos":1.0, "xRot":1.0, "yRot":1.0, "zRot":1.0, "fov":1.0, "aspectRatio":1.0, "nearClip":1.0, "farClip":1.0, "aperture":1.0, "focus":1.0, "iris":1.0, "k1":1.0, "k2":1.0, "centerX":1.0, "centerY":1.0, "panelWidth":1.0}}
       <= {"jsonrpc":"2.0", "id":250}

      // Sets the position in meters, rotation and fov in degrees, centerX, centerX and panelWidth in millimeters.
      null setTransformationAndLensPropsExt(double xPos,double yPos,double zPos,double xRot,double yRot,double zRot,double fov,double aspectRatio,double nearClip,double farClip,double aperture,double focus,double focalDistance,double zoom,double iris,double k1,double k2,double k3,double p1,double p2,double centerX,double centerY,double panelWidth,double overscan);
       => {"jsonrpc":"2.0", "id":251, "method":"Pixera.Screens.StudioCamera.setTransformationAndLensPropsExt", "params":{"handle":123456789, "xPos":1.0, "yPos":1.0, "zPos":1.0, "xRot":1.0, "yRot":1.0, "zRot":1.0, "fov":1.0, "aspectRatio":1.0, "nearClip":1.0, "farClip":1.0, "aperture":1.0, "focus":1.0, "focalDistance":1.0, "zoom":1.0, "iris":1.0, "k1":1.0, "k2":1.0, "k3":1.0, "p1":1.0, "p2":1.0, "centerX":1.0, "centerY":1.0, "panelWidth":1.0, "overscan":1.0}}
       <= {"jsonrpc":"2.0", "id":251}

      // Set the tracking input pause.
      null setTrackingInputPause(boolean pause);
       => {"jsonrpc":"2.0", "id":252, "method":"Pixera.Screens.StudioCamera.setTrackingInputPause", "params":{"handle":123456789, "pause":true}}
       <= {"jsonrpc":"2.0", "id":252}

      // Get the tracking input pause.
      boolean getTrackingInputPause();
       => {"jsonrpc":"2.0", "id":253, "method":"Pixera.Screens.StudioCamera.getTrackingInputPause", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":253, "result":true}

      // Set the tracking input position pause.
      null setUsePositionPropertiesFromTracking(boolean pause);
       => {"jsonrpc":"2.0", "id":254, "method":"Pixera.Screens.StudioCamera.setUsePositionPropertiesFromTracking", "params":{"handle":123456789, "pause":true}}
       <= {"jsonrpc":"2.0", "id":254}

      // Get the tracking input position.
      boolean getUsePositionPropertiesFromTracking();
       => {"jsonrpc":"2.0", "id":255, "method":"Pixera.Screens.StudioCamera.getUsePositionPropertiesFromTracking", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":255, "result":true}

      // Set the tracking input rotation pause.
      null setUseRotationPropertiesFromTracking(boolean pause);
       => {"jsonrpc":"2.0", "id":256, "method":"Pixera.Screens.StudioCamera.setUseRotationPropertiesFromTracking", "params":{"handle":123456789, "pause":true}}
       <= {"jsonrpc":"2.0", "id":256}

      // Get the tracking input rotation pause.
      boolean getUseRotationPropertiesFromTracking();
       => {"jsonrpc":"2.0", "id":257, "method":"Pixera.Screens.StudioCamera.getUseRotationPropertiesFromTracking", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":257, "result":true}
   handle getInst(string instancePath);
    => {"jsonrpc":"2.0", "id":258, "method":"Pixera.Screens.StudioCamera.getInst", "params":{"instancePath":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":258, "result":123456789}
   handle getHandleFromInstancePath(string instancePath);
    => {"jsonrpc":"2.0", "id":259, "method":"Pixera.Screens.StudioCamera.getHandleFromInstancePath", "params":{"instancePath":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":259, "result":123456789}
      string getInstancePath();
       => {"jsonrpc":"2.0", "id":260, "method":"Pixera.Screens.StudioCamera.getInstancePath", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":260, "result":"Abcd"}
   }

   class Perspective
   {
      string getName();
       => {"jsonrpc":"2.0", "id":261, "method":"Pixera.Screens.Perspective.getName", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":261, "result":"Abcd"}

      // Sets the position in meters, rotation and fov in degrees. The look at point is not locked by default.
      null setTransformation(optional<double> xPos,optional<double> yPos,optional<double> zPos,optional<double> xRot,optional<double> yRot,optional<double> zRot,optional<double> fov,optional<double> aspectRatio,optional<bool> lockLookAtPt);
       => {"jsonrpc":"2.0", "id":262, "method":"Pixera.Screens.Perspective.setTransformation", "params":{"handle":123456789, "xPos":val, "yPos":val, "zPos":val, "xRot":val, "yRot":val, "zRot":val, "fov":val, "aspectRatio":val, "lockLookAtPt":val}}
       <= {"jsonrpc":"2.0", "id":262}
   handle getInst(string instancePath);
    => {"jsonrpc":"2.0", "id":263, "method":"Pixera.Screens.Perspective.getInst", "params":{"instancePath":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":263, "result":123456789}
   handle getHandleFromInstancePath(string instancePath);
    => {"jsonrpc":"2.0", "id":264, "method":"Pixera.Screens.Perspective.getHandleFromInstancePath", "params":{"instancePath":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":264, "result":123456789}
      string getInstancePath();
       => {"jsonrpc":"2.0", "id":265, "method":"Pixera.Screens.Perspective.getInstancePath", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":265, "result":"Abcd"}
   }
}

namespace Projectors
{
   // Projector name as shown in the inspector.
   handle getProjectorWithName(string name);
    => {"jsonrpc":"2.0", "id":266, "method":"Pixera.Projectors.getProjectorWithName", "params":{"name":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":266, "result":123456789}

   // Returns handles to all screens currently used in the Mapping tab.
   handle[] getProjectors();
    => {"jsonrpc":"2.0", "id":267, "method":"Pixera.Projectors.getProjectors"}
    <= {"jsonrpc":"2.0", "id":267, "result":[123456789, ...]}
   string[] getProjectorNames();
    => {"jsonrpc":"2.0", "id":268, "method":"Pixera.Projectors.getProjectorNames"}
    <= {"jsonrpc":"2.0", "id":268, "result":[Efgh, ...]}

   struct ProjectorPosValues
   {
      double x;
      double y;
      double z;
   }

   class Projector
   {
      // The position units are as in the inspector, i.e. meters.
      null getPosition();
       => {"jsonrpc":"2.0", "id":269, "method":"Pixera.Projectors.Projector.getPosition", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":269, "result":{"x":1.0, "y":1.0, "z":1.0}}

      // The position units are as in the inspector, i.e. meters.
      boolean setPosition(optional<double> xPos,optional<double> yPos,optional<double> zPos);
       => {"jsonrpc":"2.0", "id":270, "method":"Pixera.Projectors.Projector.setPosition", "params":{"handle":123456789, "xPos":val, "yPos":val, "zPos":val}}
       <= {"jsonrpc":"2.0", "id":270, "result":true}

      // Get rotation of projector.
      null getRotation();
       => {"jsonrpc":"2.0", "id":271, "method":"Pixera.Projectors.Projector.getRotation", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":271, "result":{"x":1.0, "y":1.0, "z":1.0}}

      // Set rotation of projector.
      boolean setRotation(optional<double> xRot,optional<double> yRot,optional<double> zRot);
       => {"jsonrpc":"2.0", "id":272, "method":"Pixera.Projectors.Projector.setRotation", "params":{"handle":123456789, "xRot":val, "yRot":val, "zRot":val}}
       <= {"jsonrpc":"2.0", "id":272, "result":true}
      string getName();
       => {"jsonrpc":"2.0", "id":273, "method":"Pixera.Projectors.Projector.getName", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":273, "result":"Abcd"}

      // Set the active state of a projector screen mapping. 
      // The id is conceptually the handle but the handle can not be passed 
      // directly for some implementations of the API. 
      // Therefore, Screen.getId() should be used to fill the screenId parameter.
      null activateScreenMapping(double screenId,boolean isActive);
       => {"jsonrpc":"2.0", "id":274, "method":"Pixera.Projectors.Projector.activateScreenMapping", "params":{"handle":123456789, "screenId":1.0, "isActive":true}}
       <= {"jsonrpc":"2.0", "id":274}

      // Set the active state of a projector Blackout. 
      null setBlackout(boolean isActive);
       => {"jsonrpc":"2.0", "id":275, "method":"Pixera.Projectors.Projector.setBlackout", "params":{"handle":123456789, "isActive":true}}
       <= {"jsonrpc":"2.0", "id":275}

      // Get the active state of a projector blackout. 
      boolean getBlackout();
       => {"jsonrpc":"2.0", "id":276, "method":"Pixera.Projectors.Projector.getBlackout", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":276, "result":true}

      // Set the softedge of a projector for a specific screen active. If screenName is empty changes will be applied to all.  
      null setSoftedgeVisible(string screenName,boolean visible);
       => {"jsonrpc":"2.0", "id":277, "method":"Pixera.Projectors.Projector.setSoftedgeVisible", "params":{"handle":123456789, "screenName":"Abcd", "visible":true}}
       <= {"jsonrpc":"2.0", "id":277}

      // Reset all color correction
      null resetAllColorCorrections();
       => {"jsonrpc":"2.0", "id":278, "method":"Pixera.Projectors.Projector.resetAllColorCorrections", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":278}

      //Set ColorCorrection Value by Path
      null setColorCorrectionWithPath(string path,float value);
       => {"jsonrpc":"2.0", "id":279, "method":"Pixera.Projectors.Projector.setColorCorrectionWithPath", "params":{"handle":123456789, "path":"Abcd", "value":1.0}}
       <= {"jsonrpc":"2.0", "id":279}

      //Get ColorCorrection Value by Path
      float getColorCorrectionWithPath(string path);
       => {"jsonrpc":"2.0", "id":280, "method":"Pixera.Projectors.Projector.getColorCorrectionWithPath", "params":{"handle":123456789, "path":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":280, "result":1.0}

      //Set colorcorrection with jsonstring
      null setColorCorrectionAsJsonString(string colorCorrection);
       => {"jsonrpc":"2.0", "id":281, "method":"Pixera.Projectors.Projector.setColorCorrectionAsJsonString", "params":{"handle":123456789, "colorCorrection":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":281}

      //Get colorcorrection as jsonstring
      string getColorCorrectionAsJsonString();
       => {"jsonrpc":"2.0", "id":282, "method":"Pixera.Projectors.Projector.getColorCorrectionAsJsonString", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":282, "result":"Abcd"}

      // Get projector output. Index is optional. By default the first output is returned.
      handle getOutput(optional<int> index);
       => {"jsonrpc":"2.0", "id":283, "method":"Pixera.Projectors.Projector.getOutput", "params":{"handle":123456789, "index":val}}
       <= {"jsonrpc":"2.0", "id":283, "result":123456789}

      // Set projector output.
      null setOutput(handle outputHandle);
       => {"jsonrpc":"2.0", "id":284, "method":"Pixera.Projectors.Projector.setOutput", "params":{"handle":123456789, "outputHandle":123456789}}
       <= {"jsonrpc":"2.0", "id":284}
   handle getInst(string instancePath);
    => {"jsonrpc":"2.0", "id":285, "method":"Pixera.Projectors.Projector.getInst", "params":{"instancePath":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":285, "result":123456789}
   handle getHandleFromInstancePath(string instancePath);
    => {"jsonrpc":"2.0", "id":286, "method":"Pixera.Projectors.Projector.getHandleFromInstancePath", "params":{"instancePath":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":286, "result":123456789}
      string getInstancePath();
       => {"jsonrpc":"2.0", "id":287, "method":"Pixera.Projectors.Projector.getInstancePath", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":287, "result":"Abcd"}
   }
}

namespace Resources
{
   // Returns handles to all resources (including within subfolders) in the resource
   // tree in the Compositing tab.
   handle[] getResources();
    => {"jsonrpc":"2.0", "id":288, "method":"Pixera.Resources.getResources"}
    <= {"jsonrpc":"2.0", "id":288, "result":[123456789, ...]}

   // Returns a handle to a folder in the resource tree. The namePath
   // specifies the folder by starting from the root and then listing
   // all the names as seen in the resources tree separated by forward
   // slashes, e.g. "Media/Std Backgrounds/Atmospherics".
   handle getResourceFolderWithNamePath(string namePath);
    => {"jsonrpc":"2.0", "id":289, "method":"Pixera.Resources.getResourceFolderWithNamePath", "params":{"namePath":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":289, "result":123456789}

   // Returns the top level resource folders.
   handle[] getResourceFolders();
    => {"jsonrpc":"2.0", "id":290, "method":"Pixera.Resources.getResourceFolders"}
    <= {"jsonrpc":"2.0", "id":290, "result":[123456789, ...]}
   handle[] getTranscodingFolders();
    => {"jsonrpc":"2.0", "id":291, "method":"Pixera.Resources.getTranscodingFolders"}
    <= {"jsonrpc":"2.0", "id":291, "result":[123456789, ...]}
   string getJsonDescrip();
    => {"jsonrpc":"2.0", "id":292, "method":"Pixera.Resources.getJsonDescrip"}
    <= {"jsonrpc":"2.0", "id":292, "result":"Abcd"}

   class ResourceFolder
   {
      // Pixera Control self-reference function.
      handle ref();
       => {"jsonrpc":"2.0", "id":293, "method":"Pixera.Resources.ResourceFolder.ref", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":293, "result":123456789}
      string getName();
       => {"jsonrpc":"2.0", "id":294, "method":"Pixera.Resources.ResourceFolder.getName", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":294, "result":"Abcd"}
      null setName(string name);
       => {"jsonrpc":"2.0", "id":295, "method":"Pixera.Resources.ResourceFolder.setName", "params":{"handle":123456789, "name":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":295}

      // Returns the resource folders that are immediate children of this folder.
      handle[] getResourceFolders();
       => {"jsonrpc":"2.0", "id":296, "method":"Pixera.Resources.ResourceFolder.getResourceFolders", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":296, "result":[123456789, ...]}

      // Returns handles to all the resources that are directly in one folder (i.e. does not consider subfolders).
      handle[] getResources();
       => {"jsonrpc":"2.0", "id":297, "method":"Pixera.Resources.ResourceFolder.getResources", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":297, "result":[123456789, ...]}
      handle getResourceAtIndex(int index);
       => {"jsonrpc":"2.0", "id":298, "method":"Pixera.Resources.ResourceFolder.getResourceAtIndex", "params":{"handle":123456789, "index":1}}
       <= {"jsonrpc":"2.0", "id":298, "result":123456789}

      // Adds the file at the path to the folder.
      handle addResource(string path);
       => {"jsonrpc":"2.0", "id":299, "method":"Pixera.Resources.ResourceFolder.addResource", "params":{"handle":123456789, "path":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":299, "result":123456789}

      // Adds the files at the directory path to the folder. If checkRedundancy == true then only files that have names
      // that are not currently in the folder are added. If remoteOthers == true then the missing files in the folder are removed, assets are untouched
      handle[] addResourcesFromDirectory(string path,boolean removeOthers,boolean checkRedundancy);
       => {"jsonrpc":"2.0", "id":300, "method":"Pixera.Resources.ResourceFolder.addResourcesFromDirectory", "params":{"handle":123456789, "path":"Abcd", "removeOthers":true, "checkRedundancy":true}}
       <= {"jsonrpc":"2.0", "id":300, "result":[123456789, ...]}

      // Adds the files at the directory path to the folder. If checkRedundancy == true then only files that have names
      // that are not currently in the folder are added. If remoteOthers == true then the missing files in the folder are removed, assets are also removed
      handle[] addResourcesFromDirectoryRemoveAssets(string path,boolean removeOthers,boolean checkRedundancy);
       => {"jsonrpc":"2.0", "id":301, "method":"Pixera.Resources.ResourceFolder.addResourcesFromDirectoryRemoveAssets", "params":{"handle":123456789, "path":"Abcd", "removeOthers":true, "checkRedundancy":true}}
       <= {"jsonrpc":"2.0", "id":301, "result":[123456789, ...]}

      //Creates and adds a text(0), colour(1), web(2), timelinereference(3) or multi(4) resource.
      handle addInternalResource(string signature,int resKind);
       => {"jsonrpc":"2.0", "id":302, "method":"Pixera.Resources.ResourceFolder.addInternalResource", "params":{"handle":123456789, "signature":"Abcd", "resKind":1}}
       <= {"jsonrpc":"2.0", "id":302, "result":123456789}

      // Creates folders hierarchically for a path as children of the specified folder.
      // For example if you call this against the handle of the "Media" folder with a path like:
      // "/my/new/folders", it will result in the following structure: "Media/my/new/folders".
      null createFoldersFrom(string path);
       => {"jsonrpc":"2.0", "id":303, "method":"Pixera.Resources.ResourceFolder.createFoldersFrom", "params":{"handle":123456789, "path":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":303}

      // Reloads for all resources in folder the files from disk, distributes changed files and creates new preview.
      null refreshResources();
       => {"jsonrpc":"2.0", "id":304, "method":"Pixera.Resources.ResourceFolder.refreshResources", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":304}

      // Reloads for all resources in folder the files from disk, distributes changed files and creates new preview.
      null moveResourceToThis(double id);
       => {"jsonrpc":"2.0", "id":305, "method":"Pixera.Resources.ResourceFolder.moveResourceToThis", "params":{"handle":123456789, "id":1.0}}
       <= {"jsonrpc":"2.0", "id":305}
      null removeThis();
       => {"jsonrpc":"2.0", "id":306, "method":"Pixera.Resources.ResourceFolder.removeThis", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":306}
      null removeThisIncludingAssets();
       => {"jsonrpc":"2.0", "id":307, "method":"Pixera.Resources.ResourceFolder.removeThisIncludingAssets", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":307}
      null removeAllContents();
       => {"jsonrpc":"2.0", "id":308, "method":"Pixera.Resources.ResourceFolder.removeAllContents", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":308}
      null removeAllContentsIncludingAssets();
       => {"jsonrpc":"2.0", "id":309, "method":"Pixera.Resources.ResourceFolder.removeAllContentsIncludingAssets", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":309}
      null deleteAllContentsAssetsFromLiveSystem(handle apEntityLiveSystemHandle);
       => {"jsonrpc":"2.0", "id":310, "method":"Pixera.Resources.ResourceFolder.deleteAllContentsAssetsFromLiveSystem", "params":{"handle":123456789, "apEntityLiveSystemHandle":123456789}}
       <= {"jsonrpc":"2.0", "id":310}

      // Resets distribution targets based on the file distribution settings and if needed distributes resource.
      null resetDistributionTargets();
       => {"jsonrpc":"2.0", "id":311, "method":"Pixera.Resources.ResourceFolder.resetDistributionTargets", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":311}

      // Changes the state of a distribution target of a resource.
      null changeDistributionTarget(handle apEntityLiveSystemHandle,boolean shouldDistribute);
       => {"jsonrpc":"2.0", "id":312, "method":"Pixera.Resources.ResourceFolder.changeDistributionTarget", "params":{"handle":123456789, "apEntityLiveSystemHandle":123456789, "shouldDistribute":true}}
       <= {"jsonrpc":"2.0", "id":312}
      null replaceResourcesByString(string searchString,string replaceString,string path);
       => {"jsonrpc":"2.0", "id":313, "method":"Pixera.Resources.ResourceFolder.replaceResourcesByString", "params":{"handle":123456789, "searchString":"Abcd", "replaceString":"Abcd", "path":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":313}
   handle getInst(string instancePath);
    => {"jsonrpc":"2.0", "id":314, "method":"Pixera.Resources.ResourceFolder.getInst", "params":{"instancePath":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":314, "result":123456789}
   handle getHandleFromInstancePath(string instancePath);
    => {"jsonrpc":"2.0", "id":315, "method":"Pixera.Resources.ResourceFolder.getHandleFromInstancePath", "params":{"instancePath":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":315, "result":123456789}
      string getInstancePath();
       => {"jsonrpc":"2.0", "id":316, "method":"Pixera.Resources.ResourceFolder.getInstancePath", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":316, "result":"Abcd"}
      int getDmxId();
       => {"jsonrpc":"2.0", "id":317, "method":"Pixera.Resources.ResourceFolder.getDmxId", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":317, "result":1}

      // Get DMX Id of both the resource and its parent folder as:
      // Folder Id << 16, Resource Id.
      int getCombinedDmxId();
       => {"jsonrpc":"2.0", "id":318, "method":"Pixera.Resources.ResourceFolder.getCombinedDmxId", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":318, "result":1}
      null setDmxId(int id);
       => {"jsonrpc":"2.0", "id":319, "method":"Pixera.Resources.ResourceFolder.setDmxId", "params":{"handle":123456789, "id":1}}
       <= {"jsonrpc":"2.0", "id":319}
   }

   class TranscodingFolder
   {
      string getUsedTranscodingPreset();
       => {"jsonrpc":"2.0", "id":320, "method":"Pixera.Resources.TranscodingFolder.getUsedTranscodingPreset", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":320, "result":"Abcd"}
      null setUsedTranscodingPreset(string preset);
       => {"jsonrpc":"2.0", "id":321, "method":"Pixera.Resources.TranscodingFolder.setUsedTranscodingPreset", "params":{"handle":123456789, "preset":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":321}
      boolean getTranscodeAutomatically();
       => {"jsonrpc":"2.0", "id":322, "method":"Pixera.Resources.TranscodingFolder.getTranscodeAutomatically", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":322, "result":true}
      null setTranscodeAutomatically(boolean autoTranscode);
       => {"jsonrpc":"2.0", "id":323, "method":"Pixera.Resources.TranscodingFolder.setTranscodeAutomatically", "params":{"handle":123456789, "autoTranscode":true}}
       <= {"jsonrpc":"2.0", "id":323}
      boolean getUseRxCacheAsDestination();
       => {"jsonrpc":"2.0", "id":324, "method":"Pixera.Resources.TranscodingFolder.getUseRxCacheAsDestination", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":324, "result":true}
      null setRxCacheAsDestination(boolean useRxCache);
       => {"jsonrpc":"2.0", "id":325, "method":"Pixera.Resources.TranscodingFolder.setRxCacheAsDestination", "params":{"handle":123456789, "useRxCache":true}}
       <= {"jsonrpc":"2.0", "id":325}
      string getDestinationDirectory();
       => {"jsonrpc":"2.0", "id":326, "method":"Pixera.Resources.TranscodingFolder.getDestinationDirectory", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":326, "result":"Abcd"}
      null setDestinationDirectory(string path);
       => {"jsonrpc":"2.0", "id":327, "method":"Pixera.Resources.TranscodingFolder.setDestinationDirectory", "params":{"handle":123456789, "path":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":327}
   }

   class Resource
   {
      // Pixera Control self-reference function.
      handle ref();
       => {"jsonrpc":"2.0", "id":328, "method":"Pixera.Resources.Resource.ref", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":328, "result":123456789}

      // Removes the resource.
      null removeThis();
       => {"jsonrpc":"2.0", "id":329, "method":"Pixera.Resources.Resource.removeThis", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":329}

      // Permanently removes the assets associated with the resource from all systems
      // on which they are stored.
      null deleteFilesOnSystems();
       => {"jsonrpc":"2.0", "id":330, "method":"Pixera.Resources.Resource.deleteFilesOnSystems", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":330}

      // Removes the resource and permanently removes the assets associated with it from
      // all systems on which they are stored.
      null removeThisIncludingAssets();
       => {"jsonrpc":"2.0", "id":331, "method":"Pixera.Resources.Resource.removeThisIncludingAssets", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":331}

      // Permanently removes the asset from the given live system.
      null deleteAssetFromLiveSystem(handle apEntityLiveSystemHandle);
       => {"jsonrpc":"2.0", "id":332, "method":"Pixera.Resources.Resource.deleteAssetFromLiveSystem", "params":{"handle":123456789, "apEntityLiveSystemHandle":123456789}}
       <= {"jsonrpc":"2.0", "id":332}

      // Resets distribution targets based on the file distribution settings and if needed distributes resource.
      null resetDistributionTargets();
       => {"jsonrpc":"2.0", "id":333, "method":"Pixera.Resources.Resource.resetDistributionTargets", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":333}

      // Changes the state of a distribution target of a resource.
      null changeDistributionTarget(handle apEntityLiveSystemHandle,boolean shouldDistribute);
       => {"jsonrpc":"2.0", "id":334, "method":"Pixera.Resources.Resource.changeDistributionTarget", "params":{"handle":123456789, "apEntityLiveSystemHandle":123456789, "shouldDistribute":true}}
       <= {"jsonrpc":"2.0", "id":334}
      string getName();
       => {"jsonrpc":"2.0", "id":335, "method":"Pixera.Resources.Resource.getName", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":335, "result":"Abcd"}
      null setName(string name);
       => {"jsonrpc":"2.0", "id":336, "method":"Pixera.Resources.Resource.setName", "params":{"handle":123456789, "name":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":336}
      double getFps();
       => {"jsonrpc":"2.0", "id":337, "method":"Pixera.Resources.Resource.getFps", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":337, "result":1.0}
      double[] getResolution();
       => {"jsonrpc":"2.0", "id":338, "method":"Pixera.Resources.Resource.getResolution", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":338, "result":[1.0, ...]}

      // Returns the active state of a Live Input Resource
      boolean getIsActive();
       => {"jsonrpc":"2.0", "id":339, "method":"Pixera.Resources.Resource.getIsActive", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":339, "result":true}

      // Returns list of available Video Modes of a Live Input Resource,
      // not all Live Input Resources have a list of modes.
      string[] getVideoStreamModes();
       => {"jsonrpc":"2.0", "id":340, "method":"Pixera.Resources.Resource.getVideoStreamModes", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":340, "result":[Efgh, ...]}

      // Set the Video Mode of a Live Input Resource by it's index.
      null setVideoStreamMode(int index);
       => {"jsonrpc":"2.0", "id":341, "method":"Pixera.Resources.Resource.setVideoStreamMode", "params":{"handle":123456789, "index":1}}
       <= {"jsonrpc":"2.0", "id":341}

      // Returns an id based on the handle. This is currently necessary in some situations
      // because some API implementations can not yet consume handles as parameters.
      double getId();
       => {"jsonrpc":"2.0", "id":342, "method":"Pixera.Resources.Resource.getId", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":342, "result":1.0}

      // Returns the duration of the resource in seconds.
      double getDuration();
       => {"jsonrpc":"2.0", "id":343, "method":"Pixera.Resources.Resource.getDuration", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":343, "result":1.0}

      // Returns the type of the resource.
      string getType();
       => {"jsonrpc":"2.0", "id":344, "method":"Pixera.Resources.Resource.getType", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":344, "result":"Abcd"}
      null setCurrentVersion(string version);
       => {"jsonrpc":"2.0", "id":345, "method":"Pixera.Resources.Resource.setCurrentVersion", "params":{"handle":123456789, "version":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":345}
      string getCurrentVersion();
       => {"jsonrpc":"2.0", "id":346, "method":"Pixera.Resources.Resource.getCurrentVersion", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":346, "result":"Abcd"}
      string[] getVersions();
       => {"jsonrpc":"2.0", "id":347, "method":"Pixera.Resources.Resource.getVersions", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":347, "result":[Efgh, ...]}

      //get Version Suffix, First is begin
      string[] getVersionSuffix();
       => {"jsonrpc":"2.0", "id":348, "method":"Pixera.Resources.Resource.getVersionSuffix", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":348, "result":[Efgh, ...]}

      //get start suffex for versions
      null rescanVersions();
       => {"jsonrpc":"2.0", "id":349, "method":"Pixera.Resources.Resource.rescanVersions", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":349}

      // Returns the png thumbnail data of the resource in a base 64 string. This is the
      // image that is shown in the resource tree. Its resolution is currently 256 * 174
      // pixels.
      string getThumbnailAsBase64();
       => {"jsonrpc":"2.0", "id":350, "method":"Pixera.Resources.Resource.getThumbnailAsBase64", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":350, "result":"Abcd"}
      boolean getHasPendingTransfer();
       => {"jsonrpc":"2.0", "id":351, "method":"Pixera.Resources.Resource.getHasPendingTransfer", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":351, "result":true}

      // Returns true if the resource is currently referred to in a timeline
      // (via a clip or a dominant value).
      double getIsInUse();
       => {"jsonrpc":"2.0", "id":352, "method":"Pixera.Resources.Resource.getIsInUse", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":352, "result":1.0}

      // Returns the time the resource was first referred to in a timeline (via a clip or a dominant
      // value) in milliseconds since midnight Jan 1st 1970 UTC. If the time is zero then the resource
      // has not been used yet in any timeline.
      double getLastUsageBeginTime();
       => {"jsonrpc":"2.0", "id":353, "method":"Pixera.Resources.Resource.getLastUsageBeginTime", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":353, "result":1.0}

      // Returns the time the resource was first referred to in a timeline (via a clip or a dominant
      // value) as an ISO-8601 string (using the local timezone). If the string is empty then the resource
      // has not been used yet in any timeline.
      string getLastUsageBeginTimeAsString();
       => {"jsonrpc":"2.0", "id":354, "method":"Pixera.Resources.Resource.getLastUsageBeginTimeAsString", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":354, "result":"Abcd"}

      // Returns the time the resource was removed from the last timeline (whether from a clip or
      // a dominant value) in milliseconds since midnight Jan 1st 1970 UTC. If the time is zero then
      // the resource was either never used at all or is still in use.
      double getLastUsageEndTime();
       => {"jsonrpc":"2.0", "id":355, "method":"Pixera.Resources.Resource.getLastUsageEndTime", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":355, "result":1.0}

      // Returns the time the resource was removed from the last timeline (whether from a clip or
      // a dominant value) as an ISO-8601 string (using the local timezone). If the time is zero then
      // the resource was either never used at all or is still in use.
      string getLastUsageEndTimeAsString();
       => {"jsonrpc":"2.0", "id":356, "method":"Pixera.Resources.Resource.getLastUsageEndTimeAsString", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":356, "result":"Abcd"}

      // get the system filepath
      string getFilePath();
       => {"jsonrpc":"2.0", "id":357, "method":"Pixera.Resources.Resource.getFilePath", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":357, "result":"Abcd"}

      // Sets the text of a text input resource.
      null setText(string text);
       => {"jsonrpc":"2.0", "id":358, "method":"Pixera.Resources.Resource.setText", "params":{"handle":123456789, "text":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":358}

      // Returns the text of a text input resource.
      string getText();
       => {"jsonrpc":"2.0", "id":359, "method":"Pixera.Resources.Resource.getText", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":359, "result":"Abcd"}
      boolean setFontWithName(string fontName);
       => {"jsonrpc":"2.0", "id":360, "method":"Pixera.Resources.Resource.setFontWithName", "params":{"handle":123456789, "fontName":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":360, "result":true}
      string getFontName();
       => {"jsonrpc":"2.0", "id":361, "method":"Pixera.Resources.Resource.getFontName", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":361, "result":"Abcd"}
      boolean setFontWithPath(string fontPath);
       => {"jsonrpc":"2.0", "id":362, "method":"Pixera.Resources.Resource.setFontWithPath", "params":{"handle":123456789, "fontPath":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":362, "result":true}

      // 0 : Align Left
      // 1 : Align Center
      // 2 : Align Right
      boolean setHorizontalTextAlignment(int textAlignment);
       => {"jsonrpc":"2.0", "id":363, "method":"Pixera.Resources.Resource.setHorizontalTextAlignment", "params":{"handle":123456789, "textAlignment":1}}
       <= {"jsonrpc":"2.0", "id":363, "result":true}

      // 0 : Align Top
      // 1 : Align Center
      // 2 : Align Bottom
      int getHorizontalTextAlignment();
       => {"jsonrpc":"2.0", "id":364, "method":"Pixera.Resources.Resource.getHorizontalTextAlignment", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":364, "result":1}
      boolean setVerticalTextAlignment(int textAlignment);
       => {"jsonrpc":"2.0", "id":365, "method":"Pixera.Resources.Resource.setVerticalTextAlignment", "params":{"handle":123456789, "textAlignment":1}}
       <= {"jsonrpc":"2.0", "id":365, "result":true}
      int getVerticalTextAlignment();
       => {"jsonrpc":"2.0", "id":366, "method":"Pixera.Resources.Resource.getVerticalTextAlignment", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":366, "result":1}
      boolean setLineHeight(double lineHeight);
       => {"jsonrpc":"2.0", "id":367, "method":"Pixera.Resources.Resource.setLineHeight", "params":{"handle":123456789, "lineHeight":1.0}}
       <= {"jsonrpc":"2.0", "id":367, "result":true}
      double getLineHeight();
       => {"jsonrpc":"2.0", "id":368, "method":"Pixera.Resources.Resource.getLineHeight", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":368, "result":1.0}

      // Returns the text-measurements width and height of the rectangle enclosing the text. The first entry of the
      // returned vector represents width, the second one represents height. Unit is pixels.
      int[] getTextMeasurementsWidthAndHeight();
       => {"jsonrpc":"2.0", "id":369, "method":"Pixera.Resources.Resource.getTextMeasurementsWidthAndHeight", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":369, "result":[1, ...]}

      // Sets the url of a web browser resource.
      null setUrl(string url);
       => {"jsonrpc":"2.0", "id":370, "method":"Pixera.Resources.Resource.setUrl", "params":{"handle":123456789, "url":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":370}

      // Returns the url of a web browser resource.
      string getUrl();
       => {"jsonrpc":"2.0", "id":371, "method":"Pixera.Resources.Resource.getUrl", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":371, "result":"Abcd"}

      // Sets the path to a color transformation file to be used with the resource.
      null setColorTransformPath(string colorTransformPath);
       => {"jsonrpc":"2.0", "id":372, "method":"Pixera.Resources.Resource.setColorTransformPath", "params":{"handle":123456789, "colorTransformPath":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":372}

      // Returns the path of the color transformation file be used with the resource.
      string getColorTransformPath();
       => {"jsonrpc":"2.0", "id":373, "method":"Pixera.Resources.Resource.getColorTransformPath", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":373, "result":"Abcd"}

      // Clear the path to a color transformation file.
      null clearColorTransformPath();
       => {"jsonrpc":"2.0", "id":374, "method":"Pixera.Resources.Resource.clearColorTransformPath", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":374}

      // Reloads the file from disk, distributes changed files and creates new preview.
      null refresh(string text);
       => {"jsonrpc":"2.0", "id":375, "method":"Pixera.Resources.Resource.refresh", "params":{"handle":123456789, "text":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":375}

      // Distribute the file to clients.
      null distribute();
       => {"jsonrpc":"2.0", "id":376, "method":"Pixera.Resources.Resource.distribute", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":376}

      // Get the id used to access the resource through dmx.
      int getDmxId();
       => {"jsonrpc":"2.0", "id":377, "method":"Pixera.Resources.Resource.getDmxId", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":377, "result":1}

      // Set the id used to access the resource through dmx.
      null setDmxId(int id);
       => {"jsonrpc":"2.0", "id":378, "method":"Pixera.Resources.Resource.setDmxId", "params":{"handle":123456789, "id":1}}
       <= {"jsonrpc":"2.0", "id":378}

      // Remove multiresource item at index
      null removeMultiresourceIndex(int index);
       => {"jsonrpc":"2.0", "id":379, "method":"Pixera.Resources.Resource.removeMultiresourceIndex", "params":{"handle":123456789, "index":1}}
       <= {"jsonrpc":"2.0", "id":379}

      // Add multiresource item
      null addMultiresourceItem(double id);
       => {"jsonrpc":"2.0", "id":380, "method":"Pixera.Resources.Resource.addMultiresourceItem", "params":{"handle":123456789, "id":1.0}}
       <= {"jsonrpc":"2.0", "id":380}

      // Get multiresource items
      handle[] getMultiresourceItems();
       => {"jsonrpc":"2.0", "id":381, "method":"Pixera.Resources.Resource.getMultiresourceItems", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":381, "result":[123456789, ...]}

      // replace multiresource item at index
      null replaceMultiresourceItemByIndex(int index,double id);
       => {"jsonrpc":"2.0", "id":382, "method":"Pixera.Resources.Resource.replaceMultiresourceItemByIndex", "params":{"handle":123456789, "index":1, "id":1.0}}
       <= {"jsonrpc":"2.0", "id":382}

      // Set multiresource resolution
      null setMultiresourceResolution(int width,int height);
       => {"jsonrpc":"2.0", "id":383, "method":"Pixera.Resources.Resource.setMultiresourceResolution", "params":{"handle":123456789, "width":1, "height":1}}
       <= {"jsonrpc":"2.0", "id":383}

      // Set multiresource items size. (1.0 = full)
      null setMultiresourceItemSizebyIndex(int index,double width,double height);
       => {"jsonrpc":"2.0", "id":384, "method":"Pixera.Resources.Resource.setMultiresourceItemSizebyIndex", "params":{"handle":123456789, "index":1, "width":1.0, "height":1.0}}
       <= {"jsonrpc":"2.0", "id":384}

      // Set multiresource items position.
      null setMultiresourceItemPositionbyIndex(int index,double x,double y);
       => {"jsonrpc":"2.0", "id":385, "method":"Pixera.Resources.Resource.setMultiresourceItemPositionbyIndex", "params":{"handle":123456789, "index":1, "x":1.0, "y":1.0}}
       <= {"jsonrpc":"2.0", "id":385}

      // Sets a color resource to show a gradient between its assigned colors.
      null setUseGradient(boolean useGradient);
       => {"jsonrpc":"2.0", "id":386, "method":"Pixera.Resources.Resource.setUseGradient", "params":{"handle":123456789, "useGradient":true}}
       <= {"jsonrpc":"2.0", "id":386}

      // Get if a color resource uses a gradient.
      boolean getUseGradient();
       => {"jsonrpc":"2.0", "id":387, "method":"Pixera.Resources.Resource.getUseGradient", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":387, "result":true}

      // Set multiple colors for a color resource.
      // Color format is ARGB encoded in one 32 bit integer
      // where a << 24, r << 16, g << 8, b << 0.
      null setColors(uint[] argbCols,double[] positions,string[] colNames,optional<bool> useGradient);
       => {"jsonrpc":"2.0", "id":388, "method":"Pixera.Resources.Resource.setColors", "params":{"handle":123456789, "argbCols":[1, ...], "positions":[1.0, ...], "colNames":[Efgh, ...], "useGradient":val}}
       <= {"jsonrpc":"2.0", "id":388}

      // Set one color of a color resource.
      // If index does not exist the color will be appended to the end of the color list.
      null setColorAtIndex(int index,int red,int green,int blue,int alpha,double position,string name,optional<bool> useGradient);
       => {"jsonrpc":"2.0", "id":389, "method":"Pixera.Resources.Resource.setColorAtIndex", "params":{"handle":123456789, "index":1, "red":1, "green":1, "blue":1, "alpha":1, "position":1.0, "name":"Abcd", "useGradient":val}}
       <= {"jsonrpc":"2.0", "id":389}

      // Get color value as ARGB in a single 32 bit integer
      // where a << 24, r << 16, g << 8, b << 0.
      int getColorAtIndex(int colorIndex);
       => {"jsonrpc":"2.0", "id":390, "method":"Pixera.Resources.Resource.getColorAtIndex", "params":{"handle":123456789, "colorIndex":1}}
       <= {"jsonrpc":"2.0", "id":390, "result":1}
      double getColorPositionAtIndex(int colorIndex);
       => {"jsonrpc":"2.0", "id":391, "method":"Pixera.Resources.Resource.getColorPositionAtIndex", "params":{"handle":123456789, "colorIndex":1}}
       <= {"jsonrpc":"2.0", "id":391, "result":1.0}

      // action = run for launch
      // action = kill for kill
      null launchVirtualWorld(string action);
       => {"jsonrpc":"2.0", "id":392, "method":"Pixera.Resources.Resource.launchVirtualWorld", "params":{"handle":123456789, "action":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":392}
      handle getUnrealWorld();
       => {"jsonrpc":"2.0", "id":393, "method":"Pixera.Resources.Resource.getUnrealWorld", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":393, "result":123456789}

      // Sets the restrict to specific services state and the list of IPs of the services.
      null setMultiResourceItemRestrictedServiceIps(int itemIndex,string[] ipAdresses);
       => {"jsonrpc":"2.0", "id":394, "method":"Pixera.Resources.Resource.setMultiResourceItemRestrictedServiceIps", "params":{"handle":123456789, "itemIndex":1, "ipAdresses":[Efgh, ...]}}
       <= {"jsonrpc":"2.0", "id":394}

      // Returns the list of restricted service IPs in a comma separated string.
      string[] getMultiResourceItemRestrictedServiceIps(int itemIndex);
       => {"jsonrpc":"2.0", "id":395, "method":"Pixera.Resources.Resource.getMultiResourceItemRestrictedServiceIps", "params":{"handle":123456789, "itemIndex":1}}
       <= {"jsonrpc":"2.0", "id":395, "result":[Efgh, ...]}
      null replace(string path);
       => {"jsonrpc":"2.0", "id":396, "method":"Pixera.Resources.Resource.replace", "params":{"handle":123456789, "path":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":396}
   handle getInst(string instancePath);
    => {"jsonrpc":"2.0", "id":397, "method":"Pixera.Resources.Resource.getInst", "params":{"instancePath":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":397, "result":123456789}
   handle getHandleFromInstancePath(string instancePath);
    => {"jsonrpc":"2.0", "id":398, "method":"Pixera.Resources.Resource.getHandleFromInstancePath", "params":{"instancePath":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":398, "result":123456789}
      string getInstancePath();
       => {"jsonrpc":"2.0", "id":399, "method":"Pixera.Resources.Resource.getInstancePath", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":399, "result":"Abcd"}

      // Search for a transcoding preset with the given name, and if found,
      // moves the resource to the transcoding folder and starts transcoding it with that preset
      // if you want to convert all frames, set 0 as start and -1 as end frame.
      // serviceId is currently not used.
      null transcodeWithExisitngPreset(string presetName,boolean useRxCache,string destinationPath,int startFrame,int endFrame,uint serviceId);
       => {"jsonrpc":"2.0", "id":400, "method":"Pixera.Resources.Resource.transcodeWithExisitngPreset", "params":{"handle":123456789, "presetName":"Abcd", "useRxCache":true, "destinationPath":"Abcd", "startFrame":1, "endFrame":1, "serviceId":1}}
       <= {"jsonrpc":"2.0", "id":400}

      // Move the resource to the transcoding folder and start transcoding with a preset
      // in JSON format. See "Transcoding::addOrChangePreset" on how to build the JSON string
      null transcodeWithSettings(string settings,boolean useRxCache,string destinationPath,int startFrame,int endFrame,uint serviceId);
       => {"jsonrpc":"2.0", "id":401, "method":"Pixera.Resources.Resource.transcodeWithSettings", "params":{"handle":123456789, "settings":"Abcd", "useRxCache":true, "destinationPath":"Abcd", "startFrame":1, "endFrame":1, "serviceId":1}}
       <= {"jsonrpc":"2.0", "id":401}
      null moveToTranscodingFolder(string folderPath);
       => {"jsonrpc":"2.0", "id":402, "method":"Pixera.Resources.Resource.moveToTranscodingFolder", "params":{"handle":123456789, "folderPath":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":402}
   }

   class UnrealWorld
   {
      string[] getLevelNames();
       => {"jsonrpc":"2.0", "id":403, "method":"Pixera.Resources.UnrealWorld.getLevelNames", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":403, "result":[Efgh, ...]}
      null loadLevel(string levelName);
       => {"jsonrpc":"2.0", "id":404, "method":"Pixera.Resources.UnrealWorld.loadLevel", "params":{"handle":123456789, "levelName":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":404}
      string[] getEventTriggerNames();
       => {"jsonrpc":"2.0", "id":405, "method":"Pixera.Resources.UnrealWorld.getEventTriggerNames", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":405, "result":[Efgh, ...]}
      null triggerEventByName(string triggerName);
       => {"jsonrpc":"2.0", "id":406, "method":"Pixera.Resources.UnrealWorld.triggerEventByName", "params":{"handle":123456789, "triggerName":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":406}
      null createNDisplayConfig();
       => {"jsonrpc":"2.0", "id":407, "method":"Pixera.Resources.UnrealWorld.createNDisplayConfig", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":407}
      null runUnreal();
       => {"jsonrpc":"2.0", "id":408, "method":"Pixera.Resources.UnrealWorld.runUnreal", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":408}
      null killUnreal();
       => {"jsonrpc":"2.0", "id":409, "method":"Pixera.Resources.UnrealWorld.killUnreal", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":409}
      string getName();
       => {"jsonrpc":"2.0", "id":410, "method":"Pixera.Resources.UnrealWorld.getName", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":410, "result":"Abcd"}
   handle getInst(string instancePath);
    => {"jsonrpc":"2.0", "id":411, "method":"Pixera.Resources.UnrealWorld.getInst", "params":{"instancePath":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":411, "result":123456789}
   handle getHandleFromInstancePath(string instancePath);
    => {"jsonrpc":"2.0", "id":412, "method":"Pixera.Resources.UnrealWorld.getHandleFromInstancePath", "params":{"instancePath":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":412, "result":123456789}
      string getInstancePath();
       => {"jsonrpc":"2.0", "id":413, "method":"Pixera.Resources.UnrealWorld.getInstancePath", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":413, "result":"Abcd"}
   }
}

namespace Timelines
{
   // Returns the handle of the timeline at the (zero-based) index in
   // the timeline library of the Compositing tab.
   handle getTimelineAtIndex(int index);
    => {"jsonrpc":"2.0", "id":414, "method":"Pixera.Timelines.getTimelineAtIndex", "params":{"index":1}}
    <= {"jsonrpc":"2.0", "id":414, "result":123456789}

   // Returns the handle of the timeline with the given name (as shown in the 
   // timeline library).
   handle getTimelineFromName(string name);
    => {"jsonrpc":"2.0", "id":415, "method":"Pixera.Timelines.getTimelineFromName", "params":{"name":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":415, "result":123456789}

   // Returns handles to all timelines.
   handle[] getTimelines();
    => {"jsonrpc":"2.0", "id":416, "method":"Pixera.Timelines.getTimelines"}
    <= {"jsonrpc":"2.0", "id":416, "result":[123456789, ...]}

   // Returns names to all timelines.
   string[] getTimelineNames();
    => {"jsonrpc":"2.0", "id":417, "method":"Pixera.Timelines.getTimelineNames"}
    <= {"jsonrpc":"2.0", "id":417, "result":[Efgh, ...]}

   // Returns handles to all selected timelines
   handle[] getTimelinesSelected();
    => {"jsonrpc":"2.0", "id":418, "method":"Pixera.Timelines.getTimelinesSelected"}
    <= {"jsonrpc":"2.0", "id":418, "result":[123456789, ...]}

   // Create Timeline
   handle createTimeline();
    => {"jsonrpc":"2.0", "id":419, "method":"Pixera.Timelines.createTimeline"}
    <= {"jsonrpc":"2.0", "id":419, "result":123456789}

   struct TimelineAttributes
   {
      int index;
      string name;
      double fps;
      int mode;
   }

   class Timeline
   {
      // Pixera Control self-reference function.
      handle ref();
       => {"jsonrpc":"2.0", "id":420, "method":"Pixera.Timelines.Timeline.ref", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":420, "result":123456789}

      // Removes the timeline.
      null removeThis();
       => {"jsonrpc":"2.0", "id":421, "method":"Pixera.Timelines.Timeline.removeThis", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":421}

      // Duplicate the timeline. withoutClipsCues is optional and on default false
      handle duplicateThis(optional<bool> withoutClipsCues);
       => {"jsonrpc":"2.0", "id":422, "method":"Pixera.Timelines.Timeline.duplicateThis", "params":{"handle":123456789, "withoutClipsCues":val}}
       <= {"jsonrpc":"2.0", "id":422, "result":123456789}

      // Select the timeline.
      null selectThis();
       => {"jsonrpc":"2.0", "id":423, "method":"Pixera.Timelines.Timeline.selectThis", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":423}

      // Get zoom factor of the timeline.
      double getZoomFactor();
       => {"jsonrpc":"2.0", "id":424, "method":"Pixera.Timelines.Timeline.getZoomFactor", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":424, "result":1.0}

      // Set zoom factor of the timeline.
      null setZoomFactor(double zoomFactor);
       => {"jsonrpc":"2.0", "id":425, "method":"Pixera.Timelines.Timeline.setZoomFactor", "params":{"handle":123456789, "zoomFactor":1.0}}
       <= {"jsonrpc":"2.0", "id":425}

      // Get vertical scroll offset of the timeline.
      int getVerticalScrollOffset();
       => {"jsonrpc":"2.0", "id":426, "method":"Pixera.Timelines.Timeline.getVerticalScrollOffset", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":426, "result":1}

      // Get vertical scroll offset of the timeline.
      null setVerticalScrollOffset(int offset);
       => {"jsonrpc":"2.0", "id":427, "method":"Pixera.Timelines.Timeline.setVerticalScrollOffset", "params":{"handle":123456789, "offset":1}}
       <= {"jsonrpc":"2.0", "id":427}

      // Get vertical scroll offset of the timeline.
      int getHorizontalScrollOffset();
       => {"jsonrpc":"2.0", "id":428, "method":"Pixera.Timelines.Timeline.getHorizontalScrollOffset", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":428, "result":1}

      // Get vertical scroll offset of the timeline.
      null setHorizontalScrollOffset(int offset);
       => {"jsonrpc":"2.0", "id":429, "method":"Pixera.Timelines.Timeline.setHorizontalScrollOffset", "params":{"handle":123456789, "offset":1}}
       <= {"jsonrpc":"2.0", "id":429}

      // Moves the timeline up or down in the render order, depending on whether moveDown is true.
      null moveInRenderOrder(boolean moveDown);
       => {"jsonrpc":"2.0", "id":430, "method":"Pixera.Timelines.Timeline.moveInRenderOrder", "params":{"handle":123456789, "moveDown":true}}
       <= {"jsonrpc":"2.0", "id":430}

      // Returns handles to all layers of the timeline.
      handle[] getLayers();
       => {"jsonrpc":"2.0", "id":431, "method":"Pixera.Timelines.Timeline.getLayers", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":431, "result":[123456789, ...]}

      // Returns names to all layers of the timeline.
      string[] getLayerNames();
       => {"jsonrpc":"2.0", "id":432, "method":"Pixera.Timelines.Timeline.getLayerNames", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":432, "result":[Efgh, ...]}

      // Returns handles to all selected layers of the timeline.
      handle[] getLayersSelected();
       => {"jsonrpc":"2.0", "id":433, "method":"Pixera.Timelines.Timeline.getLayersSelected", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":433, "result":[123456789, ...]}

      // Select Layer by index of the timeline.
      null selectLayerByIndex(int index);
       => {"jsonrpc":"2.0", "id":434, "method":"Pixera.Timelines.Timeline.selectLayerByIndex", "params":{"handle":123456789, "index":1}}
       <= {"jsonrpc":"2.0", "id":434}

      // Select Layers of the timeline by Names.
      null selectLayerByNames(string[] layerNames);
       => {"jsonrpc":"2.0", "id":435, "method":"Pixera.Timelines.Timeline.selectLayerByNames", "params":{"handle":123456789, "layerNames":[Efgh, ...]}}
       <= {"jsonrpc":"2.0", "id":435}

      // Returns a handle to the layer in the timeline at the (zero-based) index in
      // the order as shown in the Pixera Timeline interface.
      handle getLayerAtIndex(int index);
       => {"jsonrpc":"2.0", "id":436, "method":"Pixera.Timelines.Timeline.getLayerAtIndex", "params":{"handle":123456789, "index":1}}
       <= {"jsonrpc":"2.0", "id":436, "result":123456789}

      // Creates a layer and returns a handle to it.
      handle createLayer();
       => {"jsonrpc":"2.0", "id":437, "method":"Pixera.Timelines.Timeline.createLayer", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":437, "result":123456789}
      string getCueInfosAsJsonString();
       => {"jsonrpc":"2.0", "id":438, "method":"Pixera.Timelines.Timeline.getCueInfosAsJsonString", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":438, "result":"Abcd"}

      // Returns the handles of all cues in chronological order.
      handle[] getCues();
       => {"jsonrpc":"2.0", "id":439, "method":"Pixera.Timelines.Timeline.getCues", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":439, "result":[123456789, ...]}

      // Returns names to all cues.
      string[] getCueNames();
       => {"jsonrpc":"2.0", "id":440, "method":"Pixera.Timelines.Timeline.getCueNames", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":440, "result":[Efgh, ...]}

      // Returns the handle of the cue with the given index. 
      // Indices are in chronological order.
      handle getCueAtIndex(int index);
       => {"jsonrpc":"2.0", "id":441, "method":"Pixera.Timelines.Timeline.getCueAtIndex", "params":{"handle":123456789, "index":1}}
       <= {"jsonrpc":"2.0", "id":441, "result":123456789}

      // Returns the handle of the cue with the given name.
      // If multiple cues have the same name, the handle to the first match will be returned.
      // name: name of cue
      handle getCueFromName(string name);
       => {"jsonrpc":"2.0", "id":442, "method":"Pixera.Timelines.Timeline.getCueFromName", "params":{"handle":123456789, "name":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":442, "result":123456789}

      // Returns the handle of the cue with the given number.
      // If multiple cues have the same number, the handle to the first match will be returned.
      // number: number of cue
      handle getCueFromNumber(int number);
       => {"jsonrpc":"2.0", "id":443, "method":"Pixera.Timelines.Timeline.getCueFromNumber", "params":{"handle":123456789, "number":1}}
       <= {"jsonrpc":"2.0", "id":443, "result":123456789}

      // Jumps to and executes the cue with the given name.
      // name: name of cue
      // blendDuration: optional parameter to set blend duration in seconds.
      null applyCueWithName(string name,optional<double> blendDuration);
       => {"jsonrpc":"2.0", "id":444, "method":"Pixera.Timelines.Timeline.applyCueWithName", "params":{"handle":123456789, "name":"Abcd", "blendDuration":val}}
       <= {"jsonrpc":"2.0", "id":444}

      // Jumps to and executes the cue with the given number.
      // number: number of cue
      // blendDuration: optional parameter to set blend duration in seconds.
      null applyCueWithNumber(int number,optional<double> blendDuration);
       => {"jsonrpc":"2.0", "id":445, "method":"Pixera.Timelines.Timeline.applyCueWithNumber", "params":{"handle":123456789, "number":1, "blendDuration":val}}
       <= {"jsonrpc":"2.0", "id":445}

      // Creates a cue and returns its handle.
      // name: Name of the cue
      // timeInFrames: Time on timeline in total frames
      // operation:
      // 1:Play
      // 2:Pause
      // 3:Jump
      // 4:Stop
      handle createCue(string name,double timeInFrames,int operation);
       => {"jsonrpc":"2.0", "id":446, "method":"Pixera.Timelines.Timeline.createCue", "params":{"handle":123456789, "name":"Abcd", "timeInFrames":1.0, "operation":1}}
       <= {"jsonrpc":"2.0", "id":446, "result":123456789}

      // Removes all cues.
      null removeCues();
       => {"jsonrpc":"2.0", "id":447, "method":"Pixera.Timelines.Timeline.removeCues", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":447}

      // Create pause cue before selected clips
      null createPauseCueBeforeSelectedClips();
       => {"jsonrpc":"2.0", "id":448, "method":"Pixera.Timelines.Timeline.createPauseCueBeforeSelectedClips", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":448}

      // Starts the timeline at the current time.
      null play();
       => {"jsonrpc":"2.0", "id":449, "method":"Pixera.Timelines.Timeline.play", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":449}

      // Pauses the timeline at the current time.
      null pause();
       => {"jsonrpc":"2.0", "id":450, "method":"Pixera.Timelines.Timeline.pause", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":450}

      // Stops the timeline.
      null stop();
       => {"jsonrpc":"2.0", "id":451, "method":"Pixera.Timelines.Timeline.stop", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":451}

      // Toggles the timeline transport mode between play and pause.
      null toggleTransport();
       => {"jsonrpc":"2.0", "id":452, "method":"Pixera.Timelines.Timeline.toggleTransport", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":452}

      // Stores all domination values. I.e. events are created at the current time.
      null store();
       => {"jsonrpc":"2.0", "id":453, "method":"Pixera.Timelines.Timeline.store", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":453}

      // Reset all domination values.
      null reset();
       => {"jsonrpc":"2.0", "id":454, "method":"Pixera.Timelines.Timeline.reset", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":454}

      // Returns the attributes of the timeline (see TimelineAttributes struct).
      null getAttributes();
       => {"jsonrpc":"2.0", "id":455, "method":"Pixera.Timelines.Timeline.getAttributes", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":455, "result":{"index":1, "name":"Abcd", "fps":1.0, "mode":1}}

      // Sets the current time in frames. Use getFps(.) to relate the frames to seconds.
      // This method is deprecated. setCurrentTime(int time) should be used instead.
      // time: Time in frames.
      boolean setCurrentFrame(int time);
       => {"jsonrpc":"2.0", "id":456, "method":"Pixera.Timelines.Timeline.setCurrentFrame", "params":{"handle":123456789, "time":1}}
       <= {"jsonrpc":"2.0", "id":456, "result":true}

      // Sets the current time in frames. Use getFps() to relate the frames to seconds.
      // time: Time in frames.
      null setCurrentTime(int time);
       => {"jsonrpc":"2.0", "id":457, "method":"Pixera.Timelines.Timeline.setCurrentTime", "params":{"handle":123456789, "time":1}}
       <= {"jsonrpc":"2.0", "id":457}

      // Returns the current time in frames. Use getFps() to relate the frames to seconds.
      int getCurrentTime();
       => {"jsonrpc":"2.0", "id":458, "method":"Pixera.Timelines.Timeline.getCurrentTime", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":458, "result":1}

      // Scrub frames up or down from current time.
      null scrubCurrentTime(int frames);
       => {"jsonrpc":"2.0", "id":459, "method":"Pixera.Timelines.Timeline.scrubCurrentTime", "params":{"handle":123456789, "frames":1}}
       <= {"jsonrpc":"2.0", "id":459}

      // Returns the current time as a hours, minutes, seconds, frames string.
      string getCurrentHMSF();
       => {"jsonrpc":"2.0", "id":460, "method":"Pixera.Timelines.Timeline.getCurrentHMSF", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":460, "result":"Abcd"}

      // Sets the transport mode of the timeline.
      // Mode Parameter: Play = 1, Pause = 2, Stop = 3.
      boolean setTransportMode(int mode);
       => {"jsonrpc":"2.0", "id":461, "method":"Pixera.Timelines.Timeline.setTransportMode", "params":{"handle":123456789, "mode":1}}
       <= {"jsonrpc":"2.0", "id":461, "result":true}

      // Returns the transport mode of the timeline.
      // Return values: Play = 1, Pause = 2, Stop = 3.
      int getTransportMode();
       => {"jsonrpc":"2.0", "id":462, "method":"Pixera.Timelines.Timeline.getTransportMode", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":462, "result":1}

      // Set timecode input for midi and artnet timecode.
      double setTimecodeInput(int hour,int minute,int second,int frame,double elapsedTime,boolean running,int freshMode,int stateToken,int format);
       => {"jsonrpc":"2.0", "id":463, "method":"Pixera.Timelines.Timeline.setTimecodeInput", "params":{"handle":123456789, "hour":1, "minute":1, "second":1, "frame":1, "elapsedTime":1.0, "running":true, "freshMode":1, "stateToken":1, "format":1}}
       <= {"jsonrpc":"2.0", "id":463, "result":1.0}

      // Returns the frames per second value used as a time base.
      double getFps();
       => {"jsonrpc":"2.0", "id":464, "method":"Pixera.Timelines.Timeline.getFps", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":464, "result":1.0}

      // Returns the name of the timeline with the given handle.
      string getName();
       => {"jsonrpc":"2.0", "id":465, "method":"Pixera.Timelines.Timeline.getName", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":465, "result":"Abcd"}

      // Rename the timeline.
      null setName(string name);
       => {"jsonrpc":"2.0", "id":466, "method":"Pixera.Timelines.Timeline.setName", "params":{"handle":123456789, "name":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":466}

      // Moves to next cue on timeline
      null moveToNextCue();
       => {"jsonrpc":"2.0", "id":467, "method":"Pixera.Timelines.Timeline.moveToNextCue", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":467}

      // Moves to next cue on timeline and ignores cue properties.
      null moveToNextCueIgnoreProperties();
       => {"jsonrpc":"2.0", "id":468, "method":"Pixera.Timelines.Timeline.moveToNextCueIgnoreProperties", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":468}

      // Returns handle to next cue on timeline.
      handle getCueNext();
       => {"jsonrpc":"2.0", "id":469, "method":"Pixera.Timelines.Timeline.getCueNext", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":469, "result":123456789}

      // Moves to previous cue on timeline.
      null moveToPreviousCue();
       => {"jsonrpc":"2.0", "id":470, "method":"Pixera.Timelines.Timeline.moveToPreviousCue", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":470}

      // Moves to previous cue on timeline and ignore cue properties
      null moveToPreviousCueIgnoreProperties();
       => {"jsonrpc":"2.0", "id":471, "method":"Pixera.Timelines.Timeline.moveToPreviousCueIgnoreProperties", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":471}

      // Returns previous cue on timeline.
      handle getCuePrevious();
       => {"jsonrpc":"2.0", "id":472, "method":"Pixera.Timelines.Timeline.getCuePrevious", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":472, "result":123456789}

      // Sets the next cue to be ignored when its reached.
      null ignoreNextCue();
       => {"jsonrpc":"2.0", "id":473, "method":"Pixera.Timelines.Timeline.ignoreNextCue", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":473}

      // Sets next cue with a specific operation to be ignored when reached.
      // 1: Play
      // 2: Pause
      // 3: Stop
      // 4: Jump
      null ignoreNextCueWithOperation(int cueOperation);
       => {"jsonrpc":"2.0", "id":474, "method":"Pixera.Timelines.Timeline.ignoreNextCueWithOperation", "params":{"handle":123456789, "cueOperation":1}}
       <= {"jsonrpc":"2.0", "id":474}

      // Fades between current and goal time. Time unit is frames.
      // if preloadDelayInMilliseconds is not set system fade to time delay is used
      null blendToTime(double goalTime,double blendDuration,optional<int> preloadDelayInMilliseconds);
       => {"jsonrpc":"2.0", "id":475, "method":"Pixera.Timelines.Timeline.blendToTime", "params":{"handle":123456789, "goalTime":1.0, "blendDuration":1.0, "preloadDelayInMilliseconds":val}}
       <= {"jsonrpc":"2.0", "id":475}

      // Fades between current and goal time. Time unit is frames. The transport mode at goal time is set to
      // play (transportMode = 1) or pause (transportMode = 2).
      // if preloadDelayInMilliseconds is not set system fade to time delay is used
      null blendToTimeWithTransportMode(double goalTime,double blendDuration,int transportMode,optional<int> preloadDelayInMilliseconds);
       => {"jsonrpc":"2.0", "id":476, "method":"Pixera.Timelines.Timeline.blendToTimeWithTransportMode", "params":{"handle":123456789, "goalTime":1.0, "blendDuration":1.0, "transportMode":1, "preloadDelayInMilliseconds":val}}
       <= {"jsonrpc":"2.0", "id":476}

      // Sets the blend-to-time mode.
      // 1: Cross fade
      // 2: Dip to transparent
      boolean setBlendToTimeMode(int mode);
       => {"jsonrpc":"2.0", "id":477, "method":"Pixera.Timelines.Timeline.setBlendToTimeMode", "params":{"handle":123456789, "mode":1}}
       <= {"jsonrpc":"2.0", "id":477, "result":true}

      // Sets the speed factor. The value of 'factor' has to be larger than 0. Use this method carefully.
      // To manipulate playback speed we recommend to use setTransportAttributes(.) for the "Transport"
      // parameters of each layer.
      null setSpeedFactor(double factor);
       => {"jsonrpc":"2.0", "id":478, "method":"Pixera.Timelines.Timeline.setSpeedFactor", "params":{"handle":123456789, "factor":1.0}}
       <= {"jsonrpc":"2.0", "id":478}

      // Returns the speed factor.
      double getSpeedFactor();
       => {"jsonrpc":"2.0", "id":479, "method":"Pixera.Timelines.Timeline.getSpeedFactor", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":479, "result":1.0}

      // Sets the opacity value.
      null setOpacity(double value);
       => {"jsonrpc":"2.0", "id":480, "method":"Pixera.Timelines.Timeline.setOpacity", "params":{"handle":123456789, "value":1.0}}
       <= {"jsonrpc":"2.0", "id":480}

      // Returns the opacity value.
      double getOpacity();
       => {"jsonrpc":"2.0", "id":481, "method":"Pixera.Timelines.Timeline.getOpacity", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":481, "result":1.0}

      // Starts opacity animation from current opacity to 1 (fadeIn == true) or 0 (fadeIn == false).
      // The parameter fullFadeDuration represents the time a complete animation from 0 to 1 or vice versa would
      // last. If the current opacity is inbetween, the executed fade would last less time. E.g. a fade out
      // starting at opacity 0.3 would last fullFadeDuration * 0.3.
      // Time unit is frames.
      null startOpacityAnimation(boolean fadeIn,double fullFadeDuration);
       => {"jsonrpc":"2.0", "id":482, "method":"Pixera.Timelines.Timeline.startOpacityAnimation", "params":{"handle":123456789, "fadeIn":true, "fullFadeDuration":1.0}}
       <= {"jsonrpc":"2.0", "id":482}

      // Sets the SMPTE timecode mode.
      // 0: None
      // 1: Receive
      // 2: Send
      null setSmpteMode(int mode);
       => {"jsonrpc":"2.0", "id":483, "method":"Pixera.Timelines.Timeline.setSmpteMode", "params":{"handle":123456789, "mode":1}}
       <= {"jsonrpc":"2.0", "id":483}

      // Returns the SMPTE timecode mode.
      int getSmpteMode();
       => {"jsonrpc":"2.0", "id":484, "method":"Pixera.Timelines.Timeline.getSmpteMode", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":484, "result":1}

      // Stores recorded domination values using the current settings.
      null storeRecordedValues();
       => {"jsonrpc":"2.0", "id":485, "method":"Pixera.Timelines.Timeline.storeRecordedValues", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":485}

      // Sets the SMPTE timecode input behaviour.
      // 1: Continue
      // 2: Pause
      // 3: Stop
      null setSmpteInputBehaviour(int mode);
       => {"jsonrpc":"2.0", "id":486, "method":"Pixera.Timelines.Timeline.setSmpteInputBehaviour", "params":{"handle":123456789, "mode":1}}
       <= {"jsonrpc":"2.0", "id":486}

      // Returns the SMPTE timecode input behaviour.
      int getSmpteInputBehaviour();
       => {"jsonrpc":"2.0", "id":487, "method":"Pixera.Timelines.Timeline.getSmpteInputBehaviour", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":487, "result":1}

      // Sets the SMPTE timecode offset.
      null setSmpteOffset(double time);
       => {"jsonrpc":"2.0", "id":488, "method":"Pixera.Timelines.Timeline.setSmpteOffset", "params":{"handle":123456789, "time":1.0}}
       <= {"jsonrpc":"2.0", "id":488}

      // Returns the SMPTE timecode offset.
      double getSmpteOffset();
       => {"jsonrpc":"2.0", "id":489, "method":"Pixera.Timelines.Timeline.getSmpteOffset", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":489, "result":1.0}

      // Clears the recorded domination values and resets the reference time.
      null resetRecordedValues();
       => {"jsonrpc":"2.0", "id":490, "method":"Pixera.Timelines.Timeline.resetRecordedValues", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":490}
      string getTimelineInfosAsJsonString();
       => {"jsonrpc":"2.0", "id":491, "method":"Pixera.Timelines.Timeline.getTimelineInfosAsJsonString", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":491, "result":"Abcd"}
   handle getInst(string instancePath);
    => {"jsonrpc":"2.0", "id":492, "method":"Pixera.Timelines.Timeline.getInst", "params":{"instancePath":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":492, "result":123456789}
   handle getHandleFromInstancePath(string instancePath);
    => {"jsonrpc":"2.0", "id":493, "method":"Pixera.Timelines.Timeline.getHandleFromInstancePath", "params":{"instancePath":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":493, "result":123456789}
      string getInstancePath();
       => {"jsonrpc":"2.0", "id":494, "method":"Pixera.Timelines.Timeline.getInstancePath", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":494, "result":"Abcd"}
   }

   class Layer
   {
      // Pixera Control self-reference function.
      handle ref();
       => {"jsonrpc":"2.0", "id":495, "method":"Pixera.Timelines.Layer.ref", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":495, "result":123456789}

      // Removes the layer.
      null removeThis();
       => {"jsonrpc":"2.0", "id":496, "method":"Pixera.Timelines.Layer.removeThis", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":496}
      handle[] getNodes();
       => {"jsonrpc":"2.0", "id":497, "method":"Pixera.Timelines.Layer.getNodes", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":497, "result":[123456789, ...]}

      // Returns a node immediately below the layer based on the name displayed in the 
      // Timeline UI (e.g. the "Position" node below a standard layer).
      handle getNodeWithName(string name);
       => {"jsonrpc":"2.0", "id":498, "method":"Pixera.Timelines.Layer.getNodeWithName", "params":{"handle":123456789, "name":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":498, "result":123456789}

      // Returns a handle to a parameter node child with the given name. At the level of the
      // layer, this will deliver those parameters (e.g. "Transport") that are direct children
      // of the layer. Other parameters can be accessed via the node children of the layer
      // (e.g. the x position is a child of the "Position" node).
      handle getParamWithName(string name);
       => {"jsonrpc":"2.0", "id":499, "method":"Pixera.Timelines.Layer.getParamWithName", "params":{"handle":123456789, "name":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":499, "result":123456789}

      // Returns the current position, rotation and scale values (array with 9 entries) 
      // of the layer as determined by the clip at the given time. If no clip is found
      // then the returned array will be empty.
      double[] getSpatialParametersAtTime(double time);
       => {"jsonrpc":"2.0", "id":500, "method":"Pixera.Timelines.Layer.getSpatialParametersAtTime", "params":{"handle":123456789, "time":1.0}}
       <= {"jsonrpc":"2.0", "id":500, "result":[1.0, ...]}

      // Returns the parent timeline.
      handle getTimeline();
       => {"jsonrpc":"2.0", "id":501, "method":"Pixera.Timelines.Layer.getTimeline", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":501, "result":123456789}

      // Sets the name of the layer.
      null setName(string name);
       => {"jsonrpc":"2.0", "id":502, "method":"Pixera.Timelines.Layer.setName", "params":{"handle":123456789, "name":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":502}

      // Returns the name of the layer.
      string getName();
       => {"jsonrpc":"2.0", "id":503, "method":"Pixera.Timelines.Layer.getName", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":503, "result":"Abcd"}

      // Reset all dominant parameters of the layer.
      null resetLayer();
       => {"jsonrpc":"2.0", "id":504, "method":"Pixera.Timelines.Layer.resetLayer", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":504}

      // Get all parameter valus as of the layer as json.
      string getLayerJsonDescrip();
       => {"jsonrpc":"2.0", "id":505, "method":"Pixera.Timelines.Layer.getLayerJsonDescrip", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":505, "result":"Abcd"}

      // Set all parameter values as of the layer.
      null setLayerJsonDescrip(string descrip,boolean makeAllDominant);
       => {"jsonrpc":"2.0", "id":506, "method":"Pixera.Timelines.Layer.setLayerJsonDescrip", "params":{"handle":123456789, "descrip":"Abcd", "makeAllDominant":true}}
       <= {"jsonrpc":"2.0", "id":506}
      string getJsonDescrip();
       => {"jsonrpc":"2.0", "id":507, "method":"Pixera.Timelines.Layer.getJsonDescrip", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":507, "result":"Abcd"}
      null initFromJsonDescrip(string descrip);
       => {"jsonrpc":"2.0", "id":508, "method":"Pixera.Timelines.Layer.initFromJsonDescrip", "params":{"handle":123456789, "descrip":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":508}

      // Sets the opacity of the layer.
      null setOpacity(double value);
       => {"jsonrpc":"2.0", "id":509, "method":"Pixera.Timelines.Layer.setOpacity", "params":{"handle":123456789, "value":1.0}}
       <= {"jsonrpc":"2.0", "id":509}

      // Returns the opacity of the layer.
      double getOpacity();
       => {"jsonrpc":"2.0", "id":510, "method":"Pixera.Timelines.Layer.getOpacity", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":510, "result":1.0}

      // Resets the opacity of the layer
      null resetOpacity();
       => {"jsonrpc":"2.0", "id":511, "method":"Pixera.Timelines.Layer.resetOpacity", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":511}

      // Sets the volume of the layer.
      null setVolume(double value);
       => {"jsonrpc":"2.0", "id":512, "method":"Pixera.Timelines.Layer.setVolume", "params":{"handle":123456789, "value":1.0}}
       <= {"jsonrpc":"2.0", "id":512}

      // Returns the volume of the layer.
      double getVolume();
       => {"jsonrpc":"2.0", "id":513, "method":"Pixera.Timelines.Layer.getVolume", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":513, "result":1.0}

      // Resets the volume of the layer.
      null resetVolume();
       => {"jsonrpc":"2.0", "id":514, "method":"Pixera.Timelines.Layer.resetVolume", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":514}

      // Mutes the layer.
      null muteLayer();
       => {"jsonrpc":"2.0", "id":515, "method":"Pixera.Timelines.Layer.muteLayer", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":515}

      // Un-Mutes the layer.
      null unMuteLayer();
       => {"jsonrpc":"2.0", "id":516, "method":"Pixera.Timelines.Layer.unMuteLayer", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":516}

      // Returns whether the layer is muted.
      boolean getIsLayerMuted();
       => {"jsonrpc":"2.0", "id":517, "method":"Pixera.Timelines.Layer.getIsLayerMuted", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":517, "result":true}

      // Mutes the Audio.
      null muteAudio();
       => {"jsonrpc":"2.0", "id":518, "method":"Pixera.Timelines.Layer.muteAudio", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":518}

      // Un-Mutes the Audio.
      null unMuteAudio();
       => {"jsonrpc":"2.0", "id":519, "method":"Pixera.Timelines.Layer.unMuteAudio", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":519}

      // Returns whether the audio is muted.
      boolean getIsAudioMuted();
       => {"jsonrpc":"2.0", "id":520, "method":"Pixera.Timelines.Layer.getIsAudioMuted", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":520, "result":true}

      // The Dmx mute state is encoded in a single 32-Bit value.
      // Muting and unMuting is done by performing bitwise operations.
      // The first 18 FX can be muted individually.
      // The Value for those is: (2^fxIndex)
      // None: 0x0 or 0
      // Transport: 0x1 or 1
      // Opacity: 0x2 or 2
      // Position: 0x4 or 4
      // Rotation: 0x8 or 8
      // Scale: 0x10 or 16
      // FxStart = 0x20 or 32
      // FxEnd = 0x400000 or 4194304
      // FxAll = 0x7FFFE0 or 8388576
      // All = 0x7FFFFF or 8388607
      int getDmxMuteState();
       => {"jsonrpc":"2.0", "id":521, "method":"Pixera.Timelines.Layer.getDmxMuteState", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":521, "result":1}
      null setDmxMuteState(uint muteState);
       => {"jsonrpc":"2.0", "id":522, "method":"Pixera.Timelines.Layer.setDmxMuteState", "params":{"handle":123456789, "muteState":1}}
       <= {"jsonrpc":"2.0", "id":522}
      null toggleExplicitMute(uint flag);
       => {"jsonrpc":"2.0", "id":523, "method":"Pixera.Timelines.Layer.toggleExplicitMute", "params":{"handle":123456789, "flag":1}}
       <= {"jsonrpc":"2.0", "id":523}

      // Sets the mode and loop state of the layer's transport parameter.
      null setTransport(int mode,boolean loop);
       => {"jsonrpc":"2.0", "id":524, "method":"Pixera.Timelines.Layer.setTransport", "params":{"handle":123456789, "mode":1, "loop":true}}
       <= {"jsonrpc":"2.0", "id":524}

      // Returns the mode of the layer's transport parameter.
      int getTransportMode();
       => {"jsonrpc":"2.0", "id":525, "method":"Pixera.Timelines.Layer.getTransportMode", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":525, "result":1}

      // Reset the state of the layer's transport parameter.
      null resetTransportMode();
       => {"jsonrpc":"2.0", "id":526, "method":"Pixera.Timelines.Layer.resetTransportMode", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":526}

      // Returns the loop state of the layer's transport parameter.
      boolean getTransportLoop();
       => {"jsonrpc":"2.0", "id":527, "method":"Pixera.Timelines.Layer.getTransportLoop", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":527, "result":true}

      // Assigns a resource to the layer. The id is conceptually the handle but the
      // handle can not be passed directly for some implementations of the API. Therefore,
      // Resource.getId() should be used to fill this parameter.
      // Note that, up to and including API revision 14, this function took effect by
      // changing the resource assignment of the current clip. From revision 15 onwards,
      // the function works by assigning the resource to the layer as a dominant value
      // independent of the clips in the layer.
      null assignResource(double id);
       => {"jsonrpc":"2.0", "id":528, "method":"Pixera.Timelines.Layer.assignResource", "params":{"handle":123456789, "id":1.0}}
       <= {"jsonrpc":"2.0", "id":528}

      // Assigns a resource to the layer while besides the resource id also a fade duration
      // has to be passed to the function. The id is conceptually the handle but the handle
      // can not be passed directly for some implementations of the API. Therefore,
      // Resource.getId() should be used to fill this parameter. The unit of the parameter
      // fadeDuration is seconds. Only pass values >= 0. While 0 means 'no fade'.
      null assignResourceWithFade(double id,double fadeDuration);
       => {"jsonrpc":"2.0", "id":529, "method":"Pixera.Timelines.Layer.assignResourceWithFade", "params":{"handle":123456789, "id":1.0, "fadeDuration":1.0}}
       <= {"jsonrpc":"2.0", "id":529}

      // Returns the resource currently assigned to the layer.
      handle getAssignedResource();
       => {"jsonrpc":"2.0", "id":530, "method":"Pixera.Timelines.Layer.getAssignedResource", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":530, "result":123456789}

      // Reset the resource currently assigned to the layer.
      null resetAssignedResource();
       => {"jsonrpc":"2.0", "id":531, "method":"Pixera.Timelines.Layer.resetAssignedResource", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":531}

      // Returns the resource currently assigned to the layer.
      handle getAssignedModelResource();
       => {"jsonrpc":"2.0", "id":532, "method":"Pixera.Timelines.Layer.getAssignedModelResource", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":532, "result":123456789}

      // Reset the resource currently assigned to the layer.
      null resetAssignedModelResource();
       => {"jsonrpc":"2.0", "id":533, "method":"Pixera.Timelines.Layer.resetAssignedModelResource", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":533}

      // get assigend fx names.
      string[] getFxNames();
       => {"jsonrpc":"2.0", "id":534, "method":"Pixera.Timelines.Layer.getFxNames", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":534, "result":[Efgh, ...]}

      // Sets the duration of the fade that is applied when the dominant resource of the layer is changed, 
      // see API function Layer.assignResource(.). The unit of the value parameter is seconds.
      null setFadeDurationDominantResourceChange(double value);
       => {"jsonrpc":"2.0", "id":535, "method":"Pixera.Timelines.Layer.setFadeDurationDominantResourceChange", "params":{"handle":123456789, "value":1.0}}
       <= {"jsonrpc":"2.0", "id":535}

      // Returns the duration of the fade that is applied when the dominant resource of the layer is changed.
      // The unit of the returned value is seconds.
      double getFadeDurationDominantResourceChange();
       => {"jsonrpc":"2.0", "id":536, "method":"Pixera.Timelines.Layer.getFadeDurationDominantResourceChange", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":536, "result":1.0}

      // Creates a clip at current time and returns a handle to it.
      handle createClip();
       => {"jsonrpc":"2.0", "id":537, "method":"Pixera.Timelines.Layer.createClip", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":537, "result":123456789}

      // Creates a clip at the given time and returns a handle to it.
      // Time in frames.
      handle createClipAtTime(double timeInFrames);
       => {"jsonrpc":"2.0", "id":538, "method":"Pixera.Timelines.Layer.createClipAtTime", "params":{"handle":123456789, "timeInFrames":1.0}}
       <= {"jsonrpc":"2.0", "id":538, "result":123456789}
      null controlClipBorder(handle clip,boolean isEnter,boolean isIncremental,double entryTime);
       => {"jsonrpc":"2.0", "id":539, "method":"Pixera.Timelines.Layer.controlClipBorder", "params":{"handle":123456789, "clip":123456789, "isEnter":true, "isIncremental":true, "entryTime":1.0}}
       <= {"jsonrpc":"2.0", "id":539}

      // Returns the clip at the given index. Index is 0-based.
      handle getClipAtIndex(int index);
       => {"jsonrpc":"2.0", "id":540, "method":"Pixera.Timelines.Layer.getClipAtIndex", "params":{"handle":123456789, "index":1}}
       <= {"jsonrpc":"2.0", "id":540, "result":123456789}

      // Returns all clips.
      handle[] getClips();
       => {"jsonrpc":"2.0", "id":541, "method":"Pixera.Timelines.Layer.getClips", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":541, "result":[123456789, ...]}

      // Returns current clip
      handle getClipCurrent(int offset);
       => {"jsonrpc":"2.0", "id":542, "method":"Pixera.Timelines.Layer.getClipCurrent", "params":{"handle":123456789, "offset":1}}
       <= {"jsonrpc":"2.0", "id":542, "result":123456789}

      // Returns all clips.
      handle[] getClipsSelected();
       => {"jsonrpc":"2.0", "id":543, "method":"Pixera.Timelines.Layer.getClipsSelected", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":543, "result":[123456789, ...]}

      // Removes all clips.
      null removeClips();
       => {"jsonrpc":"2.0", "id":544, "method":"Pixera.Timelines.Layer.removeClips", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":544}

      // Sets the screen with name given as layer's home screen.
      null setHomeScreenFromScreenName(string screenName);
       => {"jsonrpc":"2.0", "id":545, "method":"Pixera.Timelines.Layer.setHomeScreenFromScreenName", "params":{"handle":123456789, "screenName":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":545}

      // Returns the name of the current home screen.
      string getHomeScreenName();
       => {"jsonrpc":"2.0", "id":546, "method":"Pixera.Timelines.Layer.getHomeScreenName", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":546, "result":"Abcd"}

      // Set the blend mode of the layer by name.
      null setBlendMode(string blendMode);
       => {"jsonrpc":"2.0", "id":547, "method":"Pixera.Timelines.Layer.setBlendMode", "params":{"handle":123456789, "blendMode":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":547}

      // Get the blend mode of the fayer.
      string getBlendMode();
       => {"jsonrpc":"2.0", "id":548, "method":"Pixera.Timelines.Layer.getBlendMode", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":548, "result":"Abcd"}

      // Add effect by resource id.
      // Use Pixera.Resources.Resource.getInst(resourcePath).getId() to get resource id.
      null addEffectById(double id);
       => {"jsonrpc":"2.0", "id":549, "method":"Pixera.Timelines.Layer.addEffectById", "params":{"handle":123456789, "id":1.0}}
       <= {"jsonrpc":"2.0", "id":549}

      // Sets the 'preload permanently' status of the layer.
      null setPreloadPermanently(boolean doPreloadPermanently);
       => {"jsonrpc":"2.0", "id":550, "method":"Pixera.Timelines.Layer.setPreloadPermanently", "params":{"handle":123456789, "doPreloadPermanently":true}}
       <= {"jsonrpc":"2.0", "id":550}

      // Returns the 'preload permanently' status of the layer.
      boolean getPreloadPermanently();
       => {"jsonrpc":"2.0", "id":551, "method":"Pixera.Timelines.Layer.getPreloadPermanently", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":551, "result":true}

      // Sets the restrict to specific services state and the list of IPs of the services.
      null setRestrictToServiceWithIps(boolean doRestrict,string[] ipAdresses);
       => {"jsonrpc":"2.0", "id":552, "method":"Pixera.Timelines.Layer.setRestrictToServiceWithIps", "params":{"handle":123456789, "doRestrict":true, "ipAdresses":[Efgh, ...]}}
       <= {"jsonrpc":"2.0", "id":552}

      // Returns the restrict to service state.
      boolean getRestrictToService();
       => {"jsonrpc":"2.0", "id":553, "method":"Pixera.Timelines.Layer.getRestrictToService", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":553, "result":true}

      // Returns the list of restricted service IPs in a comma separated string.
      string[] getRestrictedServiceIps();
       => {"jsonrpc":"2.0", "id":554, "method":"Pixera.Timelines.Layer.getRestrictedServiceIps", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":554, "result":[Efgh, ...]}

      // Get offsets.
      double[] getOffsets();
       => {"jsonrpc":"2.0", "id":555, "method":"Pixera.Timelines.Layer.getOffsets", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":555, "result":[1.0, ...]}

      // Set offsets.
      null setOffsets(optional<double> x,optional<double> y,optional<double> z,optional<double> xr,optional<double> yr,optional<double> zr,optional<double> xScale,optional<double> yScale,optional<double> zScale);
       => {"jsonrpc":"2.0", "id":556, "method":"Pixera.Timelines.Layer.setOffsets", "params":{"handle":123456789, "x":val, "y":val, "z":val, "xr":val, "yr":val, "zr":val, "xScale":val, "yScale":val, "zScale":val}}
       <= {"jsonrpc":"2.0", "id":556}

      // Sets the current dominant value or clip value to offset by typeindex
      // resetDominant and removeKeyframesClips are optional and false on default
      // typeIndex 0 = position,
      // typeIndex 1 = rotation,
      // typeIndex 2 = scale
      null setCurrentValuesToOffset(int typeIndex,optional<bool> resetDominant,optional<bool> removeKeyframesClips);
       => {"jsonrpc":"2.0", "id":557, "method":"Pixera.Timelines.Layer.setCurrentValuesToOffset", "params":{"handle":123456789, "typeIndex":1, "resetDominant":val, "removeKeyframesClips":val}}
       <= {"jsonrpc":"2.0", "id":557}
   handle getInst(string instancePath);
    => {"jsonrpc":"2.0", "id":558, "method":"Pixera.Timelines.Layer.getInst", "params":{"instancePath":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":558, "result":123456789}
   handle getHandleFromInstancePath(string instancePath);
    => {"jsonrpc":"2.0", "id":559, "method":"Pixera.Timelines.Layer.getHandleFromInstancePath", "params":{"instancePath":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":559, "result":123456789}
      string getInstancePath();
       => {"jsonrpc":"2.0", "id":560, "method":"Pixera.Timelines.Layer.getInstancePath", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":560, "result":"Abcd"}
   }

   class Clip
   {
      // Returns an id based on the handle. This is currently necessary in some situations
      // because some API implementations can not yet consume handles as parameters. 
      double getId();
       => {"jsonrpc":"2.0", "id":561, "method":"Pixera.Timelines.Clip.getId", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":561, "result":1.0}

      // Removes the clip.
      null removeThis();
       => {"jsonrpc":"2.0", "id":562, "method":"Pixera.Timelines.Clip.removeThis", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":562}

      // Returns a handle to the timeline in which the clip is situated.
      handle getTimeline();
       => {"jsonrpc":"2.0", "id":563, "method":"Pixera.Timelines.Clip.getTimeline", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":563, "result":123456789}
      null setTime(double time);
       => {"jsonrpc":"2.0", "id":564, "method":"Pixera.Timelines.Clip.setTime", "params":{"handle":123456789, "time":1.0}}
       <= {"jsonrpc":"2.0", "id":564}
      double getTime();
       => {"jsonrpc":"2.0", "id":565, "method":"Pixera.Timelines.Clip.getTime", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":565, "result":1.0}
      null setDuration(double duration);
       => {"jsonrpc":"2.0", "id":566, "method":"Pixera.Timelines.Clip.setDuration", "params":{"handle":123456789, "duration":1.0}}
       <= {"jsonrpc":"2.0", "id":566}
      double getDuration();
       => {"jsonrpc":"2.0", "id":567, "method":"Pixera.Timelines.Clip.getDuration", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":567, "result":1.0}
      null setLabel(string label);
       => {"jsonrpc":"2.0", "id":568, "method":"Pixera.Timelines.Clip.setLabel", "params":{"handle":123456789, "label":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":568}
      string getLabel();
       => {"jsonrpc":"2.0", "id":569, "method":"Pixera.Timelines.Clip.getLabel", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":569, "result":"Abcd"}

      // Play modes:
      // 1: Lock to time
      // 2: Play once
      // 3: Loop
      // 4: Pause at endpoint
      // 5: Lock to time no loop
      int getPlayMode();
       => {"jsonrpc":"2.0", "id":570, "method":"Pixera.Timelines.Clip.getPlayMode", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":570, "result":1}
      null setPlayMode(int playMode);
       => {"jsonrpc":"2.0", "id":571, "method":"Pixera.Timelines.Clip.setPlayMode", "params":{"handle":123456789, "playMode":1}}
       <= {"jsonrpc":"2.0", "id":571}

      // Get the speed 
      double getSpeed();
       => {"jsonrpc":"2.0", "id":572, "method":"Pixera.Timelines.Clip.getSpeed", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":572, "result":1.0}
      null setSpeed(double speed);
       => {"jsonrpc":"2.0", "id":573, "method":"Pixera.Timelines.Clip.setSpeed", "params":{"handle":123456789, "speed":1.0}}
       <= {"jsonrpc":"2.0", "id":573}

      // Get if frameblending is on or off
      boolean getBlendFrames();
       => {"jsonrpc":"2.0", "id":574, "method":"Pixera.Timelines.Clip.getBlendFrames", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":574, "result":true}
      null setBlendFrames(boolean doFrameblending);
       => {"jsonrpc":"2.0", "id":575, "method":"Pixera.Timelines.Clip.setBlendFrames", "params":{"handle":123456789, "doFrameblending":true}}
       <= {"jsonrpc":"2.0", "id":575}

      // Get the inpoint of clip
      double getInpoint();
       => {"jsonrpc":"2.0", "id":576, "method":"Pixera.Timelines.Clip.getInpoint", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":576, "result":1.0}
      null setInpoint(double inpoint);
       => {"jsonrpc":"2.0", "id":577, "method":"Pixera.Timelines.Clip.setInpoint", "params":{"handle":123456789, "inpoint":1.0}}
       <= {"jsonrpc":"2.0", "id":577}

      // Get the outpoint of clip
      double getOutpoint();
       => {"jsonrpc":"2.0", "id":578, "method":"Pixera.Timelines.Clip.getOutpoint", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":578, "result":1.0}
      null setOutpoint(double inpoint);
       => {"jsonrpc":"2.0", "id":579, "method":"Pixera.Timelines.Clip.setOutpoint", "params":{"handle":123456789, "inpoint":1.0}}
       <= {"jsonrpc":"2.0", "id":579}

      // Assigns a resource to the resource parameter within the clip.
      // Conceptually, the resId is a handle but the handle can not be passed directly for
      // some implementations of the API. Therefore, Resource.getId() should be used to
      // fill this parameter.
      // setToResourceDuration is optional and true if not set
      null assignResource(double resId,optional<bool> setToResourceDuration);
       => {"jsonrpc":"2.0", "id":580, "method":"Pixera.Timelines.Clip.assignResource", "params":{"handle":123456789, "resId":1.0, "setToResourceDuration":val}}
       <= {"jsonrpc":"2.0", "id":580}

      // Assigns a resource to the resource parameter within the clip.
      // Conceptually, the resId is a handle but the handle can not be passed directly for
      // some implementations of the API. Therefore, Resource.getId() should be used to
      // fill this parameter.
      handle getAssignedResource();
       => {"jsonrpc":"2.0", "id":581, "method":"Pixera.Timelines.Clip.getAssignedResource", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":581, "result":123456789}
      null setToResourceDuration();
       => {"jsonrpc":"2.0", "id":582, "method":"Pixera.Timelines.Clip.setToResourceDuration", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":582}

      // Creates a key at the given time with the given value in the clip parameter specified by
      // namePath, with the parts of namePath consisting of the strings shown in the timeline UI.
      // E.g. "Position/x" refers to the parameter responsible for the x position of the layer.
      // The name of this method may be changed in future versions of the API to reflect the 
      // "key" (instead of "event") terminology.
      null createEvent(string namePath,double time,double value);
       => {"jsonrpc":"2.0", "id":583, "method":"Pixera.Timelines.Clip.createEvent", "params":{"handle":123456789, "namePath":"Abcd", "time":1.0, "value":1.0}}
       <= {"jsonrpc":"2.0", "id":583}

      // Creates a key at the given time with the given value in the clip parameter specified by
      // namePath, with the parts of namePath consisting of the strings shown in the timeline UI.
      // E.g. "Position/x" refers to the parameter responsible for the x position of the layer.
      // The name of this method may be changed in future versions of the API to reflect the 
      // "key" (instead of "event") terminology.
      null createEventInPixelSpace(string namePath,double time,double value);
       => {"jsonrpc":"2.0", "id":584, "method":"Pixera.Timelines.Clip.createEventInPixelSpace", "params":{"handle":123456789, "namePath":"Abcd", "time":1.0, "value":1.0}}
       <= {"jsonrpc":"2.0", "id":584}

      // Remove a key at the given time with the given by namePath,
      // with the parts of namePath consisting of the strings shown in the timeline UI.
      // E.g. "Position/x" refers to the parameter responsible for the x position of the layer.
      // The name of this method may be changed in future versions of the API to reflect the 
      // "key" (instead of "event") terminology.
      null removeEvent(string namePath,double time);
       => {"jsonrpc":"2.0", "id":585, "method":"Pixera.Timelines.Clip.removeEvent", "params":{"handle":123456789, "namePath":"Abcd", "time":1.0}}
       <= {"jsonrpc":"2.0", "id":585}

      // Creates a Cue Before Clip
      handle createPauseCueBeforeClip();
       => {"jsonrpc":"2.0", "id":586, "method":"Pixera.Timelines.Clip.createPauseCueBeforeClip", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":586, "result":123456789}

      //set look up table
      null setColorTransformPath(string colorTransformPath);
       => {"jsonrpc":"2.0", "id":587, "method":"Pixera.Timelines.Clip.setColorTransformPath", "params":{"handle":123456789, "colorTransformPath":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":587}

      //get look up table
      string getColorTransformPath();
       => {"jsonrpc":"2.0", "id":588, "method":"Pixera.Timelines.Clip.getColorTransformPath", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":588, "result":"Abcd"}

      //clear look up table
      null clearColorTransformPath();
       => {"jsonrpc":"2.0", "id":589, "method":"Pixera.Timelines.Clip.clearColorTransformPath", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":589}

      //return all keyframes with time and value of this clip as json string
      string getKeyframesAsJsonString();
       => {"jsonrpc":"2.0", "id":590, "method":"Pixera.Timelines.Clip.getKeyframesAsJsonString", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":590, "result":"Abcd"}
   }


   // Returns a handle for the node specified by id after checking that a node with the id exists.
   // Conceptually, the id and the handle are the same but some implementations of the API can not
   // yet consume handles as parameters, making it necessary to translate between the two occasionally.
   handle getNodeFromId(double id);
    => {"jsonrpc":"2.0", "id":591, "method":"Pixera.Timelines.getNodeFromId", "params":{"id":1.0}}
    <= {"jsonrpc":"2.0", "id":591, "result":123456789}

   class Node
   {
      handle[] getParameters();
       => {"jsonrpc":"2.0", "id":592, "method":"Pixera.Timelines.Node.getParameters", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":592, "result":[123456789, ...]}
      string getName();
       => {"jsonrpc":"2.0", "id":593, "method":"Pixera.Timelines.Node.getName", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":593, "result":"Abcd"}

      // Returns a handle to a parameter node child with the given name. E.g. if the current
      // node is the "Position" folder then the name "x" would return the parameter node
      // representing the x position of the layer.
      handle getParamWithName(string name);
       => {"jsonrpc":"2.0", "id":594, "method":"Pixera.Timelines.Node.getParamWithName", "params":{"handle":123456789, "name":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":594, "result":123456789}

      // Sets the values of the children of the node in the order that they are displayed
      // in the timeline. This allows e.g. setting the x, y, and z values of a node with
      // one invocation.
      null setValues(double[] values);
       => {"jsonrpc":"2.0", "id":595, "method":"Pixera.Timelines.Node.setValues", "params":{"handle":123456789, "values":[1.0, ...]}}
       <= {"jsonrpc":"2.0", "id":595}

      // Returns the values of the children of the node in the order that they are displayed
      // in the timeline. This allows e.g. setting the x, y, and z values of a node with
      // one invocation.
      double[] getValues();
       => {"jsonrpc":"2.0", "id":596, "method":"Pixera.Timelines.Node.getValues", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":596, "result":[1.0, ...]}

      // Reset the values of the children of the node in the timeline.
      null resetValues();
       => {"jsonrpc":"2.0", "id":597, "method":"Pixera.Timelines.Node.resetValues", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":597}

      // Store all node values in the Timeline.
      null storeValues();
       => {"jsonrpc":"2.0", "id":598, "method":"Pixera.Timelines.Node.storeValues", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":598}
      null mute();
       => {"jsonrpc":"2.0", "id":599, "method":"Pixera.Timelines.Node.mute", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":599}
      null unMute();
       => {"jsonrpc":"2.0", "id":600, "method":"Pixera.Timelines.Node.unMute", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":600}
      null toggleMute();
       => {"jsonrpc":"2.0", "id":601, "method":"Pixera.Timelines.Node.toggleMute", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":601}
      boolean getIsMuted();
       => {"jsonrpc":"2.0", "id":602, "method":"Pixera.Timelines.Node.getIsMuted", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":602, "result":true}

      // Returns a handle to the timeline that holds the node.
      handle getTimeline();
       => {"jsonrpc":"2.0", "id":603, "method":"Pixera.Timelines.Node.getTimeline", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":603, "result":123456789}
   handle getInst(string instancePath);
    => {"jsonrpc":"2.0", "id":604, "method":"Pixera.Timelines.Node.getInst", "params":{"instancePath":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":604, "result":123456789}
   handle getHandleFromInstancePath(string instancePath);
    => {"jsonrpc":"2.0", "id":605, "method":"Pixera.Timelines.Node.getHandleFromInstancePath", "params":{"instancePath":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":605, "result":123456789}
      string getInstancePath();
       => {"jsonrpc":"2.0", "id":606, "method":"Pixera.Timelines.Node.getInstancePath", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":606, "result":"Abcd"}
   }

   // Attributes of the transport parameter's state (see
   // Param.setTransportAttributes()).
   struct TransportAttributes
   {
      int mode;
      double speed;
      boolean loop;
      double inpoint;
      double outpoint;
   }

   class Param
   {
      string getName();
       => {"jsonrpc":"2.0", "id":607, "method":"Pixera.Timelines.Param.getName", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":607, "result":"Abcd"}
      boolean getIsChannel();
       => {"jsonrpc":"2.0", "id":608, "method":"Pixera.Timelines.Param.getIsChannel", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":608, "result":true}

      //set parameter value. can be double or string
      null setValue(timelineParamValue value);
       => {"jsonrpc":"2.0", "id":609, "method":"Pixera.Timelines.Param.setValue", "params":{"handle":123456789, "value":1.0 or "Abcd"}}
       <= {"jsonrpc":"2.0", "id":609}
      null setValueRelativ(double value);
       => {"jsonrpc":"2.0", "id":610, "method":"Pixera.Timelines.Param.setValueRelativ", "params":{"handle":123456789, "value":1.0}}
       <= {"jsonrpc":"2.0", "id":610}

      //return can be double or string
      timelineParamValue getValue();
       => {"jsonrpc":"2.0", "id":611, "method":"Pixera.Timelines.Param.getValue", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":611, "result":1.0 or "Abcd"}
      null resetValue();
       => {"jsonrpc":"2.0", "id":612, "method":"Pixera.Timelines.Param.resetValue", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":612}

      // Store parameter value in the Timeline.
      null storeValue();
       => {"jsonrpc":"2.0", "id":613, "method":"Pixera.Timelines.Param.storeValue", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":613}

      // Sets the transport state. Only effective for the "Transport" parameter of each layer.
      // Mode is as defined for Timelines.Timeline.setTransportMode().
      // inpoint and outpoint are in frames. Inpoint of zero is ignored at pause. Outpoint of zero is always ignored.
      null setTransportAttributes(int mode,double speed,boolean loop,int inpoint,int outpoint);
       => {"jsonrpc":"2.0", "id":614, "method":"Pixera.Timelines.Param.setTransportAttributes", "params":{"handle":123456789, "mode":1, "speed":1.0, "loop":true, "inpoint":1, "outpoint":1}}
       <= {"jsonrpc":"2.0", "id":614}

      // Returns the attributes of the current transport state.
      null getAttributes();
       => {"jsonrpc":"2.0", "id":615, "method":"Pixera.Timelines.Param.getAttributes", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":615, "result":{"mode":1, "speed":1.0, "loop":true, "inpoint":1.0, "outpoint":1.0}}
      null mute();
       => {"jsonrpc":"2.0", "id":616, "method":"Pixera.Timelines.Param.mute", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":616}
      null unMute();
       => {"jsonrpc":"2.0", "id":617, "method":"Pixera.Timelines.Param.unMute", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":617}
      null toggleMute();
       => {"jsonrpc":"2.0", "id":618, "method":"Pixera.Timelines.Param.toggleMute", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":618}
      boolean getIsMuted();
       => {"jsonrpc":"2.0", "id":619, "method":"Pixera.Timelines.Param.getIsMuted", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":619, "result":true}
   handle getInst(string instancePath);
    => {"jsonrpc":"2.0", "id":620, "method":"Pixera.Timelines.Param.getInst", "params":{"instancePath":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":620, "result":123456789}
   handle getHandleFromInstancePath(string instancePath);
    => {"jsonrpc":"2.0", "id":621, "method":"Pixera.Timelines.Param.getHandleFromInstancePath", "params":{"instancePath":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":621, "result":123456789}
      string getInstancePath();
       => {"jsonrpc":"2.0", "id":622, "method":"Pixera.Timelines.Param.getInstancePath", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":622, "result":"Abcd"}
   }

   // Struct delivered by Cue.getCueAttributes.
   // The members are the same as the return values of the corresponding accessor methods.
   struct CueAttributes
   {
      int index;
      string name;
      int operation;
      int jumpMode;
      double jumpGoalTime;
      string jumpGoalLabel;
      handle jumpGoalCue;
      int number;
      double waitDuration;
   }

   class Cue
   {
      // Removes cue.
      null removeThis();
       => {"jsonrpc":"2.0", "id":623, "method":"Pixera.Timelines.Cue.removeThis", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":623}

      // Jumps to and executes the cue.
      // blendDuration: optional parameter to set blend duration in seconds.
      null apply(optional<double> blendDuration);
       => {"jsonrpc":"2.0", "id":624, "method":"Pixera.Timelines.Cue.apply", "params":{"handle":123456789, "blendDuration":val}}
       <= {"jsonrpc":"2.0", "id":624}

      // Blends to and executes the cue. Deprecated method. Use apply().
      // blendDuration: blend duration in seconds.
      null blendToThis(double blendDuration);
       => {"jsonrpc":"2.0", "id":625, "method":"Pixera.Timelines.Cue.blendToThis", "params":{"handle":123456789, "blendDuration":1.0}}
       <= {"jsonrpc":"2.0", "id":625}

      // Returns the attributes of the cue (see CueAttributes struct).
      null getAttributes();
       => {"jsonrpc":"2.0", "id":626, "method":"Pixera.Timelines.Cue.getAttributes", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":626, "result":{"index":1, "name":"Abcd", "operation":1, "jumpMode":1, "jumpGoalTime":1.0, "jumpGoalLabel":"Abcd", "jumpGoalCue":123456789, "number":1, "waitDuration":1.0}}

      // Returns a handle to the timeline in which the cue is situated.
      handle getTimeline();
       => {"jsonrpc":"2.0", "id":627, "method":"Pixera.Timelines.Cue.getTimeline", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":627, "result":123456789}

      // Returns the time-ordered index of the cue in the timeline (-1 if the cue is not found).
      int getIndex();
       => {"jsonrpc":"2.0", "id":628, "method":"Pixera.Timelines.Cue.getIndex", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":628, "result":1}

      // Returns the name of the cue.
      string getName();
       => {"jsonrpc":"2.0", "id":629, "method":"Pixera.Timelines.Cue.getName", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":629, "result":"Abcd"}

      // Sets the name of the cue.
      boolean setName(string name);
       => {"jsonrpc":"2.0", "id":630, "method":"Pixera.Timelines.Cue.setName", "params":{"handle":123456789, "name":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":630, "result":true}

      // Returns the info of the cue.
      string getNote();
       => {"jsonrpc":"2.0", "id":631, "method":"Pixera.Timelines.Cue.getNote", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":631, "result":"Abcd"}

      // Sets the info of the cue.
      boolean setNote(string note);
       => {"jsonrpc":"2.0", "id":632, "method":"Pixera.Timelines.Cue.setNote", "params":{"handle":123456789, "note":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":632, "result":true}

      // Returns the operation mode of the cue.
      // 1: Play
      // 2: Pause
      // 3: Stop
      // 4: Jump
      int getOperation();
       => {"jsonrpc":"2.0", "id":633, "method":"Pixera.Timelines.Cue.getOperation", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":633, "result":1}

      // Sets the operation mode for the cue.
      // 1: Play
      // 2: Pause
      // 3: Stop
      // 4: Jump
      boolean setOperation(int operation);
       => {"jsonrpc":"2.0", "id":634, "method":"Pixera.Timelines.Cue.setOperation", "params":{"handle":123456789, "operation":1}}
       <= {"jsonrpc":"2.0", "id":634, "result":true}

      // Returns the jump mode of the cue.
      // 0: None
      // 1: To time
      // 2: To cue
      int getJumpMode();
       => {"jsonrpc":"2.0", "id":635, "method":"Pixera.Timelines.Cue.getJumpMode", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":635, "result":1}

      // Sets the jump mode of the cue with given handle (this only affects the cue
      // if it has its operation set to "jump").
      // 0: None
      // 1: To time
      // 2: To cue
      boolean setJumpMode(int jumpMode);
       => {"jsonrpc":"2.0", "id":636, "method":"Pixera.Timelines.Cue.setJumpMode", "params":{"handle":123456789, "jumpMode":1}}
       <= {"jsonrpc":"2.0", "id":636, "result":true}

      // Returns the time in frames of the jump goal of the cue.
      double getJumpGoalTime();
       => {"jsonrpc":"2.0", "id":637, "method":"Pixera.Timelines.Cue.getJumpGoalTime", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":637, "result":1.0}

      // Sets the time the timline should jump to if the cue is reached.
      // This only affects the cue if it's set to jumpToTime.
      boolean setJumpGoalTime(double time);
       => {"jsonrpc":"2.0", "id":638, "method":"Pixera.Timelines.Cue.setJumpGoalTime", "params":{"handle":123456789, "time":1.0}}
       <= {"jsonrpc":"2.0", "id":638, "result":true}

      // Returns the name of the cue the timeline should jump to if the cue is reached.
      string getJumpGoalLabel();
       => {"jsonrpc":"2.0", "id":639, "method":"Pixera.Timelines.Cue.getJumpGoalLabel", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":639, "result":"Abcd"}

      // Returns the handle of the cue the timeline should jump to if the cue is reached.
      handle getJumpGoalCue();
       => {"jsonrpc":"2.0", "id":640, "method":"Pixera.Timelines.Cue.getJumpGoalCue", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":640, "result":123456789}

      // Sets the name of the cue to which the timeline should jump if the cue is reached.
      // This only affects the cue if it's set to jumpToLabel.
      boolean setJumpGoalLabel(string jumpGoalLabel);
       => {"jsonrpc":"2.0", "id":641, "method":"Pixera.Timelines.Cue.setJumpGoalLabel", "params":{"handle":123456789, "jumpGoalLabel":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":641, "result":true}

      // Returns the number of the cue.
      int getNumber();
       => {"jsonrpc":"2.0", "id":642, "method":"Pixera.Timelines.Cue.getNumber", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":642, "result":1}

      // Sets the number of the cue.
      null setNumber(int number);
       => {"jsonrpc":"2.0", "id":643, "method":"Pixera.Timelines.Cue.setNumber", "params":{"handle":123456789, "number":1}}
       <= {"jsonrpc":"2.0", "id":643}

      // Returns the time in frames that the cue will cause the timeline to wait when
      // it is reached before the cue is applied.
      double getWaitDuration();
       => {"jsonrpc":"2.0", "id":644, "method":"Pixera.Timelines.Cue.getWaitDuration", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":644, "result":1.0}

      // Sets the time in frames that the cue will cause the timeline to wait when
      // it is reached before the cue is applied.
      boolean setWaitDuration(double time);
       => {"jsonrpc":"2.0", "id":645, "method":"Pixera.Timelines.Cue.setWaitDuration", "params":{"handle":123456789, "time":1.0}}
       <= {"jsonrpc":"2.0", "id":645, "result":true}

      // Returns the time in frames, the blending between this cue and its jump target takes.
      double getBlendDuration();
       => {"jsonrpc":"2.0", "id":646, "method":"Pixera.Timelines.Cue.getBlendDuration", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":646, "result":1.0}

      // Sets the blend duration of a cue.
      // Time in Frames
      boolean setBlendDuration(double timeInFrames);
       => {"jsonrpc":"2.0", "id":647, "method":"Pixera.Timelines.Cue.setBlendDuration", "params":{"handle":123456789, "timeInFrames":1.0}}
       <= {"jsonrpc":"2.0", "id":647, "result":true}

      // Returns the time in frames for the cue.
      double getTime();
       => {"jsonrpc":"2.0", "id":648, "method":"Pixera.Timelines.Cue.getTime", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":648, "result":1.0}

      // Sets the time of the cue.
      // The unit of the parameter 'time' is frames.
      boolean setTime(double time);
       => {"jsonrpc":"2.0", "id":649, "method":"Pixera.Timelines.Cue.setTime", "params":{"handle":123456789, "time":1.0}}
       <= {"jsonrpc":"2.0", "id":649, "result":true}

      // Returns the name of the timeline that is triggered by this cue. An empty string is returned
      // when no timeline is triggered.
      string getTimelineToTriggerName();
       => {"jsonrpc":"2.0", "id":650, "method":"Pixera.Timelines.Cue.getTimelineToTriggerName", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":650, "result":"Abcd"}

      // Sets the timeline that is triggered by this cue. Returns a boolean. A return value false means
      // that something went wrong and the cue is not changed.
      // When the string parameter 'nameTimeline' is empty, the cue property 'Timeline to Trigger' is cleared.
      // I.e. the cue will not trigger any timeline.
      boolean setTimelineToTrigger(string nameTimeline);
       => {"jsonrpc":"2.0", "id":651, "method":"Pixera.Timelines.Cue.setTimelineToTrigger", "params":{"handle":123456789, "nameTimeline":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":651, "result":true}

      // Returns the applied playback mode of the timeline that is triggered by this cue.
      // The return value corresponds to: Play = 1, Pause = 2, Stop = 3.
      // 0 is returned when no timeline is triggered. 
      int getTimelineTriggerMode();
       => {"jsonrpc":"2.0", "id":652, "method":"Pixera.Timelines.Cue.getTimelineTriggerMode", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":652, "result":1}

      // Sets the applied playback mode of the timeline that is triggered by this cue. A return value false means
      // that something went wrong and the cue is not changed.
      // Mode Parameter: Play = 1, Pause = 2, Stop = 3.
      boolean setTimelineTriggerMode(int mode);
       => {"jsonrpc":"2.0", "id":653, "method":"Pixera.Timelines.Cue.setTimelineTriggerMode", "params":{"handle":123456789, "mode":1}}
       <= {"jsonrpc":"2.0", "id":653, "result":true}

      // Returns the applied time of the timeline that is triggered by this cue in frames.
      // -1 is returned when no timeline is triggered or no time is applied. 
      double getTimelineTriggerApplyTime();
       => {"jsonrpc":"2.0", "id":654, "method":"Pixera.Timelines.Cue.getTimelineTriggerApplyTime", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":654, "result":1.0}

      // Sets the applied time of the timeline that is triggered by this cue. A return value false means
      // that something went wrong and the cue is not changed.
      // The unit of the parameter 'time' is frames. The trigger time mode of this cue is set to 'Time'.
      // However, a value < 0. means that the apply time is resetted. I.e. no
      // time will be applied and the time mode of the cue is set to 'Current Time'.
      boolean setTimelineTriggerApplyTime(double time);
       => {"jsonrpc":"2.0", "id":655, "method":"Pixera.Timelines.Cue.setTimelineTriggerApplyTime", "params":{"handle":123456789, "time":1.0}}
       <= {"jsonrpc":"2.0", "id":655, "result":true}

      // Sets the apply cue of the timeline that is triggered by this cue. A return value false means
      // that something went wrong and the cue is not changed.
      // The trigger time mode of this cue is automatically set to 'Cue'.
      boolean setTimelineTriggerApplyCue(string goalCueLabel);
       => {"jsonrpc":"2.0", "id":656, "method":"Pixera.Timelines.Cue.setTimelineTriggerApplyCue", "params":{"handle":123456789, "goalCueLabel":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":656, "result":true}

      // Returns the countdown time to this cue in frames.
      // Returns zero when this cue was already passed.
      double getCountdown();
       => {"jsonrpc":"2.0", "id":657, "method":"Pixera.Timelines.Cue.getCountdown", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":657, "result":1.0}

      // Returns the countdown time to this cue as a hours, minutes, seconds, frames string.
      // Returns zero string when this cue was already passed.
      string getCountdownHMSF();
       => {"jsonrpc":"2.0", "id":658, "method":"Pixera.Timelines.Cue.getCountdownHMSF", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":658, "result":"Abcd"}

      // Sets the "Network Command" information for the cue. conveyorName must be one of the entries in the "API Output" dropdown of the cue inspector.
      // commandData is the string to be executed.
      null setCommand(string conveyorName,string commandData);
       => {"jsonrpc":"2.0", "id":659, "method":"Pixera.Timelines.Cue.setCommand", "params":{"handle":123456789, "conveyorName":"Abcd", "commandData":"Abcd"}}
       <= {"jsonrpc":"2.0", "id":659}
   handle getInst(string instancePath);
    => {"jsonrpc":"2.0", "id":660, "method":"Pixera.Timelines.Cue.getInst", "params":{"instancePath":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":660, "result":123456789}
   handle getHandleFromInstancePath(string instancePath);
    => {"jsonrpc":"2.0", "id":661, "method":"Pixera.Timelines.Cue.getHandleFromInstancePath", "params":{"instancePath":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":661, "result":123456789}
      string getInstancePath();
       => {"jsonrpc":"2.0", "id":662, "method":"Pixera.Timelines.Cue.getInstancePath", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":662, "result":"Abcd"}
   }
}

namespace Calibration
{
   // Sets the marker positions for projector calibration with external data.
   // Positions must contain the marker coordinates in world space in consecutive order 
   // like this: x1, y1, z1, x2, y2, z2, x3, y3, z3, ...
   // markerIds must contain a unique integer id for each marker in the same order as 
   // the marker positions. The markerIds matching the coordinates example are 1,2,3.
   null setMarkerPositions(double[] positions,int[] markerIds);
    => {"jsonrpc":"2.0", "id":663, "method":"Pixera.Calibration.setMarkerPositions", "params":{"positions":[1.0, ...], "markerIds":[1, ...]}}
    <= {"jsonrpc":"2.0", "id":663}
}

namespace WebViews
{
   null loadDeviceUi(string devicePath);
    => {"jsonrpc":"2.0", "id":664, "method":"Pixera.WebViews.loadDeviceUi", "params":{"devicePath":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":664}
   null activatePreviousFunc();
    => {"jsonrpc":"2.0", "id":665, "method":"Pixera.WebViews.activatePreviousFunc"}
    <= {"jsonrpc":"2.0", "id":665}
   null activateNextFunc();
    => {"jsonrpc":"2.0", "id":666, "method":"Pixera.WebViews.activateNextFunc"}
    <= {"jsonrpc":"2.0", "id":666}
   string getLastActivatedFunc();
    => {"jsonrpc":"2.0", "id":667, "method":"Pixera.WebViews.getLastActivatedFunc"}
    <= {"jsonrpc":"2.0", "id":667, "result":"Abcd"}
   null deviceActivated(string devicePath,boolean withSelection);
    => {"jsonrpc":"2.0", "id":668, "method":"Pixera.WebViews.deviceActivated", "params":{"devicePath":"Abcd", "withSelection":true}}
    <= {"jsonrpc":"2.0", "id":668}
   null funcActivated(string funcPath,boolean withSelection);
    => {"jsonrpc":"2.0", "id":669, "method":"Pixera.WebViews.funcActivated", "params":{"funcPath":"Abcd", "withSelection":true}}
    <= {"jsonrpc":"2.0", "id":669}
   null setFuncBodyState(string funcPath,string state);
    => {"jsonrpc":"2.0", "id":670, "method":"Pixera.WebViews.setFuncBodyState", "params":{"funcPath":"Abcd", "state":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":670}
   string getFuncBodyState(string funcPath);
    => {"jsonrpc":"2.0", "id":671, "method":"Pixera.WebViews.getFuncBodyState", "params":{"funcPath":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":671, "result":"Abcd"}
   null setTag(string tag,string text);
    => {"jsonrpc":"2.0", "id":672, "method":"Pixera.WebViews.setTag", "params":{"tag":"Abcd", "text":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":672}
   null setEditorIsUsingBlocks(boolean useBlocks);
    => {"jsonrpc":"2.0", "id":673, "method":"Pixera.WebViews.setEditorIsUsingBlocks", "params":{"useBlocks":true}}
    <= {"jsonrpc":"2.0", "id":673}
}

// Ui namespace is only accessible from plugins hosted in Pixera, i.e. it is
// not relevant to external API access.
namespace Ui
{
   handle getComboBoxWithId(double id);
    => {"jsonrpc":"2.0", "id":674, "method":"Pixera.Ui.getComboBoxWithId", "params":{"id":1.0}}
    <= {"jsonrpc":"2.0", "id":674, "result":123456789}

   // Set the current AppMode
   // 1 = Screens
   // 2 = Mapping
   // 3 = Compositing
   // 4 = Compositing Inside
   // 5 = Settings
   // 6 = Mapping Screens Feedarea
   // 7 = Control
   null setAppMode(int mode);
    => {"jsonrpc":"2.0", "id":675, "method":"Pixera.Ui.setAppMode", "params":{"mode":1}}
    <= {"jsonrpc":"2.0", "id":675}

   // Get the current AppMode
   int getAppMode();
    => {"jsonrpc":"2.0", "id":676, "method":"Pixera.Ui.getAppMode"}
    <= {"jsonrpc":"2.0", "id":676, "result":1}

   // Get display Testpattern
   boolean getDisplayTestpattern();
    => {"jsonrpc":"2.0", "id":677, "method":"Pixera.Ui.getDisplayTestpattern"}
    <= {"jsonrpc":"2.0", "id":677, "result":true}

   // Get display Testpattern
   null setDisplayTestpattern(boolean display);
    => {"jsonrpc":"2.0", "id":678, "method":"Pixera.Ui.setDisplayTestpattern", "params":{"display":true}}
    <= {"jsonrpc":"2.0", "id":678}

   // Get the current AppMode
   string getPreviewCameraAsJsonString();
    => {"jsonrpc":"2.0", "id":679, "method":"Pixera.Ui.getPreviewCameraAsJsonString"}
    <= {"jsonrpc":"2.0", "id":679, "result":"Abcd"}
   null setPreviewCameraAsJsonString(string cameraFrustrumStateString);
    => {"jsonrpc":"2.0", "id":680, "method":"Pixera.Ui.setPreviewCameraAsJsonString", "params":{"cameraFrustrumStateString":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":680}
   null setDisableContentRendering(boolean state);
    => {"jsonrpc":"2.0", "id":681, "method":"Pixera.Ui.setDisableContentRendering", "params":{"state":true}}
    <= {"jsonrpc":"2.0", "id":681}
   boolean getIsContentRenderingDisabled();
    => {"jsonrpc":"2.0", "id":682, "method":"Pixera.Ui.getIsContentRenderingDisabled"}
    <= {"jsonrpc":"2.0", "id":682, "result":true}
   null setDisableWorkspaceRendering(boolean state);
    => {"jsonrpc":"2.0", "id":683, "method":"Pixera.Ui.setDisableWorkspaceRendering", "params":{"state":true}}
    <= {"jsonrpc":"2.0", "id":683}
   boolean getIsWorkspaceRenderingDisabled();
    => {"jsonrpc":"2.0", "id":684, "method":"Pixera.Ui.getIsWorkspaceRenderingDisabled"}
    <= {"jsonrpc":"2.0", "id":684, "result":true}

   class ComboBox
   {
      null clear();
       => {"jsonrpc":"2.0", "id":685, "method":"Pixera.Ui.ComboBox.clear", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":685}
      null addItem(string item,int id);
       => {"jsonrpc":"2.0", "id":686, "method":"Pixera.Ui.ComboBox.addItem", "params":{"handle":123456789, "item":"Abcd", "id":1}}
       <= {"jsonrpc":"2.0", "id":686}
      null setSelectedId(int id);
       => {"jsonrpc":"2.0", "id":687, "method":"Pixera.Ui.ComboBox.setSelectedId", "params":{"handle":123456789, "id":1}}
       <= {"jsonrpc":"2.0", "id":687}
      int getSelectedId();
       => {"jsonrpc":"2.0", "id":688, "method":"Pixera.Ui.ComboBox.getSelectedId", "params":{"handle":123456789}}
       <= {"jsonrpc":"2.0", "id":688, "result":1}
   }
}

namespace Direct
{
   // Sets all entities registered in the current thread. Entities that were previously
   // registered that are not in the handle array are removed.
   // usageHints is either empty or it contains one entry for each handle. Possible entries are:
   //    "screen"
   //    "perspective"
   //    "parameter"
   //    "studioCamera"
   null setRegistered(handle[] hdls,int expectedFrequency,int dampingMs,string[] usageHints);
    => {"jsonrpc":"2.0", "id":689, "method":"Pixera.Direct.setRegistered", "params":{"hdls":[123456789, ...], "expectedFrequency":1, "dampingMs":1, "usageHints":[Efgh, ...]}}
    <= {"jsonrpc":"2.0", "id":689}

   // Updates the representation of all registered entities.
   null reloadRegistered();
    => {"jsonrpc":"2.0", "id":690, "method":"Pixera.Direct.reloadRegistered"}
    <= {"jsonrpc":"2.0", "id":690}

   // Register the screen for use with the Direct API.
   handle registerScreen(string name,int expectedFrequency,int dampingMs);
    => {"jsonrpc":"2.0", "id":691, "method":"Pixera.Direct.registerScreen", "params":{"name":"Abcd", "expectedFrequency":1, "dampingMs":1}}
    <= {"jsonrpc":"2.0", "id":691, "result":123456789}

   class Screen
   {
      // Sets the position in meters.
      null setPosition(optional<double> xPos,optional<double> yPos,optional<double> zPos);
       => {"jsonrpc":"2.0", "id":692, "method":"Pixera.Direct.Screen.setPosition", "params":{"handle":123456789, "xPos":val, "yPos":val, "zPos":val}}
       <= {"jsonrpc":"2.0", "id":692}

      // Sets the rotation in degrees.
      null setRotation(optional<double> xRot,optional<double> yRot,optional<double> zRot);
       => {"jsonrpc":"2.0", "id":693, "method":"Pixera.Direct.Screen.setRotation", "params":{"handle":123456789, "xRot":val, "yRot":val, "zRot":val}}
       <= {"jsonrpc":"2.0", "id":693}

      // Sets position and rotation in one API call.
      null setPosRot(optional<double> xPos,optional<double> yPos,optional<double> zPos,optional<double> xRot,optional<double> yRot,optional<double> zRot);
       => {"jsonrpc":"2.0", "id":694, "method":"Pixera.Direct.Screen.setPosRot", "params":{"handle":123456789, "xPos":val, "yPos":val, "zPos":val, "xRot":val, "yRot":val, "zRot":val}}
       <= {"jsonrpc":"2.0", "id":694}

      // Sets position, rotation and the perspective position for the first screen group in one API call.
      null setPosRotAndPerspectivePos(optional<double> xPos,optional<double> yPos,optional<double> zPos,optional<double> xRot,optional<double> yRot,optional<double> zRot,optional<double> perspXPos,optional<double> perspYPos,optional<double> perspZPos);
       => {"jsonrpc":"2.0", "id":695, "method":"Pixera.Direct.Screen.setPosRotAndPerspectivePos", "params":{"handle":123456789, "xPos":val, "yPos":val, "zPos":val, "xRot":val, "yRot":val, "zRot":val, "perspXPos":val, "perspYPos":val, "perspZPos":val}}
       <= {"jsonrpc":"2.0", "id":695}

      // Sets position, rotation and scale in one API call.
      null setPosRotScale(optional<double> xPos,optional<double> yPos,optional<double> zPos,optional<double> xRot,optional<double> yRot,optional<double> zRot,optional<double> xScale,optional<double> yScale,optional<double> zScale);
       => {"jsonrpc":"2.0", "id":696, "method":"Pixera.Direct.Screen.setPosRotScale", "params":{"handle":123456789, "xPos":val, "yPos":val, "zPos":val, "xRot":val, "yRot":val, "zRot":val, "xScale":val, "yScale":val, "zScale":val}}
       <= {"jsonrpc":"2.0", "id":696}

      // Enables time logging for the screen. Every 10 seconds values are printed to the pixera log
      // showing the number of messages and the minimum and maximum time between two messages for every second.
      null enableLogging(boolean enable);
       => {"jsonrpc":"2.0", "id":697, "method":"Pixera.Direct.Screen.enableLogging", "params":{"handle":123456789, "enable":true}}
       <= {"jsonrpc":"2.0", "id":697}
   }


   // Register the parameter for use with the Direct API. At the time when this function is executed
   // the layer should already have been displayed at least once. Otherwise the relevant underlying
   // attributes may not have been initialized yet and can not be cached.
   // The instance path traces the name hierarchy in the timeline tree. E.g. "Timeline 1.Position.x".
   handle registerParam(string instancePath);
    => {"jsonrpc":"2.0", "id":698, "method":"Pixera.Direct.registerParam", "params":{"instancePath":"Abcd"}}
    <= {"jsonrpc":"2.0", "id":698, "result":123456789}

   class Param
   {
      // Sets the param value. Note that this will bypass conversions and offsets determined by the GUI. 
      // E.g. layer-level offsets will not be taken into account and neither will resource-dependent scaling.
      null setValue(double value);
       => {"jsonrpc":"2.0", "id":699, "method":"Pixera.Direct.Param.setValue", "params":{"handle":123456789, "value":1.0}}
       <= {"jsonrpc":"2.0", "id":699}

      // Enables time logging for the param. Every 10 seconds values are printed to the pixera log
      // showing the number of messages and the minimum and maximum time between two messages for every second.
      null enableLogging(boolean enable);
       => {"jsonrpc":"2.0", "id":700, "method":"Pixera.Direct.Param.enableLogging", "params":{"handle":123456789, "enable":true}}
       <= {"jsonrpc":"2.0", "id":700}
   }


   // Register the camera with the screen group name for use with the Direct API.
   handle registerCamera(string cameraName,int expectedFrequency);
    => {"jsonrpc":"2.0", "id":701, "method":"Pixera.Direct.registerCamera", "params":{"cameraName":"Abcd", "expectedFrequency":1}}
    <= {"jsonrpc":"2.0", "id":701, "result":123456789}

   class Camera
   {
      // Sets the position in meters.
      null setPosition(double xPos,double yPos,double zPos);
       => {"jsonrpc":"2.0", "id":702, "method":"Pixera.Direct.Camera.setPosition", "params":{"handle":123456789, "xPos":1.0, "yPos":1.0, "zPos":1.0}}
       <= {"jsonrpc":"2.0", "id":702}

      // Sets the rotation in degrees.
      null setRotation(double xRot,double yRot,double zRot);
       => {"jsonrpc":"2.0", "id":703, "method":"Pixera.Direct.Camera.setRotation", "params":{"handle":123456789, "xRot":1.0, "yRot":1.0, "zRot":1.0}}
       <= {"jsonrpc":"2.0", "id":703}

      // Sets the position in meters, rotation and fov in degrees.
      null setTransformation(double xPos,double yPos,double zPos,double xRot,double yRot,double zRot,double fov,double aspectRatio);
       => {"jsonrpc":"2.0", "id":704, "method":"Pixera.Direct.Camera.setTransformation", "params":{"handle":123456789, "xPos":1.0, "yPos":1.0, "zPos":1.0, "xRot":1.0, "yRot":1.0, "zRot":1.0, "fov":1.0, "aspectRatio":1.0}}
       <= {"jsonrpc":"2.0", "id":704}

      // Sets the position in meters, rotation and fov in degrees, centerX, centerX and panelWidth in millimeters.
      null setTransformationAndLensProps(double xPos,double yPos,double zPos,double xRot,double yRot,double zRot,double fov,double aspectRatio,double nearClip,double farClip,double aperture,double focus,double iris,double k1,double k2,double centerX,double centerY,double panelWidth);
       => {"jsonrpc":"2.0", "id":705, "method":"Pixera.Direct.Camera.setTransformationAndLensProps", "params":{"handle":123456789, "xPos":1.0, "yPos":1.0, "zPos":1.0, "xRot":1.0, "yRot":1.0, "zRot":1.0, "fov":1.0, "aspectRatio":1.0, "nearClip":1.0, "farClip":1.0, "aperture":1.0, "focus":1.0, "iris":1.0, "k1":1.0, "k2":1.0, "centerX":1.0, "centerY":1.0, "panelWidth":1.0}}
       <= {"jsonrpc":"2.0", "id":705}

      // Sets the position in meters, rotation and fov in degrees, centerX, centerX and panelWidth in millimeters.
      null setTransformationAndLensPropsExt(double xPos,double yPos,double zPos,double xRot,double yRot,double zRot,double fov,double aspectRatio,double nearClip,double farClip,double aperture,double focus,double focalDistance,double zoom,double iris,double k1,double k2,double k3,double p1,double p2,double centerX,double centerY,double panelWidth,double overscan);
       => {"jsonrpc":"2.0", "id":706, "method":"Pixera.Direct.Camera.setTransformationAndLensPropsExt", "params":{"handle":123456789, "xPos":1.0, "yPos":1.0, "zPos":1.0, "xRot":1.0, "yRot":1.0, "zRot":1.0, "fov":1.0, "aspectRatio":1.0, "nearClip":1.0, "farClip":1.0, "aperture":1.0, "focus":1.0, "focalDistance":1.0, "zoom":1.0, "iris":1.0, "k1":1.0, "k2":1.0, "k3":1.0, "p1":1.0, "p2":1.0, "centerX":1.0, "centerY":1.0, "panelWidth":1.0, "overscan":1.0}}
       <= {"jsonrpc":"2.0", "id":706}
   }


   // Register the perspective with the screen name for use with the Direct API.
   handle registerPerspective(string screenName,int expectedFrequency);
    => {"jsonrpc":"2.0", "id":707, "method":"Pixera.Direct.registerPerspective", "params":{"screenName":"Abcd", "expectedFrequency":1}}
    <= {"jsonrpc":"2.0", "id":707, "result":123456789}

   class Perspective
   {
      // Sets the position in meters, rotation and fov in degrees.
      null setTransformation(double xPos,double yPos,double zPos,double xRot,double yRot,double zRot,double fov,double aspectRatio);
       => {"jsonrpc":"2.0", "id":708, "method":"Pixera.Direct.Perspective.setTransformation", "params":{"handle":123456789, "xPos":1.0, "yPos":1.0, "zPos":1.0, "xRot":1.0, "yRot":1.0, "zRot":1.0, "fov":1.0, "aspectRatio":1.0}}
       <= {"jsonrpc":"2.0", "id":708}

      // Sets the position in meters, rotation and fov in degrees.
      null setTransformationAndLensProps(double xPos,double yPos,double zPos,double xRot,double yRot,double zRot,double fov,double aspectRatio,double nearClip,double farClip,double aperture,double focus,double iris,double k1,double k2,double centerX,double centerY,double panelWidth);
       => {"jsonrpc":"2.0", "id":709, "method":"Pixera.Direct.Perspective.setTransformationAndLensProps", "params":{"handle":123456789, "xPos":1.0, "yPos":1.0, "zPos":1.0, "xRot":1.0, "yRot":1.0, "zRot":1.0, "fov":1.0, "aspectRatio":1.0, "nearClip":1.0, "farClip":1.0, "aperture":1.0, "focus":1.0, "iris":1.0, "k1":1.0, "k2":1.0, "centerX":1.0, "centerY":1.0, "panelWidth":1.0}}
       <= {"jsonrpc":"2.0", "id":709}
   }
}

namespace Unreal
{
namespace Utility
{
   int getSupportedUnrealPluginVersion();
    => {"jsonrpc":"2.0", "id":710, "method":"Pixera.Unreal.Utility.getSupportedUnrealPluginVersion"}
    <= {"jsonrpc":"2.0", "id":710, "result":1}
}

namespace Network
{
}

}

}

