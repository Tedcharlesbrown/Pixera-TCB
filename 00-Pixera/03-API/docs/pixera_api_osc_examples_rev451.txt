This documentation describes revision 451 of the API.

// All class methods imply a handle parameter in the JSON params object (see examples).
namespace Pixera
{
namespace Utility
{
   // Returns the current revision of the API.
   // Release versions have even revision numbers. Beta versions have odd revision numbers.
   int getApiRevision()
    => "/Pixera/Utility/getApiRevision"

   // Returns true if the function (or class method) is available.
   // functionName must be the fully qualified name of the function or method,
   // e.g. "Pixera.Screens.Screen.setPosition".
   boolean getHasFunction(string functionName)
    => "/Pixera/Utility/getHasFunction" arguments: "Abcd" 

   // Outputs a debug string into the Pixera log and returns the same string in
   // the reply.
   string outputDebug(string message)
    => "/Pixera/Utility/outputDebug" arguments: "Abcd" 
   string getLicenseJson()
    => "/Pixera/Utility/getLicenseJson"

   // Returns the number of milliseconds since midnight Jan 1st 1970 UTC.
   double getCurrentTime()
    => "/Pixera/Utility/getCurrentTime"

   // Returns the current time as an ISO-8601 string (using the local timezone).
   string getCurrentTimeAsString()
    => "/Pixera/Utility/getCurrentTimeAsString"

   // No operation. This function does nothing. It can be used in request/response scenarios
   // (e.g. JSON-RPC) to bookend a set of API invocations. This gives the client a way
   // to know that the last invocation in the set has been processed by Pixera.
   null noop()
    => "/Pixera/Utility/noop"

   // Experimental. Currently only relevant to Javascript interpretation within Pixera.
   null requestCallback(string functionName)
    => "/Pixera/Utility/requestCallback" arguments: "Abcd" 
   string readFileString(string path)
    => "/Pixera/Utility/readFileString" arguments: "Abcd" 
   null writeFileString(string path,string fileStr)
    => "/Pixera/Utility/writeFileString" arguments: "Abcd" "Abcd" 
   string getAccessRecipe(string hdlPath)
    => "/Pixera/Utility/getAccessRecipe" arguments: "Abcd" 

   // See the documentation PDF for more information on monitoring.
   // The Javascript implementation does not support monitoring.
   // In the JSON implementation, the result of this function is a JSON object, not a string.
   string pollMonitoring()
    => "/Pixera/Utility/pollMonitoring"
   boolean unsubscribeMonitoringSubject(string subject)
    => "/Pixera/Utility/unsubscribeMonitoringSubject" arguments: "Abcd" 
   boolean subscribeMonitoringSubject(string subject)
    => "/Pixera/Utility/subscribeMonitoringSubject" arguments: "Abcd" 
   boolean setMonitoringEventMode(string mode)
    => "/Pixera/Utility/setMonitoringEventMode" arguments: "Abcd" 

   // In the Control implementation this function is called when monitoring events are sent.
   null monitoringEvent(string eventDescription)
    => "/Pixera/Utility/monitoringEvent" arguments: "Abcd" 

   // Only available in json implementation.
   boolean setShowContextInReplies(boolean doShow)
    => "/Pixera/Utility/setShowContextInReplies" arguments: true 
   boolean setMonitoringHasDelimiter(boolean hasDelimiter)
    => "/Pixera/Utility/setMonitoringHasDelimiter" arguments: true 

   // Runs the javascript function jsFunction with code jsCode.
   string runJsScript(string jsFunction,string jsCode)
    => "/Pixera/Utility/runJsScript" arguments: "Abcd" "Abcd" 
   null dynamicRebuildFromJsonDescription(string deviceName,string jsonDescription,string folder)
    => "/Pixera/Utility/dynamicRebuildFromJsonDescription" arguments: "Abcd" "Abcd" "Abcd" 
   null resetSelectiveRenderingFrameCounters()
    => "/Pixera/Utility/resetSelectiveRenderingFrameCounters"
}

// The Network namespace establishes a bridge between the network connections defined in the API
// tab and the API entities. E.g. it allows Javascript objects created during use of the API to
// send data on the connections defined in the API tab.
namespace Network
{
   handle getConveyor(string conveyorName)
    => "/Pixera/Network/getConveyor" arguments: "Abcd" 

   // An input or output access as defined in the API.
   class Conveyor
   {
      null sendString(string str)
       => "/Pixera/Network/Conveyor/sendString" arguments: (Handle or Path) "Abcd" 
   }
}

// The Compound namespace contains functions that represent core Pixera capabilites and can be invoked
// without first gathering supplemental information via the API. This makes it suited for quickly getting
// simple integrations up and running. In addition, systems that only support a unidirectional connection
// can use this namespace to control Pixera without requiring that the user input handles, etc. accessed
// by other means.
// The fact that all functions in this namespace must be "standalone" means that the signatures must include
// more information than the typical class-oriented function in the other namespaces (which is what lead to
// the name "Compound" for this namespace). A consequence of this is that the functionality here can not
// be recombined as flexibly as in the other namespaces. For this reason, all but the very simplest
// integrations should prefer use of the other namespaces. The Compound namespace will _not_ be updated
// to reflect all the expressive possibilities of the other namespaces. Rather, it will always only contain
// a subset of the API functionality focused on the simplest use cases.
namespace Compound
{
   // Sets the transport mode of the timeline identified by its (zero-based) index
   // in the timeline library of the Compositing tab.
   // Mode Parameter: Play = 1, Pause = 2, Stop = 3.
   boolean setTransportModeOnTimelineAtIndex(int index,int mode)
    => "/Pixera/Compound/setTransportModeOnTimelineAtIndex" arguments: 1 1 

   // Sets the transport mode of the timeline identified by its name.
   // Mode Parameter: Play = 1, Pause = 2, Stop = 3.
   null setTransportModeOnTimeline(string timelineName,int mode)
    => "/Pixera/Compound/setTransportModeOnTimeline" arguments: "Abcd" 1 

   // Toggles the timeline transport mode of timeline identified by its name.
   // Mode toggles between Play and Pause.
   null toggleTransport(string timelineName)
    => "/Pixera/Compound/toggleTransport" arguments: "Abcd" 

   // Returns the current transport mode of the timeline identified by its name.
   // Return values: Play = 1, Pause = 2, Stop = 3.
   int getTransportModeOnTimeline(string timelineName)
    => "/Pixera/Compound/getTransportModeOnTimeline" arguments: "Abcd" 

   // Sets the transport mode of the first timeline
   // in the timeline library of the Compositing tab to Play.
   null startFirstTimeline()
    => "/Pixera/Compound/startFirstTimeline"

   // Sets the transport mode of the first timeline
   // in the timeline library of the Compositing tab to Pause.
   null pauseFirstTimeline()
    => "/Pixera/Compound/pauseFirstTimeline"

   // Sets the transport mode of the first timeline
   // in the timeline library of the Compositing tab to Stop.
   null stopFirstTimeline()
    => "/Pixera/Compound/stopFirstTimeline"

   // Sets the opacity of the timeline identified by its name.
   // timelineName: name of timeline
   // opacity: opacity value between 0.0 and 1.0
   null setOpacityOnTimeline(string timelineName,double opacity)
    => "/Pixera/Compound/setOpacityOnTimeline" arguments: "Abcd" 1.0 

   // Returns the opacity of the timeline identified by its name.
   double getOpacityOnTimeline(string timelineName)
    => "/Pixera/Compound/getOpacityOnTimeline" arguments: "Abcd" 

   // Set the x position of the first layer of the first timeline.
   // Purely for demonstration, testing purposes.
   null setPosValue(double val)
    => "/Pixera/Compound/setPosValue" arguments: 1.0 

   // Set the x/y position of the first layer of the first timeline.
   // Purely for demonstration, testing purposes.
   null setPosValueXY(double valX,double valY)
    => "/Pixera/Compound/setPosValueXY" arguments: 1.0 1.0 

   // Sets the current value of the parameter.
   // The parameter is identified by a path separated by periods (e.g. "Timeline 1.Layer 1.Opacity").
   null setParamValue(string path,double value)
    => "/Pixera/Compound/setParamValue" arguments: "Abcd" 1.0 

   // Jumps to and executes the cue at the (zero-based) index in the timeline at the (zero-based) index in
   // the timeline library of the Compositing tab.
   // cueIndex: zero-based index of cue
   // timelineIndex: zero-based index of timeline in library
   // blendDuration: optional parameter to set blend duration in seconds.
   null applyCueAtIndexOnTimelineAtIndex(int cueIndex,int timelineIndex,optional<double> blendDuration)
    => "/Pixera/Compound/applyCueAtIndexOnTimelineAtIndex" arguments: 1 1 val 

   // Jumps to and executes the cue with the given number in the timeline at the (zero-based) index in
   // the timeline library of the Compositing tab.
   // cueNumber: number of cue
   // timelineIndex: zero-based index of timeline in library
   // blendDuration: optional parameter to set blend duration in seconds.
   null applyCueNumberOnTimelineAtIndex(int cueNumber,int timelineIndex,optional<double> blendDuration)
    => "/Pixera/Compound/applyCueNumberOnTimelineAtIndex" arguments: 1 1 val 

   // Jumps to and executes the cue with the given number in the timeline with the given timelineName.
   // timelineName: name of timeline
   // cueNumber: number of cue
   // blendDuration: optional parameter to set blend duration in seconds.
   null applyCueNumberOnTimeline(string timelineName,int cueNumber,optional<double> blendDuration)
    => "/Pixera/Compound/applyCueNumberOnTimeline" arguments: "Abcd" 1 val 

   // Jumps to and executes the cue with given name in the timeline with the given timelineName.
   // timelineName: name of timeline
   // cueName: name of cue
   // blendDuration: optional parameter to set blend duration in seconds.
   null applyCueOnTimeline(string timelineName,string cueName,optional<double> blendDuration)
    => "/Pixera/Compound/applyCueOnTimeline" arguments: "Abcd" "Abcd" val 

   // Adds the file at the path to the folder with the given name path.
   handle addResourceToFolder(string namePath,string filePath)
    => "/Pixera/Compound/addResourceToFolder" arguments: "Abcd" "Abcd" 

   // Assigns a resource to a layer. The resource is identified by a path build from signatures and separated by forward slashes 
   // (e.g. "Media/Folder/video.mov"). The layer is identified by a path separated by periods (e.g. "Timeline 1.Layer 1").
   null assignResourceToLayer(string resourcePath,string layerPath)
    => "/Pixera/Compound/assignResourceToLayer" arguments: "Abcd" "Abcd" 

   // Refreshes a resource from file. The resource is identified by a path build from signatures and separated by forward slashes 
   // (e.g. "Media/Folder/video.mov").
   null refreshResource(string resourcePath)
    => "/Pixera/Compound/refreshResource" arguments: "Abcd" 

   // Sets the transport mode of a layer: Play = 1, Pause = 2, Stop = 3.
   // The layer is identified by a path separated by periods (e.g. "Timeline 1.Layer 1").
   null setTransportModeOnLayer(string layerPath,int mode,boolean loop)
    => "/Pixera/Compound/setTransportModeOnLayer" arguments: "Abcd" 1 true 

   // Returns the transport mode of a layer: Play = 1, Pause = 2, Stop = 3.
   // The layer is identified by a path separated by periods (e.g. "Timeline 1.Layer 1").
   int getTransportModeOnLayer(string layerPath)
    => "/Pixera/Compound/getTransportModeOnLayer" arguments: "Abcd" 

   // Returns the resource currently assigned to the layer.
   // The layer is identified by a path separated by periods (e.g. "Timeline 1.Layer 1").
   // The returned string is the path build from signatures and separated by forward slashes 
   // (e.g. "Media/Folder/video.mov").
   string getResourceAssignedToLayer(string layerPath)
    => "/Pixera/Compound/getResourceAssignedToLayer" arguments: "Abcd" 

   // Assign the resource with dmxfolder/dmxfile id to the clip at time in frames by layerpath
   null assignResourceToClipAtTimeByDmxId(string layerPath,int dmxFolderId,int dmxFileId,double time)
    => "/Pixera/Compound/assignResourceToClipAtTimeByDmxId" arguments: "Abcd" 1 1 1.0 

   // Assign the resource with dmxfolder/dmxfile id to the clip at hmsf time by layerpath
   null assignResourceToClipAtHMSFStringByDmxId(string layerPath,int dmxFolderId,int dmxFileId,string hmsf)
    => "/Pixera/Compound/assignResourceToClipAtHMSFStringByDmxId" arguments: "Abcd" 1 1 "Abcd" 

   // Assign the resource with dmxfolder/dmxfile id to the clip at h m s f by layerpath
   null assignResourceToClipAtHMSFByDmxId(string layerPath,int dmxFolderId,int dmxFileId,int h,int m,int s,int f)
    => "/Pixera/Compound/assignResourceToClipAtHMSFByDmxId" arguments: "Abcd" 1 1 1 1 1 1 

   // Sets the current time of the timeline identified by name in frames.
   // Use getFpsOfTimeline() to relate the frames to seconds.
   // name: Name of timeline.
   // time: New time in frames.
   null setCurrentTimeOfTimeline(string name,int time)
    => "/Pixera/Compound/setCurrentTimeOfTimeline" arguments: "Abcd" 1 

   // Sets the current time of the timeline identified by name in seconds.
   // Use getFpsOfTimeline() to relate the frames to seconds.
   // name: Name of timeline.
   // time: New time in seconds.
   null setCurrentTimeOfTimelineInSeconds(string name,double time)
    => "/Pixera/Compound/setCurrentTimeOfTimelineInSeconds" arguments: "Abcd" 1.0 

   // Sets the current time in seconds and the applied playback mode of the timeline identified by name.
   // Use getFpsOfTimeline() to relate the frames to seconds.
   // name: Name of timeline.
   // time: New time in seconds.
   // mode: New playback mode (Play = 1, Pause = 2, Stop = 3).
   null setCurrentTimeAndTransportModeOfTimelineInSeconds(string name,double time,int mode)
    => "/Pixera/Compound/setCurrentTimeAndTransportModeOfTimelineInSeconds" arguments: "Abcd" 1.0 1 

   // Returns the frames per second of the timeline identified by name.
   // name: Name of timeline.
   double getFpsOfTimeline(string name)
    => "/Pixera/Compound/getFpsOfTimeline" arguments: "Abcd" 

   // Returns the current time in frames. Use getFpsOfTimeline() to relate the frames to seconds.
   int getCurrentTimeOfTimeline(string name)
    => "/Pixera/Compound/getCurrentTimeOfTimeline" arguments: "Abcd" 

   // Returns the current time in seconds.
   double getCurrentTimeOfTimelineInSeconds(string name)
    => "/Pixera/Compound/getCurrentTimeOfTimelineInSeconds" arguments: "Abcd" 

   // Returns the current time of the timeline identified by name as hours, minutes, seconds, frames string.
   // name: Name of timeline.
   string getCurrentHMSFOfTimeline(string name)
    => "/Pixera/Compound/getCurrentHMSFOfTimeline" arguments: "Abcd" 

   // Returns the current countdown to next countdown relevant cue as int (in frames).
   // Use getFpsOfTimeline() to relate the frames to seconds.
   // name: Name of timeline.
   int getCurrentCountdownOfTimeline(string name)
    => "/Pixera/Compound/getCurrentCountdownOfTimeline" arguments: "Abcd" 

   // Returns the current countdown to next countdown relevant cue as string (in hours:minutes:seconds:frames).
   // name: Name of timeline.
   string getCurrentCountdownHMSFOfTimeline(string name)
    => "/Pixera/Compound/getCurrentCountdownHMSFOfTimeline" arguments: "Abcd" 

   // Blocks timeline updates in Pixera UI.
   // Use with caution. Should exclusively be used for performance optimization
   // when adding multiple objects (layer, clip, keys, ...) to timelines.
   // Do never forget to unblock.
   // doBlock: 'true' means start blocking and 'false' means unblock.
   // terminationDurationInMs: Default value is 10 sec. Duration until the blocking period is automatically terminated. We emphasize that if the default value is sufficient you should always use blockUiTimelineUpdates(false) for a controlled termination. Unit is milliseconds.
   null blockUiTimelineUpdates(boolean doBlock,optional<int> terminationDurationInMs)
    => "/Pixera/Compound/blockUiTimelineUpdates" arguments: true val 
   null startOpacityAnimationOfTimeline(string name,boolean fadeIn,double fullFadeDuration)
    => "/Pixera/Compound/startOpacityAnimationOfTimeline" arguments: "Abcd" true 1.0 

   // Creates a clip at the given time in frames and assigns the resource.
   // The layer is identified by a path separated by periods (e.g. "Timeline 1.Layer 1").
   // The resource is identified by a path build from signatures and separated by forward slashes (e.g. "Media/Folder/video.mov").
   null createClipOnLayerAtTimeWithResource(string layerPath,double time,string resourcePath)
    => "/Pixera/Compound/createClipOnLayerAtTimeWithResource" arguments: "Abcd" 1.0 "Abcd" 

   // Removes the clip identified by the 0-based clipIndex on the layer.
   // The layer is identified by a path separated by periods (e.g. "Timeline 1.Layer 1").
   null removeClipOnLayerWithIndex(string layerPath,int clipIndex)
    => "/Pixera/Compound/removeClipOnLayerWithIndex" arguments: "Abcd" 1 

   // Removes all clips on the layer.
   // The layer is identified by a path separated by periods (e.g. "Timeline 1.Layer 1").
   null removeAllClipsOnLayer(string layerPath)
    => "/Pixera/Compound/removeAllClipsOnLayer" arguments: "Abcd" 

   // Returns the clip duration in seconds identified by the 0-based clipIndex on the layer.
   // The layer is identified by a path separated by periods (e.g. "Timeline 1.Layer 1").
   double getClipDurationInSecondsWithIndex(string layerPath,int clipIndex)
    => "/Pixera/Compound/getClipDurationInSecondsWithIndex" arguments: "Abcd" 1 

   // Returns the clip duration in frames identified by the 0-based clipIndex on the layer.
   // The layer is identified by a path separated by periods (e.g. "Timeline 1.Layer 1").
   int getClipDurationInFramesWithIndex(string layerPath,int clipIndex)
    => "/Pixera/Compound/getClipDurationInFramesWithIndex" arguments: "Abcd" 1 

   // Returns the clip start time in seconds identified by the 0-based clipIndex on the layer.
   // The layer is identified by a path separated by periods (e.g. "Timeline 1.Layer 1").
   double getClipTimeInSecondsWithIndex(string layerPath,int clipIndex)
    => "/Pixera/Compound/getClipTimeInSecondsWithIndex" arguments: "Abcd" 1 

   // Returns the clip end time in seconds identified by the 0-based clipIndex on the layer.
   // The layer is identified by a path separated by periods (e.g. "Timeline 1.Layer 1").
   double getClipEndTimeInSecondsWithIndex(string layerPath,int clipIndex)
    => "/Pixera/Compound/getClipEndTimeInSecondsWithIndex" arguments: "Abcd" 1 

   // Returns the duration of the resource in seconds.
   // The resource is identified by a path build from signatures and separated by forward slashes (e.g. "Media/Folder/video.mov").
   double getResourceDurationInSeconds(string resourcePath)
    => "/Pixera/Compound/getResourceDurationInSeconds" arguments: "Abcd" 

   // Returns the current value of the parameter.
   // The parameter is identified by a path separated by periods (e.g. "Timeline 1.Layer 1.Opacity").
   double getParamValue(string path)
    => "/Pixera/Compound/getParamValue" arguments: "Abcd" 

   // Set timecode input for midi and artnet timecode.
   double setTimecodeInput(int hour,int minute,int second,int frame,double elapsedTime,boolean running,int freshMode,int stateToken,int format)
    => "/Pixera/Compound/setTimecodeInput" arguments: 1 1 1 1 1.0 true 1 1 1 

   //takeover all clients
   null takeOverAllClients()
    => "/Pixera/Compound/takeOverAllClients"

   //mute all incomming smpte inputs
   null setPauseSmpteInput(boolean doPause)
    => "/Pixera/Compound/setPauseSmpteInput" arguments: true 
}

namespace Session
{
   null closeApp(boolean saveProject)
    => "/Pixera/Session/closeApp" arguments: true 
   null loadProject(string path)
    => "/Pixera/Session/loadProject" arguments: "Abcd" 
   null saveProject()
    => "/Pixera/Session/saveProject"
   null saveProjectAs(string path)
    => "/Pixera/Session/saveProjectAs" arguments: "Abcd" 
   string getProjectName()
    => "/Pixera/Session/getProjectName"
   null setProjectName(string name)
    => "/Pixera/Session/setProjectName" arguments: "Abcd" 
   string getProjectDirectory()
    => "/Pixera/Session/getProjectDirectory"
   string getControlMultiUserSessionName()
    => "/Pixera/Session/getControlMultiUserSessionName"

   // Shut down the local machine. There are three options for mode:
   // 1: Shut down.
   // 2: Shut down and turn off power (if supported).
   // 3: Shut down and reboot.
   // Default if no mode is set is 1.
   null shutdownSystem(optional<int> mode)
    => "/Pixera/Session/shutdownSystem" arguments: val 
   string[] getLiveSystemIps()
    => "/Pixera/Session/getLiveSystemIps"
   string getLiveSystemState(string ip)
    => "/Pixera/Session/getLiveSystemState" arguments: "Abcd" 

   // This function is called in Pixera Control when the live system's state changes.
   null liveSystemStateChange(string ip,string state)
    => "/Pixera/Session/liveSystemStateChange" arguments: "Abcd" "Abcd" 

   // Shut down the live system with the given IP. The mode options are the same as for shutdownSystem():
   // Default if no mode is set is 1.
   null shutdownLiveSystem(string ip,optional<int> mode)
    => "/Pixera/Session/shutdownLiveSystem" arguments: "Abcd" val 

   // Wake up the live system that last had the given IP. Uses the MAC address that was last reported
   // for the IP.
   string wakeLiveSystem(string ip)
    => "/Pixera/Session/wakeLiveSystem" arguments: "Abcd" 

   // Returns the last MAC address associated with the live system with the given IP.
   string getLiveSystemMacAddress(string ip)
    => "/Pixera/Session/getLiveSystemMacAddress" arguments: "Abcd" 

   // Start live system.
   null startLiveSystem(string ip)
    => "/Pixera/Session/startLiveSystem" arguments: "Abcd" 

   // Start all live systems in mapping/live sub-tab.
   null startLiveSystems()
    => "/Pixera/Session/startLiveSystems"

   // Stop live system.
   null stopLiveSystem(string ip)
    => "/Pixera/Session/stopLiveSystem" arguments: "Abcd" 

   // Stop all live systems in mapping/live sub-tab.
   null stopLiveSystems()
    => "/Pixera/Session/stopLiveSystems"

   // Restart live system.
   null restartLiveSystem(string ip)
    => "/Pixera/Session/restartLiveSystem" arguments: "Abcd" 

   // Restart all live systems in mapping/live sub-tab.
   null restartLiveSystems()
    => "/Pixera/Session/restartLiveSystems"

   // This action is run when remote heartbeat tracking detects a state change in the system.
   null remoteSystemStateChange(string ip,string state)
    => "/Pixera/Session/remoteSystemStateChange" arguments: "Abcd" "Abcd" 
   string[] getRemoteSystemIps()
    => "/Pixera/Session/getRemoteSystemIps"
   string getRemoteSystemState(string ip)
    => "/Pixera/Session/getRemoteSystemState" arguments: "Abcd" 
   null setVideoStreamActiveState(string ip,string device,boolean isActive)
    => "/Pixera/Session/setVideoStreamActiveState" arguments: "Abcd" "Abcd" true 
   boolean getVideoStreamActiveState(string ip,string device)
    => "/Pixera/Session/getVideoStreamActiveState" arguments: "Abcd" "Abcd" 
   string getDefaultClipDurationsAsJsonString()
    => "/Pixera/Session/getDefaultClipDurationsAsJsonString"

   //toggle output identification
   null toggleOutputIdentification()
    => "/Pixera/Session/toggleOutputIdentification"

   //toggle onscreen statistics
   null toggleOnScreenStats()
    => "/Pixera/Session/toggleOnScreenStats"

   //activate/deactivate all assigned outputs
   null setAllAssignedOutputs(boolean active)
    => "/Pixera/Session/setAllAssignedOutputs" arguments: true 
}

namespace LiveSystems
{
   // Get the handles of the live systems.
   // This will also return handles of live systems that are no longer connected.
   handle[] getLiveSystems()
    => "/Pixera/LiveSystems/getLiveSystems"

   // Called when the live system has become unavailable.
   null liveSystemNotAvailable(int reason,handle system)
    => "/Pixera/LiveSystems/liveSystemNotAvailable" arguments: 1 123456789 
   handle[] getMultiUserMembers()
    => "/Pixera/LiveSystems/getMultiUserMembers"
   handle[] getUsagePresets()
    => "/Pixera/LiveSystems/getUsagePresets"

   class MultiUserMember
   {
      // Get hardware name of specified multi-user member.
      string getName()
       => "/Pixera/LiveSystems/MultiUserMember/getName" arguments: (Handle or Path) 

      // Get ip of specified multi-user member.
      string getIp()
       => "/Pixera/LiveSystems/MultiUserMember/getIp" arguments: (Handle or Path) 

      // Get a description of the state of the specified multi-user member.
      string getState()
       => "/Pixera/LiveSystems/MultiUserMember/getState" arguments: (Handle or Path) 
      string getPerformanceMonitoringValuesJson()
       => "/Pixera/LiveSystems/MultiUserMember/getPerformanceMonitoringValuesJson" arguments: (Handle or Path) 

      // Filter example: system,outputs,outputsIndividual,outputsTotal,unreal
      string getPerformanceMonitoringValuesJsonEx(string filter)
       => "/Pixera/LiveSystems/MultiUserMember/getPerformanceMonitoringValuesJsonEx" arguments: (Handle or Path) "Abcd" 
      null resetCumulativePerformanceMonitoringValues()
       => "/Pixera/LiveSystems/MultiUserMember/resetCumulativePerformanceMonitoringValues" arguments: (Handle or Path) 

      // Starts file distribution to the multi-user member of all files that are used in a timeline. If includeNotUsedYet is true then
      // all files that have not been used yet in any timeline are also distributed.
      null ensureFileDistribution(boolean includeNotUsedYet)
       => "/Pixera/LiveSystems/MultiUserMember/ensureFileDistribution" arguments: (Handle or Path) true 

      // Shut down the multi-user member's machine. There are three options for mode:
      // 1: Shut down.
      // 2: Shut down and turn off power (if supported).
      // 3: Shut down and reboot.
      null shutDown(int mode)
       => "/Pixera/LiveSystems/MultiUserMember/shutDown" arguments: (Handle or Path) 1 

      // Try to wake up specified multi-user member.
      string wakeUp()
       => "/Pixera/LiveSystems/MultiUserMember/wakeUp" arguments: (Handle or Path) 

      // Returns the MAC address of the specified multi-user member.
      string getMacAddress()
       => "/Pixera/LiveSystems/MultiUserMember/getMacAddress" arguments: (Handle or Path) 
      null resetEngine()
       => "/Pixera/LiveSystems/MultiUserMember/resetEngine" arguments: (Handle or Path) 
      null restartEngine()
       => "/Pixera/LiveSystems/MultiUserMember/restartEngine" arguments: (Handle or Path) 
      null startEngine()
       => "/Pixera/LiveSystems/MultiUserMember/startEngine" arguments: (Handle or Path) 
      null closeEngine()
       => "/Pixera/LiveSystems/MultiUserMember/closeEngine" arguments: (Handle or Path) 
      null triggerBackup(optional<bool> applyControlCommand)
       => "/Pixera/LiveSystems/MultiUserMember/triggerBackup" arguments: (Handle or Path) val 

      // Get a JSON description of the hardware structure of the specified multi-user member.
      string getStructureJson()
       => "/Pixera/LiveSystems/MultiUserMember/getStructureJson" arguments: (Handle or Path) 
   handle getInst(string instancePath)
    => "/Pixera/LiveSystems/MultiUserMember/getInst" arguments: "Abcd" 
   }

   class LiveSystem
   {
      // Pixera Control self-reference function.
      handle ref()
       => "/Pixera/LiveSystems/LiveSystem/ref" arguments: (Handle or Path) 

      // Get hardware name of a specified live system.
      string getName()
       => "/Pixera/LiveSystems/LiveSystem/getName" arguments: (Handle or Path) 

      // Get ip of a specified live system.
      string getIp()
       => "/Pixera/LiveSystems/LiveSystem/getIp" arguments: (Handle or Path) 
      string getState()
       => "/Pixera/LiveSystems/LiveSystem/getState" arguments: (Handle or Path) 
      null setBackupRole(int role)
       => "/Pixera/LiveSystems/LiveSystem/setBackupRole" arguments: (Handle or Path) 1 
      int getBackupRole()
       => "/Pixera/LiveSystems/LiveSystem/getBackupRole" arguments: (Handle or Path) 
      string getPerformanceMonitoringValuesJson()
       => "/Pixera/LiveSystems/LiveSystem/getPerformanceMonitoringValuesJson" arguments: (Handle or Path) 

      // Filter example: system,outputs,outputsIndividual,outputsTotal,unreal
      string getPerformanceMonitoringValuesJsonEx(string filter)
       => "/Pixera/LiveSystems/LiveSystem/getPerformanceMonitoringValuesJsonEx" arguments: (Handle or Path) "Abcd" 
      null resetCumulativePerformanceMonitoringValues()
       => "/Pixera/LiveSystems/LiveSystem/resetCumulativePerformanceMonitoringValues" arguments: (Handle or Path) 
      null moveMappingsToOutputs(handle hdlSrc,string outputIdPathMapStr)
       => "/Pixera/LiveSystems/LiveSystem/moveMappingsToOutputs" arguments: (Handle or Path) 123456789 "Abcd" 
      null setUsagePresetName(string name)
       => "/Pixera/LiveSystems/LiveSystem/setUsagePresetName" arguments: (Handle or Path) "Abcd" 
      string getUsagePresetName()
       => "/Pixera/LiveSystems/LiveSystem/getUsagePresetName" arguments: (Handle or Path) 
      null updateUsagePreset()
       => "/Pixera/LiveSystems/LiveSystem/updateUsagePreset" arguments: (Handle or Path) 
      null saveUsagePresetAs(string name)
       => "/Pixera/LiveSystems/LiveSystem/saveUsagePresetAs" arguments: (Handle or Path) "Abcd" 

      // Applies the currently selected usage preset.
      null applyUsagePreset()
       => "/Pixera/LiveSystems/LiveSystem/applyUsagePreset" arguments: (Handle or Path) 

      // Applies the usage preset with the matching name.
      null applyUsagePresetWithName(string name)
       => "/Pixera/LiveSystems/LiveSystem/applyUsagePresetWithName" arguments: (Handle or Path) "Abcd" 
      null exportUsagePreset(string path)
       => "/Pixera/LiveSystems/LiveSystem/exportUsagePreset" arguments: (Handle or Path) "Abcd" 
      null importUsagePreset(string path)
       => "/Pixera/LiveSystems/LiveSystem/importUsagePreset" arguments: (Handle or Path) "Abcd" 
      null clearExportedMappings(string path,boolean onlyServicePath)
       => "/Pixera/LiveSystems/LiveSystem/clearExportedMappings" arguments: (Handle or Path) "Abcd" true 
      null exportMappings(string path)
       => "/Pixera/LiveSystems/LiveSystem/exportMappings" arguments: (Handle or Path) "Abcd" 
      null importMappings(string path,string outputIdPathMapStr)
       => "/Pixera/LiveSystems/LiveSystem/importMappings" arguments: (Handle or Path) "Abcd" "Abcd" 
      null exportMappingsDirectly(string path)
       => "/Pixera/LiveSystems/LiveSystem/exportMappingsDirectly" arguments: (Handle or Path) "Abcd" 
      null importMappingsDirectly(string path,string outputIdPathMapStr)
       => "/Pixera/LiveSystems/LiveSystem/importMappingsDirectly" arguments: (Handle or Path) "Abcd" "Abcd" 
      null exportMappingsToLiveSystemPath(string parentPath)
       => "/Pixera/LiveSystems/LiveSystem/exportMappingsToLiveSystemPath" arguments: (Handle or Path) "Abcd" 
      null importMappingsFromLiveSystemPath(string parentPath)
       => "/Pixera/LiveSystems/LiveSystem/importMappingsFromLiveSystemPath" arguments: (Handle or Path) "Abcd" 
      null clearExportedMappingsAtLiveSystemPath(string path)
       => "/Pixera/LiveSystems/LiveSystem/clearExportedMappingsAtLiveSystemPath" arguments: (Handle or Path) "Abcd" 

      // Starts file distribution to the live system of all files that are used in a timeline. If includeNotUsedYet is true then
      // all files that have not been used yet in any timeline are also distributed.
      null ensureFileDistribution(boolean includeNotUsedYet)
       => "/Pixera/LiveSystems/LiveSystem/ensureFileDistribution" arguments: (Handle or Path) true 

      // Shut down the local machine. There are three options for mode:
      // 1: Shut down.
      // 2: Shut down and turn off power (if supported).
      // 3: Shut down and reboot.
      null shutDown(int mode)
       => "/Pixera/LiveSystems/LiveSystem/shutDown" arguments: (Handle or Path) 1 

      // Try to wake up specified live system.
      string wakeUp()
       => "/Pixera/LiveSystems/LiveSystem/wakeUp" arguments: (Handle or Path) 

      // Returns the MAC address of the specified Live System.
      string getMacAddress()
       => "/Pixera/LiveSystems/LiveSystem/getMacAddress" arguments: (Handle or Path) 

      // Returns handles to the graphics devices of a Live System.
      handle[] getGraphicsDevices()
       => "/Pixera/LiveSystems/LiveSystem/getGraphicsDevices" arguments: (Handle or Path) 

      // Returns handles to all enabled outputs.
      handle[] getEnabledOutputs()
       => "/Pixera/LiveSystems/LiveSystem/getEnabledOutputs" arguments: (Handle or Path) 

      // Returns handles of all outputs even if they are not physically connected.
      handle[] getAllOutputs()
       => "/Pixera/LiveSystems/LiveSystem/getAllOutputs" arguments: (Handle or Path) 

      // Returns handles to all video stream outputs (NDI, Art-Net, etc.).
      handle[] getVideoStreamOutputs()
       => "/Pixera/LiveSystems/LiveSystem/getVideoStreamOutputs" arguments: (Handle or Path) 
      null resetEngine()
       => "/Pixera/LiveSystems/LiveSystem/resetEngine" arguments: (Handle or Path) 
      null restartEngine()
       => "/Pixera/LiveSystems/LiveSystem/restartEngine" arguments: (Handle or Path) 
      null startEngine()
       => "/Pixera/LiveSystems/LiveSystem/startEngine" arguments: (Handle or Path) 
      null closeEngine()
       => "/Pixera/LiveSystems/LiveSystem/closeEngine" arguments: (Handle or Path) 
      null setAudioMasterVolume(int channel,double volume)
       => "/Pixera/LiveSystems/LiveSystem/setAudioMasterVolume" arguments: (Handle or Path) 1 1.0 
      double getAudioMasterVolume(int channel)
       => "/Pixera/LiveSystems/LiveSystem/getAudioMasterVolume" arguments: (Handle or Path) 1 
      null setAudioMasterMute(int channel,boolean state)
       => "/Pixera/LiveSystems/LiveSystem/setAudioMasterMute" arguments: (Handle or Path) 1 true 
      boolean getAudioMasterMute(int channel)
       => "/Pixera/LiveSystems/LiveSystem/getAudioMasterMute" arguments: (Handle or Path) 1 
      null toggleAudioMasterMute(int channel)
       => "/Pixera/LiveSystems/LiveSystem/toggleAudioMasterMute" arguments: (Handle or Path) 1 
      null setAudioTimecodeInput(int channel,boolean state)
       => "/Pixera/LiveSystems/LiveSystem/setAudioTimecodeInput" arguments: (Handle or Path) 1 true 
      null triggerBackup(optional<bool> applyControlCommand)
       => "/Pixera/LiveSystems/LiveSystem/triggerBackup" arguments: (Handle or Path) val 

      // Files which are not used in the current project are deleted from the RX-Cache directory.
      null deleteUnusedFilesFromCache()
       => "/Pixera/LiveSystems/LiveSystem/deleteUnusedFilesFromCache" arguments: (Handle or Path) 
      string getStructureJson()
       => "/Pixera/LiveSystems/LiveSystem/getStructureJson" arguments: (Handle or Path) 
   handle getInst(string instancePath)
    => "/Pixera/LiveSystems/LiveSystem/getInst" arguments: "Abcd" 
      string getInstancePath()
       => "/Pixera/LiveSystems/LiveSystem/getInstancePath" arguments: (Handle or Path) 
   }

   class UsagePreset
   {
      string getName()
       => "/Pixera/LiveSystems/UsagePreset/getName" arguments: (Handle or Path) 
      null update()
       => "/Pixera/LiveSystems/UsagePreset/update" arguments: (Handle or Path) 
      null apply(string destinationIp)
       => "/Pixera/LiveSystems/UsagePreset/apply" arguments: (Handle or Path) "Abcd" 
      null importFromFile(string path)
       => "/Pixera/LiveSystems/UsagePreset/importFromFile" arguments: (Handle or Path) "Abcd" 
      null exportToFile(string path)
       => "/Pixera/LiveSystems/UsagePreset/exportToFile" arguments: (Handle or Path) "Abcd" 
   handle getInst(string instancePath)
    => "/Pixera/LiveSystems/UsagePreset/getInst" arguments: "Abcd" 
      string getInstancePath()
       => "/Pixera/LiveSystems/UsagePreset/getInstancePath" arguments: (Handle or Path) 
   }

   class GraphicsDevice
   {
      string getName()
       => "/Pixera/LiveSystems/GraphicsDevice/getName" arguments: (Handle or Path) 

      // Returns handles to all enabled outputs.
      handle[] getEnabledOutputs()
       => "/Pixera/LiveSystems/GraphicsDevice/getEnabledOutputs" arguments: (Handle or Path) 

      // Returns handles of all outputs even if they are not physically connected.
      handle[] getAllOutputs()
       => "/Pixera/LiveSystems/GraphicsDevice/getAllOutputs" arguments: (Handle or Path) 
   handle getInst(string instancePath)
    => "/Pixera/LiveSystems/GraphicsDevice/getInst" arguments: "Abcd" 
      string getInstancePath()
       => "/Pixera/LiveSystems/GraphicsDevice/getInstancePath" arguments: (Handle or Path) 
   }

   class Output
   {
      string getName()
       => "/Pixera/LiveSystems/Output/getName" arguments: (Handle or Path) 

      // Set output active/inactive.
      null setActive(boolean active)
       => "/Pixera/LiveSystems/Output/setActive" arguments: (Handle or Path) true 

      // Return current active state of output.
      boolean getActive()
       => "/Pixera/LiveSystems/Output/getActive" arguments: (Handle or Path) 

      // set output identify.
      null setIdentify(boolean state)
       => "/Pixera/LiveSystems/Output/setIdentify" arguments: (Handle or Path) true 

      // get output identify.
      boolean getIdentify()
       => "/Pixera/LiveSystems/Output/getIdentify" arguments: (Handle or Path) 

      // Return assigned Screens.
      handle[] getAssignedScreens()
       => "/Pixera/LiveSystems/Output/getAssignedScreens" arguments: (Handle or Path) 

      // Return assigned Projectors.
      handle[] getAssignedProjectors()
       => "/Pixera/LiveSystems/Output/getAssignedProjectors" arguments: (Handle or Path) 
      boolean getEnabled()
       => "/Pixera/LiveSystems/Output/getEnabled" arguments: (Handle or Path) 
      boolean getForPreview()
       => "/Pixera/LiveSystems/Output/getForPreview" arguments: (Handle or Path) 

      // set outputs is aggregate
      null setIsOutputAggregate(boolean state)
       => "/Pixera/LiveSystems/Output/setIsOutputAggregate" arguments: (Handle or Path) true 

      // set outputs is aggregate
      boolean getIsOutputAggregate()
       => "/Pixera/LiveSystems/Output/getIsOutputAggregate" arguments: (Handle or Path) 

      // set vertical and horizontal aggregate settings
      null setAggregateDims(int horizontalCount,int verticalCount)
       => "/Pixera/LiveSystems/Output/setAggregateDims" arguments: (Handle or Path) 1 1 

      // get vertical and horizontal aggregate settings
      int[] getAggregateDims()
       => "/Pixera/LiveSystems/Output/getAggregateDims" arguments: (Handle or Path) 
   handle getInst(string instancePath)
    => "/Pixera/LiveSystems/Output/getInst" arguments: "Abcd" 
      string getInstancePath()
       => "/Pixera/LiveSystems/Output/getInstancePath" arguments: (Handle or Path) 
   }

   class VideoStream
   {
      string getName()
       => "/Pixera/LiveSystems/VideoStream/getName" arguments: (Handle or Path) 

      // Set video stream active/inactive.
      null setActive(boolean active)
       => "/Pixera/LiveSystems/VideoStream/setActive" arguments: (Handle or Path) true 

      // Get active state of video stream.
      boolean getActive()
       => "/Pixera/LiveSystems/VideoStream/getActive" arguments: (Handle or Path) 
      string getIpAddress()
       => "/Pixera/LiveSystems/VideoStream/getIpAddress" arguments: (Handle or Path) 
      null setIpAddress(string ipAddress)
       => "/Pixera/LiveSystems/VideoStream/setIpAddress" arguments: (Handle or Path) "Abcd" 
      string getDeviceType()
       => "/Pixera/LiveSystems/VideoStream/getDeviceType" arguments: (Handle or Path) 
   handle getInst(string instancePath)
    => "/Pixera/LiveSystems/VideoStream/getInst" arguments: "Abcd" 
      string getInstancePath()
       => "/Pixera/LiveSystems/VideoStream/getInstancePath" arguments: (Handle or Path) 
   }
}

namespace Settings
{
namespace SettingsGeneral
{
   // If this is true, the values for transformation and scale, set in Node::setValues have to be in pixels.
   boolean getShowDimsInPixels()
    => "/Pixera/Settings/SettingsGeneral/getShowDimsInPixels"

   // If this is true, the nodes will be using size instead of scale.
   boolean getShowScaleAsSize()
    => "/Pixera/Settings/SettingsGeneral/getShowScaleAsSize"
   null setFadeToTimeDelay(int timeInMilliseconds)
    => "/Pixera/Settings/SettingsGeneral/setFadeToTimeDelay" arguments: 1 
   int getFadeToTimeDelay()
    => "/Pixera/Settings/SettingsGeneral/getFadeToTimeDelay"
}

namespace SettingsTranscoding
{
   // Get Transcoding presets as a vector of Json-Strings
   // With the stucture:
   // Available container/codec strings:
   // vp9: mkv, mp4
   // H264: mp4
   // H265: mp4
   // HAP: mov
   // HAP Alpha: mov
   // HAP Q: mov
   // Image: png, tiff, dpx
   // 
   // Compression settings:
   // Lossless : 0
   // Low : 1
   // Medium : 2
   // High : 3
   // 
   // Hap compression settings:
   // None : 0
   // Snappy : 1
   // 
   // H264 Presets:
   // Default : 1
   // Slow : 2
   // Medium : 3
   // Fast : 4
   // Hp (High Performance): 5
   // Hq : 6
   // Bd : 7
   // Ll (Low latency) : 8
   // LlHq : 9
   // LlHp : 10
   // Lossless : 11
   // Lossless Hp : 12
   string[] getTranscodingPresets()
    => "/Pixera/Settings/SettingsTranscoding/getTranscodingPresets"

   // Search for preset with given name if found it will be set to the given setup,
   // if not a new one will be created.
   null addOrChangeTranscodingPreset(string preset)
    => "/Pixera/Settings/SettingsTranscoding/addOrChangeTranscodingPreset" arguments: "Abcd" 
}

namespace SettingsResourceDistribution
{
   // Defines the rule for the automatic distribution of newly added resources. 0: None, 1: On Import, 2: On Use
   null setAutoDistributionRule(int rule)
    => "/Pixera/Settings/SettingsResourceDistribution/setAutoDistributionRule" arguments: 1 

   // Returns the rule for the automatic distribution of newly added resources. 0: None, 1: On Import, 2: On Use
   int getAutoDistributionRule()
    => "/Pixera/Settings/SettingsResourceDistribution/getAutoDistributionRule"
}

}

namespace Screens
{
   // Screen name as shown in the inspector.
   handle getScreenWithName(string name)
    => "/Pixera/Screens/getScreenWithName" arguments: "Abcd" 

   // This function was introduced for test purposes, is not typical of the API
   // and is likely to be removed soon. Do not use it in shipping products!
   // The function sets the position of the screen with the given name.
   // The recommended way of doing this is to first use getScreenWithName(.) and
   // then Screen.setPosition(.).
   null setNamedScreenPosition(string name,optional<double> xPos,optional<double> yPos,optional<double> zPos)
    => "/Pixera/Screens/setNamedScreenPosition" arguments: "Abcd" val val val 

   // Returns handles to all screens currently used in the Screens tab.
   handle[] getScreens()
    => "/Pixera/Screens/getScreens"
   string[] getScreenNames()
    => "/Pixera/Screens/getScreenNames"
   handle getFirstTimelineWithHomeScreen(string screenName)
    => "/Pixera/Screens/getFirstTimelineWithHomeScreen" arguments: "Abcd" 

   // Returns handles to all studio cameras currently used in the Screens tab.
   handle[] getStudioCameras()
    => "/Pixera/Screens/getStudioCameras"

   struct ScreenPosValues
   {
      double x;
      double y;
      double z;
   }

   class Screen
   {
      // Returns an id based on the handle. This is currently necessary in some situations
      // because some API implementations can not yet consume handles as parameters. 
      double getId()
       => "/Pixera/Screens/Screen/getId" arguments: (Handle or Path) 
      string getName()
       => "/Pixera/Screens/Screen/getName" arguments: (Handle or Path) 

      // Sets the position in meters.
      boolean setPosition(optional<double> xPos,optional<double> yPos,optional<double> zPos)
       => "/Pixera/Screens/Screen/setPosition" arguments: (Handle or Path) val val val 

      // Returns the position in meters.
      null getPosition()
       => "/Pixera/Screens/Screen/getPosition" arguments: (Handle or Path) 

      // Sets the rotation in degrees.
      boolean setRotation(optional<double> xRot,optional<double> yRot,optional<double> zRot)
       => "/Pixera/Screens/Screen/setRotation" arguments: (Handle or Path) val val val 

      // Returns the Rotation in degrees.
      null getRotation()
       => "/Pixera/Screens/Screen/getRotation" arguments: (Handle or Path) 

      // Scales the screen proportionally (a value of 1.0 leaves the size unchanged). 
      boolean setScale(optional<double> xScale,optional<double> yScale,optional<double> zScale)
       => "/Pixera/Screens/Screen/setScale" arguments: (Handle or Path) val val val 

      // Returns the Scale.
      null getScale()
       => "/Pixera/Screens/Screen/getScale" arguments: (Handle or Path) 

      // Sets position and rotation in one API call.
      boolean setPosRot(optional<double> xPos,optional<double> yPos,optional<double> zPos,optional<double> xRot,optional<double> yRot,optional<double> zRot)
       => "/Pixera/Screens/Screen/setPosRot" arguments: (Handle or Path) val val val val val val 

      // Sets position, rotation and the perspective position for the first screen group in one API call.
      boolean setPosRotAndPerspectivePos(optional<double> xPos,optional<double> yPos,optional<double> zPos,optional<double> xRot,optional<double> yRot,optional<double> zRot,optional<double> perspXPos,optional<double> perspYPos,optional<double> perspZPos)
       => "/Pixera/Screens/Screen/setPosRotAndPerspectivePos" arguments: (Handle or Path) val val val val val val val val val 

      // Sets position, rotation and scale in one API call.
      boolean setPosRotScale(optional<double> xPos,optional<double> yPos,optional<double> zPos,optional<double> xRot,optional<double> yRot,optional<double> zRot,optional<double> xScale,optional<double> yScale,optional<double> zScale)
       => "/Pixera/Screens/Screen/setPosRotScale" arguments: (Handle or Path) val val val val val val val val val 

      // Returns handles to all perspectives currently available for the screen.
      handle[] getPerspectives()
       => "/Pixera/Screens/Screen/getPerspectives" arguments: (Handle or Path) 

      // Returns the perspective for the Screen Group with the given name.
      handle getPerspectiveForScreenGroup(string screenGroupName)
       => "/Pixera/Screens/Screen/getPerspectiveForScreenGroup" arguments: (Handle or Path) "Abcd" 

      // Returns the perspective for the first Screen Group.
      handle getPersepective()
       => "/Pixera/Screens/Screen/getPersepective" arguments: (Handle or Path) 

      // Snap the Perspective to Screen
      // 0 : Snap Mode to Bounding Box
      // 1 : Snap Mode to UV Coords
      // 2 : Snap Mode to Vertices
      // 3 : Snap Mode to Bounding Box in View
      // 4 : Snap Mode to Vertices with Projection
      null snapPerspectiveCornersToScreen(int mode)
       => "/Pixera/Screens/Screen/snapPerspectiveCornersToScreen" arguments: (Handle or Path) 1 

      // Sets the position of the perspective in meters.
      boolean setPerspectivePosition(optional<double> xPos,optional<double> yPos,optional<double> zPos)
       => "/Pixera/Screens/Screen/setPerspectivePosition" arguments: (Handle or Path) val val val 

      // Sets the position of the perspective in meters and moves the look-at point so that the
      // relationship between eye and look-at point is maintained. Look-at point will not be moved
      // if generalized perspective projection is being used.
      boolean setPerspectivePositionWithLookAt(optional<double> xPos,optional<double> yPos,optional<double> zPos)
       => "/Pixera/Screens/Screen/setPerspectivePositionWithLookAt" arguments: (Handle or Path) val val val 

      // Returns the position of the perspective in meters.
      null getPerspectivePosition()
       => "/Pixera/Screens/Screen/getPerspectivePosition" arguments: (Handle or Path) 

      // Sets the rotation around the view axis of the screen's perspective in degrees.
      boolean setPerspectiveRotation(optional<double> xRot,optional<double> yRot,optional<double> zRot)
       => "/Pixera/Screens/Screen/setPerspectiveRotation" arguments: (Handle or Path) val val val 

      // Returns the rotation around the view axis of the screen's perspective in degrees.
      null getPerspectiveRotation()
       => "/Pixera/Screens/Screen/getPerspectiveRotation" arguments: (Handle or Path) 

      // This method is deprecated. Please use setPerspectivePosition(.) instead.
      boolean setCameraPosition(optional<double> xPos,optional<double> yPos,optional<double> zPos)
       => "/Pixera/Screens/Screen/setCameraPosition" arguments: (Handle or Path) val val val 

      // This method is deprecated. Please use setPerspectivePositionWithLookAt(.) instead.
      boolean setCameraPositionWithLookAt(optional<double> xPos,optional<double> yPos,optional<double> zPos)
       => "/Pixera/Screens/Screen/setCameraPositionWithLookAt" arguments: (Handle or Path) val val val 

      // This method is deprecated. Please use getPerspectivePosition(.) instead.
      null getCameraPosition()
       => "/Pixera/Screens/Screen/getCameraPosition" arguments: (Handle or Path) 

      // This method is deprecated. Please use setPerspectiveRotation(.) instead.
      boolean setCameraRotation(optional<double> xRot,optional<double> yRot,optional<double> zRot)
       => "/Pixera/Screens/Screen/setCameraRotation" arguments: (Handle or Path) val val val 

      // This method is deprecated. Please use getPerspectiveRotation(.) instead.
      null getCameraRotation()
       => "/Pixera/Screens/Screen/getCameraRotation" arguments: (Handle or Path) 

      // Sets the frustum base of the screen's perspective in pixels. The frustum base is positioned in the X/Y plane of the content compositing
      // space so that its center is at the position given by the x and y parameters. The origin the position relates to is that of the screen given
      // by originScreenId  (use Screen.getId() to access this id or pass a handle to the origin screen). This makes it possible to relate
      // multiple perspective pixel positions  to the same origin.
      // The width and height of the frustum base are set to pixel dimensions as given by the width and height parameters.
      // The rotation parameter rotates the frustum base around the Z axis the given number of degrees.
      null setContentSamplingFrustumBase(double x,double y,double width,double height,double rotation,double originScreenId)
       => "/Pixera/Screens/Screen/setContentSamplingFrustumBase" arguments: (Handle or Path) 1.0 1.0 1.0 1.0 1.0 1.0 

      // Launches a calibration tool for the screen. The mode and diff strings 
      // depend on the tool. If they are left empty appropriate defaults will be used.
      // mode options:
      // "newCalib": Launches "New Calibration" dialog.
      // "autoRecalib": Launches re-calibration without user interaction. Dialog is closed automatically afterwards.
      // diff options:
      // "vioso"
      null runCalibration(string mode,string diff)
       => "/Pixera/Screens/Screen/runCalibration" arguments: (Handle or Path) "Abcd" "Abcd" 

      // Relaunches a calibration tool for the screen for further editing. The diff string
      // depends on the tool. If it is left empty an appropriate default will be used.
      null editCalibration(string diff)
       => "/Pixera/Screens/Screen/editCalibration" arguments: (Handle or Path) "Abcd" 

      // Notifiy if Calibration is finshed
      // Finished Parameter: True = Finished, False = Not Finished
      boolean finshedCalibration(boolean finished)
       => "/Pixera/Screens/Screen/finshedCalibration" arguments: (Handle or Path) true 

      // Same functionality as pressing Button "Distribute Loaded Calibrations"
      null distributeLoadedCalibrationAndReload()
       => "/Pixera/Screens/Screen/distributeLoadedCalibrationAndReload" arguments: (Handle or Path) 

      // Resets a warp that originated with a calibration tool. The diff string depends
      // on the tool. If it is empty an appropriate default will be used.
      null resetWarpFile(string diff)
       => "/Pixera/Screens/Screen/resetWarpFile" arguments: (Handle or Path) "Abcd" 

      // Loads the warp file at the specified path for the screen.
      null loadWarpFile(string filePath)
       => "/Pixera/Screens/Screen/loadWarpFile" arguments: (Handle or Path) "Abcd" 

      // Like loadWarpFile() except diff string can be used to control the format. Use "mpcdi"
      // to load MPCDI files.
      null loadWarpFileWithDiff(string filePath,string diff)
       => "/Pixera/Screens/Screen/loadWarpFileWithDiff" arguments: (Handle or Path) "Abcd" "Abcd" 

      // Adds the warp file at the specified path to those loaded for the screen.
      null addWarpFile(string filePath)
       => "/Pixera/Screens/Screen/addWarpFile" arguments: (Handle or Path) "Abcd" 

      // Like loadWarpFile() except diff string can be used to control the format. Use "mpcdi"
      // to add MPCDI files.
      null addWarpFileWithDiff(string filePath,string diff)
       => "/Pixera/Screens/Screen/addWarpFileWithDiff" arguments: (Handle or Path) "Abcd" "Abcd" 
      null loadColorCalibration(string calibrationName)
       => "/Pixera/Screens/Screen/loadColorCalibration" arguments: (Handle or Path) "Abcd" 
      null runColorCalibration()
       => "/Pixera/Screens/Screen/runColorCalibration" arguments: (Handle or Path) 

      // Sets the screen visibility in the workspace.
      null setIsVisible(boolean isVisible)
       => "/Pixera/Screens/Screen/setIsVisible" arguments: (Handle or Path) true 

      // Get the screen visibility in the workspace.
      boolean getIsVisible()
       => "/Pixera/Screens/Screen/getIsVisible" arguments: (Handle or Path) 

      // Sets if a screen can be used as a projection surface. 
      null setIsProjectable(boolean isProjectable)
       => "/Pixera/Screens/Screen/setIsProjectable" arguments: (Handle or Path) true 

      // Get if the screen can be used as a projection surface.
      boolean getIsProjectable()
       => "/Pixera/Screens/Screen/getIsProjectable" arguments: (Handle or Path) 

      // Triggers a manual update of the mappings between this screen and the projectors. 
      null triggerRefreshMapping()
       => "/Pixera/Screens/Screen/triggerRefreshMapping" arguments: (Handle or Path) 

      // Reset all color correction
      null resetAllColorCorrections()
       => "/Pixera/Screens/Screen/resetAllColorCorrections" arguments: (Handle or Path) 

      //Set ColorCorrection Value by Path
      null setColorCorrectionWithPath(string path,float value)
       => "/Pixera/Screens/Screen/setColorCorrectionWithPath" arguments: (Handle or Path) "Abcd" 1.0 

      //Get ColorCorrection Value by Path
      float getColorCorrectionWithPath(string path)
       => "/Pixera/Screens/Screen/getColorCorrectionWithPath" arguments: (Handle or Path) "Abcd" 

      //Set colorcorrection with jsonstring
      null setColorCorrectionAsJsonString(string colorCorrection)
       => "/Pixera/Screens/Screen/setColorCorrectionAsJsonString" arguments: (Handle or Path) "Abcd" 

      //Get colorcorrection as jsonstring
      string getColorCorrectionAsJsonString()
       => "/Pixera/Screens/Screen/getColorCorrectionAsJsonString" arguments: (Handle or Path) 

      //get outputs
      handle[] getOutput()
       => "/Pixera/Screens/Screen/getOutput" arguments: (Handle or Path) 

      // Set the active state of a active screen Blackout. 
      null setBlackout(boolean isActive)
       => "/Pixera/Screens/Screen/setBlackout" arguments: (Handle or Path) true 

      // Get the active state of a active screen blackout. 
      boolean getBlackout()
       => "/Pixera/Screens/Screen/getBlackout" arguments: (Handle or Path) 
   handle getInst(string instancePath)
    => "/Pixera/Screens/Screen/getInst" arguments: "Abcd" 
   handle getHandleFromInstancePath(string instancePath)
    => "/Pixera/Screens/Screen/getHandleFromInstancePath" arguments: "Abcd" 
      string getInstancePath()
       => "/Pixera/Screens/Screen/getInstancePath" arguments: (Handle or Path) 
   }

   class StudioCamera
   {
      string getName()
       => "/Pixera/Screens/StudioCamera/getName" arguments: (Handle or Path) 

      // Sets the position in meters.
      null setPosition(optional<double> xPos,optional<double> yPos,optional<double> zPos)
       => "/Pixera/Screens/StudioCamera/setPosition" arguments: (Handle or Path) val val val 

      // Returns the position in meters.
      double[] getPosition(double xPos,double yPos,double zPos)
       => "/Pixera/Screens/StudioCamera/getPosition" arguments: (Handle or Path) 1.0 1.0 1.0 

      // Sets the euler rotation in degrees.
      null setRotation(optional<double> xRot,optional<double> yRot,optional<double> zRot)
       => "/Pixera/Screens/StudioCamera/setRotation" arguments: (Handle or Path) val val val 

      // Sets rotation in quaternions.
      null setRotationQuat(optional<double> xQuat,optional<double> yQuat,optional<double> zQuat,optional<double> wQuat)
       => "/Pixera/Screens/StudioCamera/setRotationQuat" arguments: (Handle or Path) val val val val 

      // Returns the euler rotation in degrees.
      double[] getRotation(double xPos,double yPos,double zPos)
       => "/Pixera/Screens/StudioCamera/getRotation" arguments: (Handle or Path) 1.0 1.0 1.0 

      // Sets the position in meters, rotation and fov in degrees.
      null setTransformation(optional<double> xPos,optional<double> yPos,optional<double> zPos,optional<double> xRot,optional<double> yRot,optional<double> zRot,optional<double> fov,optional<double> aspectRatio)
       => "/Pixera/Screens/StudioCamera/setTransformation" arguments: (Handle or Path) val val val val val val val val 

      // Sets the position in meters, rotation in quaternions, fov in degrees.
      null setTransformationQuat(optional<double> xPos,optional<double> yPos,optional<double> zPos,optional<double> xQuat,optional<double> yQuat,optional<double> zQuat,optional<double> wQuat,optional<double> fov,optional<double> aspectRatio)
       => "/Pixera/Screens/StudioCamera/setTransformationQuat" arguments: (Handle or Path) val val val val val val val val val 

      // Sets the position in meters, rotation and fov in degrees, centerX, centerX and panelWidth in millimeters.
      null setTransformationAndLensProps(double xPos,double yPos,double zPos,double xRot,double yRot,double zRot,double fov,double aspectRatio,double nearClip,double farClip,double aperture,double focus,double iris,double k1,double k2,double centerX,double centerY,double panelWidth)
       => "/Pixera/Screens/StudioCamera/setTransformationAndLensProps" arguments: (Handle or Path) 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 

      // Sets the position in meters, rotation in quaternions, fov in degrees, centerX, centerX and panelWidth in millimeters.
      null setTransformationAndLensPropsQuat(double xPos,double yPos,double zPos,double xQuat,double yQuat,double zQuat,double wQuat,double fov,double aspectRatio,double nearClip,double farClip,double aperture,double focus,double iris,double k1,double k2,double centerX,double centerY,double panelWidth)
       => "/Pixera/Screens/StudioCamera/setTransformationAndLensPropsQuat" arguments: (Handle or Path) 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 

      // Sets the position in meters, rotation and fov in degrees, centerX, centerX and panelWidth in millimeters.
      null setTransformationAndLensPropsExt(double xPos,double yPos,double zPos,double xRot,double yRot,double zRot,double fov,double aspectRatio,double nearClip,double farClip,double aperture,double focus,double focalDistance,double zoom,double iris,double k1,double k2,double k3,double p1,double p2,double centerX,double centerY,double panelWidth,double overscan,optional<double> focalLength,optional<double> focalLengthDistorted)
       => "/Pixera/Screens/StudioCamera/setTransformationAndLensPropsExt" arguments: (Handle or Path) 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 val val 

      // Sets the position in meters, rotation in quaternions, fov in degrees, centerX, centerX and panelWidth in millimeters.
      null setTransformationAndLensPropsExtQuat(double xPos,double yPos,double zPos,double xQuat,double yQuat,double zQuat,double wQuat,double fov,double aspectRatio,double nearClip,double farClip,double aperture,double focus,double focalDistance,double zoom,double iris,double k1,double k2,double k3,double p1,double p2,double centerX,double centerY,double panelWidth,double overscan,optional<double> focalLength,optional<double> focalLengthDistorted)
       => "/Pixera/Screens/StudioCamera/setTransformationAndLensPropsExtQuat" arguments: (Handle or Path) 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 val val 

      // Set the tracking input pause.
      null setTrackingInputPause(boolean pause)
       => "/Pixera/Screens/StudioCamera/setTrackingInputPause" arguments: (Handle or Path) true 

      // Get the tracking input pause.
      boolean getTrackingInputPause()
       => "/Pixera/Screens/StudioCamera/getTrackingInputPause" arguments: (Handle or Path) 

      // Set the tracking input position pause.
      null setUsePositionPropertiesFromTracking(boolean pause)
       => "/Pixera/Screens/StudioCamera/setUsePositionPropertiesFromTracking" arguments: (Handle or Path) true 

      // Get the tracking input position.
      boolean getUsePositionPropertiesFromTracking()
       => "/Pixera/Screens/StudioCamera/getUsePositionPropertiesFromTracking" arguments: (Handle or Path) 

      // Set the tracking input rotation pause.
      null setUseRotationPropertiesFromTracking(boolean pause)
       => "/Pixera/Screens/StudioCamera/setUseRotationPropertiesFromTracking" arguments: (Handle or Path) true 

      // Get the tracking input rotation pause.
      boolean getUseRotationPropertiesFromTracking()
       => "/Pixera/Screens/StudioCamera/getUseRotationPropertiesFromTracking" arguments: (Handle or Path) 

      // Set the camera to project on the associated screens.
      null setProjectOnAssociatedScreens(boolean state)
       => "/Pixera/Screens/StudioCamera/setProjectOnAssociatedScreens" arguments: (Handle or Path) true 

      // Get whether the camera projects on the associated screens.
      boolean getProjectOnAssociatedScreens()
       => "/Pixera/Screens/StudioCamera/getProjectOnAssociatedScreens" arguments: (Handle or Path) 

      // Move the projected inner frustum rendering to the top among multiple studio cameras.
      null moveToTop()
       => "/Pixera/Screens/StudioCamera/moveToTop" arguments: (Handle or Path) 
   handle getInst(string instancePath)
    => "/Pixera/Screens/StudioCamera/getInst" arguments: "Abcd" 
   handle getHandleFromInstancePath(string instancePath)
    => "/Pixera/Screens/StudioCamera/getHandleFromInstancePath" arguments: "Abcd" 
      string getInstancePath()
       => "/Pixera/Screens/StudioCamera/getInstancePath" arguments: (Handle or Path) 
   }

   class Perspective
   {
      string getName()
       => "/Pixera/Screens/Perspective/getName" arguments: (Handle or Path) 

      // Sets the position in meters, rotation and fov in degrees. The look at point is not locked by default.
      null setTransformation(optional<double> xPos,optional<double> yPos,optional<double> zPos,optional<double> xRot,optional<double> yRot,optional<double> zRot,optional<double> fov,optional<double> aspectRatio,optional<bool> lockLookAtPt)
       => "/Pixera/Screens/Perspective/setTransformation" arguments: (Handle or Path) val val val val val val val val val 
   handle getInst(string instancePath)
    => "/Pixera/Screens/Perspective/getInst" arguments: "Abcd" 
   handle getHandleFromInstancePath(string instancePath)
    => "/Pixera/Screens/Perspective/getHandleFromInstancePath" arguments: "Abcd" 
      string getInstancePath()
       => "/Pixera/Screens/Perspective/getInstancePath" arguments: (Handle or Path) 
   }
}

namespace Projectors
{
   // Projector name as shown in the inspector.
   handle getProjectorWithName(string name)
    => "/Pixera/Projectors/getProjectorWithName" arguments: "Abcd" 

   // Returns handles to all screens currently used in the Mapping tab.
   handle[] getProjectors()
    => "/Pixera/Projectors/getProjectors"
   string[] getProjectorNames()
    => "/Pixera/Projectors/getProjectorNames"

   struct ProjectorPosValues
   {
      double x;
      double y;
      double z;
   }

   class Projector
   {
      // The position units are as in the inspector, i.e. meters.
      null getPosition()
       => "/Pixera/Projectors/Projector/getPosition" arguments: (Handle or Path) 

      // The position units are as in the inspector, i.e. meters.
      boolean setPosition(optional<double> xPos,optional<double> yPos,optional<double> zPos)
       => "/Pixera/Projectors/Projector/setPosition" arguments: (Handle or Path) val val val 

      // Get rotation of projector.
      null getRotation()
       => "/Pixera/Projectors/Projector/getRotation" arguments: (Handle or Path) 

      // Set rotation of projector.
      boolean setRotation(optional<double> xRot,optional<double> yRot,optional<double> zRot)
       => "/Pixera/Projectors/Projector/setRotation" arguments: (Handle or Path) val val val 
      string getName()
       => "/Pixera/Projectors/Projector/getName" arguments: (Handle or Path) 

      // Set the active state of a projector screen mapping. 
      // The id is conceptually the handle but the handle can not be passed 
      // directly for some implementations of the API. 
      // Therefore, Screen.getId() should be used to fill the screenId parameter.
      null activateScreenMapping(double screenId,boolean isActive)
       => "/Pixera/Projectors/Projector/activateScreenMapping" arguments: (Handle or Path) 1.0 true 

      // Set the active state of a projector Blackout. 
      null setBlackout(boolean isActive)
       => "/Pixera/Projectors/Projector/setBlackout" arguments: (Handle or Path) true 

      // Get the active state of a projector blackout. 
      boolean getBlackout()
       => "/Pixera/Projectors/Projector/getBlackout" arguments: (Handle or Path) 

      // set Render Order ID
      null setRenderOrderId(double screenId,int orderId)
       => "/Pixera/Projectors/Projector/setRenderOrderId" arguments: (Handle or Path) 1.0 1 

      // get Render Order ID
      int getRenderOrderId(double screenId)
       => "/Pixera/Projectors/Projector/getRenderOrderId" arguments: (Handle or Path) 1.0 

      // Set the softedge of a projector for a specific screen active. If screenName is empty changes will be applied to all.  
      null setSoftedgeVisible(string screenName,boolean visible)
       => "/Pixera/Projectors/Projector/setSoftedgeVisible" arguments: (Handle or Path) "Abcd" true 

      // Reset all color correction
      null resetAllColorCorrections()
       => "/Pixera/Projectors/Projector/resetAllColorCorrections" arguments: (Handle or Path) 

      //Set ColorCorrection Value by Path
      null setColorCorrectionWithPath(string path,float value)
       => "/Pixera/Projectors/Projector/setColorCorrectionWithPath" arguments: (Handle or Path) "Abcd" 1.0 

      //Get ColorCorrection Value by Path
      float getColorCorrectionWithPath(string path)
       => "/Pixera/Projectors/Projector/getColorCorrectionWithPath" arguments: (Handle or Path) "Abcd" 

      //Set colorcorrection with jsonstring
      null setColorCorrectionAsJsonString(string colorCorrection)
       => "/Pixera/Projectors/Projector/setColorCorrectionAsJsonString" arguments: (Handle or Path) "Abcd" 

      //Get colorcorrection as jsonstring
      string getColorCorrectionAsJsonString()
       => "/Pixera/Projectors/Projector/getColorCorrectionAsJsonString" arguments: (Handle or Path) 

      // Get projector output. Index is optional. By default the first output is returned.
      handle getOutput(optional<int> index)
       => "/Pixera/Projectors/Projector/getOutput" arguments: (Handle or Path) val 

      // Set projector output.
      null setOutput(handle outputHandle)
       => "/Pixera/Projectors/Projector/setOutput" arguments: (Handle or Path) 123456789 

      // Set horizontal lens shift.
      null setHorizontalLensShift(double value)
       => "/Pixera/Projectors/Projector/setHorizontalLensShift" arguments: (Handle or Path) 1.0 

      // Get horizontal lens shift.
      double getHorizontalLensShift()
       => "/Pixera/Projectors/Projector/getHorizontalLensShift" arguments: (Handle or Path) 

      // Set vertical lens shift.
      null setVerticalLensShift(double value)
       => "/Pixera/Projectors/Projector/setVerticalLensShift" arguments: (Handle or Path) 1.0 

      // Get vertical lens shift.
      double getVerticalLensShift()
       => "/Pixera/Projectors/Projector/getVerticalLensShift" arguments: (Handle or Path) 

      // Set brightness.
      // only generic Projector can be set
      null setBrightness(int value)
       => "/Pixera/Projectors/Projector/setBrightness" arguments: (Handle or Path) 1 

      // Get brightness.
      int getBrightness()
       => "/Pixera/Projectors/Projector/getBrightness" arguments: (Handle or Path) 

      // Set lens fov.
      null setFov(double value)
       => "/Pixera/Projectors/Projector/setFov" arguments: (Handle or Path) 1.0 

      // Get lens fov.
      double getFov()
       => "/Pixera/Projectors/Projector/getFov" arguments: (Handle or Path) 

      // Set lens throw Ratio.
      null setThrowRatio(double value)
       => "/Pixera/Projectors/Projector/setThrowRatio" arguments: (Handle or Path) 1.0 

      // Get lens throw ratio.
      double getThrowRatio()
       => "/Pixera/Projectors/Projector/getThrowRatio" arguments: (Handle or Path) 

      // Set look at point.
      // values needs to be in meters
      null setLookAtPoint(double x,double y,double z)
       => "/Pixera/Projectors/Projector/setLookAtPoint" arguments: (Handle or Path) 1.0 1.0 1.0 

      // Get look at point.
      // values are in meters
      double[] getLookAtPoint()
       => "/Pixera/Projectors/Projector/getLookAtPoint" arguments: (Handle or Path) 

      // Set resolution of projector.
      // this can only be set if the projector is not connected to a output.
      // if it is connected the projector has the resolution of the output.
      null setResolution(int x,int y)
       => "/Pixera/Projectors/Projector/setResolution" arguments: (Handle or Path) 1 1 

      // get resolution of projector.
      int[] getResolution()
       => "/Pixera/Projectors/Projector/getResolution" arguments: (Handle or Path) 
   handle getInst(string instancePath)
    => "/Pixera/Projectors/Projector/getInst" arguments: "Abcd" 
   handle getHandleFromInstancePath(string instancePath)
    => "/Pixera/Projectors/Projector/getHandleFromInstancePath" arguments: "Abcd" 
      string getInstancePath()
       => "/Pixera/Projectors/Projector/getInstancePath" arguments: (Handle or Path) 
   }
}

namespace Resources
{
   // Returns handles to all resources (including within subfolders) in the resource
   // tree in the Compositing tab.
   handle[] getResources()
    => "/Pixera/Resources/getResources"

   // Returns a handle to a folder in the resource tree. The namePath
   // specifies the folder by starting from the root and then listing
   // all the names as seen in the resources tree separated by forward
   // slashes, e.g. "Media/Std Backgrounds/Atmospherics".
   handle getResourceFolderWithNamePath(string namePath)
    => "/Pixera/Resources/getResourceFolderWithNamePath" arguments: "Abcd" 

   // Returns the top level resource folders.
   handle[] getResourceFolders()
    => "/Pixera/Resources/getResourceFolders"
   handle[] getTranscodingFolders()
    => "/Pixera/Resources/getTranscodingFolders"
   string getJsonDescrip()
    => "/Pixera/Resources/getJsonDescrip"

   class ResourceFolder
   {
      // Pixera Control self-reference function.
      handle ref()
       => "/Pixera/Resources/ResourceFolder/ref" arguments: (Handle or Path) 
      string getName()
       => "/Pixera/Resources/ResourceFolder/getName" arguments: (Handle or Path) 
      null setName(string name)
       => "/Pixera/Resources/ResourceFolder/setName" arguments: (Handle or Path) "Abcd" 

      // Returns the resource folders that are immediate children of this folder.
      handle[] getResourceFolders()
       => "/Pixera/Resources/ResourceFolder/getResourceFolders" arguments: (Handle or Path) 

      // Returns handles to all the resources that are directly in one folder (i.e. does not consider subfolders).
      handle[] getResources()
       => "/Pixera/Resources/ResourceFolder/getResources" arguments: (Handle or Path) 

      // Returns a handle to a resource in the current folder at index
      handle getResourceAtIndex(int index)
       => "/Pixera/Resources/ResourceFolder/getResourceAtIndex" arguments: (Handle or Path) 1 

      // Returns a handle to a resource in the current folder by name
      handle getResourceByName(string name)
       => "/Pixera/Resources/ResourceFolder/getResourceByName" arguments: (Handle or Path) "Abcd" 

      // Adds the file at the path to the folder.
      handle addResource(string path)
       => "/Pixera/Resources/ResourceFolder/addResource" arguments: (Handle or Path) "Abcd" 

      // Adds the files at the directory path to the folder. If checkRedundancy == true then only files that have names
      // that are not currently in the folder are added. If remoteOthers == true then the missing files in the folder are removed, assets are untouched
      handle[] addResourcesFromDirectory(string path,boolean removeOthers,boolean checkRedundancy)
       => "/Pixera/Resources/ResourceFolder/addResourcesFromDirectory" arguments: (Handle or Path) "Abcd" true true 

      // Adds the files at the directory path to the folder. If checkRedundancy == true then only files that have names
      // that are not currently in the folder are added. If remoteOthers == true then the missing files in the folder are removed, assets are also removed
      handle[] addResourcesFromDirectoryRemoveAssets(string path,boolean removeOthers,boolean checkRedundancy)
       => "/Pixera/Resources/ResourceFolder/addResourcesFromDirectoryRemoveAssets" arguments: (Handle or Path) "Abcd" true true 

      //Creates and adds a text(0), colour(1), web(2), timelinereference(3) or multi(4) resource.
      handle addInternalResource(string signature,int resKind)
       => "/Pixera/Resources/ResourceFolder/addInternalResource" arguments: (Handle or Path) "Abcd" 1 

      // Creates folders hierarchically for a path as children of the specified folder.
      // For example if you call this against the handle of the "Media" folder with a path like:
      // "/my/new/folders", it will result in the following structure: "Media/my/new/folders".
      null createFoldersFrom(string path)
       => "/Pixera/Resources/ResourceFolder/createFoldersFrom" arguments: (Handle or Path) "Abcd" 

      // Reloads for all resources in folder the files from disk, distributes changed files and creates new preview.
      null refreshResources()
       => "/Pixera/Resources/ResourceFolder/refreshResources" arguments: (Handle or Path) 

      // Reloads for all resources in folder the files from disk, distributes changed files and creates new preview.
      null moveResourceToThis(double id)
       => "/Pixera/Resources/ResourceFolder/moveResourceToThis" arguments: (Handle or Path) 1.0 
      null removeThis()
       => "/Pixera/Resources/ResourceFolder/removeThis" arguments: (Handle or Path) 
      null removeThisIncludingAssets()
       => "/Pixera/Resources/ResourceFolder/removeThisIncludingAssets" arguments: (Handle or Path) 
      null removeAllContents()
       => "/Pixera/Resources/ResourceFolder/removeAllContents" arguments: (Handle or Path) 
      null removeAllContentsIncludingAssets()
       => "/Pixera/Resources/ResourceFolder/removeAllContentsIncludingAssets" arguments: (Handle or Path) 
      null deleteAllContentsAssetsFromLiveSystem(handle apEntityLiveSystemHandle)
       => "/Pixera/Resources/ResourceFolder/deleteAllContentsAssetsFromLiveSystem" arguments: (Handle or Path) 123456789 

      // Resets distribution targets based on the file distribution settings and if needed distributes resource.
      null resetDistributionTargets()
       => "/Pixera/Resources/ResourceFolder/resetDistributionTargets" arguments: (Handle or Path) 

      // Changes the state of a distribution target of a resource.
      null changeDistributionTarget(handle apEntityLiveSystemHandle,boolean shouldDistribute)
       => "/Pixera/Resources/ResourceFolder/changeDistributionTarget" arguments: (Handle or Path) 123456789 true 
      null replaceResourcesByString(string searchString,string replaceString,string path)
       => "/Pixera/Resources/ResourceFolder/replaceResourcesByString" arguments: (Handle or Path) "Abcd" "Abcd" "Abcd" 
   handle getInst(string instancePath)
    => "/Pixera/Resources/ResourceFolder/getInst" arguments: "Abcd" 
   handle getHandleFromInstancePath(string instancePath)
    => "/Pixera/Resources/ResourceFolder/getHandleFromInstancePath" arguments: "Abcd" 
      string getInstancePath()
       => "/Pixera/Resources/ResourceFolder/getInstancePath" arguments: (Handle or Path) 
      int getDmxId()
       => "/Pixera/Resources/ResourceFolder/getDmxId" arguments: (Handle or Path) 

      // Get DMX Id of both the resource and its parent folder as:
      // Folder Id << 16, Resource Id.
      int getCombinedDmxId()
       => "/Pixera/Resources/ResourceFolder/getCombinedDmxId" arguments: (Handle or Path) 
      null setDmxId(int id)
       => "/Pixera/Resources/ResourceFolder/setDmxId" arguments: (Handle or Path) 1 
   }

   class TranscodingFolder
   {
      string getUsedTranscodingPreset()
       => "/Pixera/Resources/TranscodingFolder/getUsedTranscodingPreset" arguments: (Handle or Path) 
      null setUsedTranscodingPreset(string preset)
       => "/Pixera/Resources/TranscodingFolder/setUsedTranscodingPreset" arguments: (Handle or Path) "Abcd" 
      boolean getTranscodeAutomatically()
       => "/Pixera/Resources/TranscodingFolder/getTranscodeAutomatically" arguments: (Handle or Path) 
      null setTranscodeAutomatically(boolean autoTranscode)
       => "/Pixera/Resources/TranscodingFolder/setTranscodeAutomatically" arguments: (Handle or Path) true 
      boolean getUseRxCacheAsDestination()
       => "/Pixera/Resources/TranscodingFolder/getUseRxCacheAsDestination" arguments: (Handle or Path) 
      null setRxCacheAsDestination(boolean useRxCache)
       => "/Pixera/Resources/TranscodingFolder/setRxCacheAsDestination" arguments: (Handle or Path) true 
      string getDestinationDirectory()
       => "/Pixera/Resources/TranscodingFolder/getDestinationDirectory" arguments: (Handle or Path) 
      null setDestinationDirectory(string path)
       => "/Pixera/Resources/TranscodingFolder/setDestinationDirectory" arguments: (Handle or Path) "Abcd" 
   }

   class Resource
   {
      // Pixera Control self-reference function.
      handle ref()
       => "/Pixera/Resources/Resource/ref" arguments: (Handle or Path) 

      // Removes the resource.
      null removeThis()
       => "/Pixera/Resources/Resource/removeThis" arguments: (Handle or Path) 

      // Permanently removes the assets associated with the resource from all systems
      // on which they are stored.
      null deleteFilesOnSystems()
       => "/Pixera/Resources/Resource/deleteFilesOnSystems" arguments: (Handle or Path) 

      // Removes the resource and permanently removes the assets associated with it from
      // all systems on which they are stored.
      null removeThisIncludingAssets()
       => "/Pixera/Resources/Resource/removeThisIncludingAssets" arguments: (Handle or Path) 

      // Permanently removes the asset from the given live system.
      null deleteAssetFromLiveSystem(handle apEntityLiveSystemHandle)
       => "/Pixera/Resources/Resource/deleteAssetFromLiveSystem" arguments: (Handle or Path) 123456789 

      // Resets distribution targets based on the file distribution settings and if needed distributes resource.
      null resetDistributionTargets()
       => "/Pixera/Resources/Resource/resetDistributionTargets" arguments: (Handle or Path) 

      // Changes the state of a distribution target of a resource.
      null changeDistributionTarget(handle apEntityLiveSystemHandle,boolean shouldDistribute)
       => "/Pixera/Resources/Resource/changeDistributionTarget" arguments: (Handle or Path) 123456789 true 
      string getName()
       => "/Pixera/Resources/Resource/getName" arguments: (Handle or Path) 
      null setName(string name)
       => "/Pixera/Resources/Resource/setName" arguments: (Handle or Path) "Abcd" 
      double getFps()
       => "/Pixera/Resources/Resource/getFps" arguments: (Handle or Path) 
      double[] getResolution()
       => "/Pixera/Resources/Resource/getResolution" arguments: (Handle or Path) 

      // Returns the active state of a Live Input Resource
      boolean getIsActive()
       => "/Pixera/Resources/Resource/getIsActive" arguments: (Handle or Path) 

      // Returns list of available Video Modes of a Live Input Resource,
      // not all Live Input Resources have a list of modes.
      string[] getVideoStreamModes()
       => "/Pixera/Resources/Resource/getVideoStreamModes" arguments: (Handle or Path) 

      // Set the Video Mode of a Live Input Resource by it's index.
      null setVideoStreamMode(int index)
       => "/Pixera/Resources/Resource/setVideoStreamMode" arguments: (Handle or Path) 1 

      // Returns an id based on the handle. This is currently necessary in some situations
      // because some API implementations can not yet consume handles as parameters.
      double getId()
       => "/Pixera/Resources/Resource/getId" arguments: (Handle or Path) 

      // Returns the duration of the resource in seconds.
      double getDuration()
       => "/Pixera/Resources/Resource/getDuration" arguments: (Handle or Path) 

      // Returns the type of the resource.
      string getType()
       => "/Pixera/Resources/Resource/getType" arguments: (Handle or Path) 
      null setCurrentVersion(string version)
       => "/Pixera/Resources/Resource/setCurrentVersion" arguments: (Handle or Path) "Abcd" 
      string getCurrentVersion()
       => "/Pixera/Resources/Resource/getCurrentVersion" arguments: (Handle or Path) 
      string[] getVersions()
       => "/Pixera/Resources/Resource/getVersions" arguments: (Handle or Path) 

      //get Version Suffix, First is begin
      string[] getVersionSuffix()
       => "/Pixera/Resources/Resource/getVersionSuffix" arguments: (Handle or Path) 

      //get start suffex for versions
      null rescanVersions()
       => "/Pixera/Resources/Resource/rescanVersions" arguments: (Handle or Path) 

      // Returns the png thumbnail data of the resource in a base 64 string. This is the
      // image that is shown in the resource tree. Its resolution is currently 256 * 174
      // pixels.
      string getThumbnailAsBase64()
       => "/Pixera/Resources/Resource/getThumbnailAsBase64" arguments: (Handle or Path) 
      boolean getHasPendingTransfer()
       => "/Pixera/Resources/Resource/getHasPendingTransfer" arguments: (Handle or Path) 

      // Returns true if the resource is currently referred to in a timeline
      // (via a clip or a dominant value).
      double getIsInUse()
       => "/Pixera/Resources/Resource/getIsInUse" arguments: (Handle or Path) 

      // Returns the time the resource was first referred to in a timeline (via a clip or a dominant
      // value) in milliseconds since midnight Jan 1st 1970 UTC. If the time is zero then the resource
      // has not been used yet in any timeline.
      double getLastUsageBeginTime()
       => "/Pixera/Resources/Resource/getLastUsageBeginTime" arguments: (Handle or Path) 

      // Returns the time the resource was first referred to in a timeline (via a clip or a dominant
      // value) as an ISO-8601 string (using the local timezone). If the string is empty then the resource
      // has not been used yet in any timeline.
      string getLastUsageBeginTimeAsString()
       => "/Pixera/Resources/Resource/getLastUsageBeginTimeAsString" arguments: (Handle or Path) 

      // Returns the time the resource was removed from the last timeline (whether from a clip or
      // a dominant value) in milliseconds since midnight Jan 1st 1970 UTC. If the time is zero then
      // the resource was either never used at all or is still in use.
      double getLastUsageEndTime()
       => "/Pixera/Resources/Resource/getLastUsageEndTime" arguments: (Handle or Path) 

      // Returns the time the resource was removed from the last timeline (whether from a clip or
      // a dominant value) as an ISO-8601 string (using the local timezone). If the time is zero then
      // the resource was either never used at all or is still in use.
      string getLastUsageEndTimeAsString()
       => "/Pixera/Resources/Resource/getLastUsageEndTimeAsString" arguments: (Handle or Path) 

      // get the system filepath
      string getFilePath()
       => "/Pixera/Resources/Resource/getFilePath" arguments: (Handle or Path) 

      // Sets the text of a text input resource.
      null setText(string text)
       => "/Pixera/Resources/Resource/setText" arguments: (Handle or Path) "Abcd" 

      // Returns the text of a text input resource.
      string getText()
       => "/Pixera/Resources/Resource/getText" arguments: (Handle or Path) 
      boolean setFontWithName(string fontName)
       => "/Pixera/Resources/Resource/setFontWithName" arguments: (Handle or Path) "Abcd" 
      string getFontName()
       => "/Pixera/Resources/Resource/getFontName" arguments: (Handle or Path) 
      boolean setFontWithPath(string fontPath)
       => "/Pixera/Resources/Resource/setFontWithPath" arguments: (Handle or Path) "Abcd" 

      // 0 : Align Left
      // 1 : Align Center
      // 2 : Align Right
      boolean setHorizontalTextAlignment(int textAlignment)
       => "/Pixera/Resources/Resource/setHorizontalTextAlignment" arguments: (Handle or Path) 1 

      // 0 : Align Top
      // 1 : Align Center
      // 2 : Align Bottom
      int getHorizontalTextAlignment()
       => "/Pixera/Resources/Resource/getHorizontalTextAlignment" arguments: (Handle or Path) 
      boolean setVerticalTextAlignment(int textAlignment)
       => "/Pixera/Resources/Resource/setVerticalTextAlignment" arguments: (Handle or Path) 1 
      int getVerticalTextAlignment()
       => "/Pixera/Resources/Resource/getVerticalTextAlignment" arguments: (Handle or Path) 
      boolean setLineHeight(double lineHeight)
       => "/Pixera/Resources/Resource/setLineHeight" arguments: (Handle or Path) 1.0 
      double getLineHeight()
       => "/Pixera/Resources/Resource/getLineHeight" arguments: (Handle or Path) 

      // Returns the text-measurements width and height of the rectangle enclosing the text. The first entry of the
      // returned vector represents width, the second one represents height. Unit is pixels.
      int[] getTextMeasurementsWidthAndHeight()
       => "/Pixera/Resources/Resource/getTextMeasurementsWidthAndHeight" arguments: (Handle or Path) 

      // Sets the url of a web browser resource.
      null setUrl(string url)
       => "/Pixera/Resources/Resource/setUrl" arguments: (Handle or Path) "Abcd" 

      // Returns the url of a web browser resource.
      string getUrl()
       => "/Pixera/Resources/Resource/getUrl" arguments: (Handle or Path) 

      // Sets the path to a color transformation file to be used with the resource.
      null setColorTransformPath(string colorTransformPath)
       => "/Pixera/Resources/Resource/setColorTransformPath" arguments: (Handle or Path) "Abcd" 

      // Returns the path of the color transformation file be used with the resource.
      string getColorTransformPath()
       => "/Pixera/Resources/Resource/getColorTransformPath" arguments: (Handle or Path) 

      // Clear the path to a color transformation file.
      null clearColorTransformPath()
       => "/Pixera/Resources/Resource/clearColorTransformPath" arguments: (Handle or Path) 

      // Reloads the file from disk, distributes changed files and creates new preview.
      null refresh(string text)
       => "/Pixera/Resources/Resource/refresh" arguments: (Handle or Path) "Abcd" 

      // Distribute the file to clients.
      null distribute()
       => "/Pixera/Resources/Resource/distribute" arguments: (Handle or Path) 

      // Get the id used to access the resource through dmx.
      int getDmxId()
       => "/Pixera/Resources/Resource/getDmxId" arguments: (Handle or Path) 

      // Set the id used to access the resource through dmx.
      null setDmxId(int id)
       => "/Pixera/Resources/Resource/setDmxId" arguments: (Handle or Path) 1 

      // Remove multiresource item at index
      null removeMultiresourceIndex(int index)
       => "/Pixera/Resources/Resource/removeMultiresourceIndex" arguments: (Handle or Path) 1 

      // Add multiresource item
      null addMultiresourceItem(double id)
       => "/Pixera/Resources/Resource/addMultiresourceItem" arguments: (Handle or Path) 1.0 

      // Get multiresource items
      handle[] getMultiresourceItems()
       => "/Pixera/Resources/Resource/getMultiresourceItems" arguments: (Handle or Path) 

      // replace multiresource item at index
      null replaceMultiresourceItemByIndex(int index,double id)
       => "/Pixera/Resources/Resource/replaceMultiresourceItemByIndex" arguments: (Handle or Path) 1 1.0 

      // Set multiresource resolution
      null setMultiresourceResolution(int width,int height)
       => "/Pixera/Resources/Resource/setMultiresourceResolution" arguments: (Handle or Path) 1 1 

      // Set multiresource items size. (1.0 = full)
      null setMultiresourceItemSizebyIndex(int index,double width,double height)
       => "/Pixera/Resources/Resource/setMultiresourceItemSizebyIndex" arguments: (Handle or Path) 1 1.0 1.0 

      // Set multiresource items position.
      null setMultiresourceItemPositionbyIndex(int index,double x,double y)
       => "/Pixera/Resources/Resource/setMultiresourceItemPositionbyIndex" arguments: (Handle or Path) 1 1.0 1.0 

      // Sets a color resource to show a gradient between its assigned colors.
      null setUseGradient(boolean useGradient)
       => "/Pixera/Resources/Resource/setUseGradient" arguments: (Handle or Path) true 

      // Get if a color resource uses a gradient.
      boolean getUseGradient()
       => "/Pixera/Resources/Resource/getUseGradient" arguments: (Handle or Path) 

      // Set multiple colors for a color resource.
      // Color format is ARGB encoded in one 32 bit integer
      // where a << 24, r << 16, g << 8, b << 0.
      null setColors(uint[] argbCols,double[] positions,string[] colNames,optional<bool> useGradient)
       => "/Pixera/Resources/Resource/setColors" arguments: (Handle or Path) [1, ...] [1.0, ...] ["Efgh", ...] val 

      // Set one color of a color resource.
      // If index does not exist the color will be appended to the end of the color list.
      null setColorAtIndex(int index,int red,int green,int blue,int alpha,double position,string name,optional<bool> useGradient)
       => "/Pixera/Resources/Resource/setColorAtIndex" arguments: (Handle or Path) 1 1 1 1 1 1.0 "Abcd" val 

      // Get color value as ARGB in a single 32 bit integer
      // where a << 24, r << 16, g << 8, b << 0.
      int getColorAtIndex(int colorIndex)
       => "/Pixera/Resources/Resource/getColorAtIndex" arguments: (Handle or Path) 1 
      double getColorPositionAtIndex(int colorIndex)
       => "/Pixera/Resources/Resource/getColorPositionAtIndex" arguments: (Handle or Path) 1 

      // action = run for launch
      // action = kill for kill
      null launchVirtualWorld(string action)
       => "/Pixera/Resources/Resource/launchVirtualWorld" arguments: (Handle or Path) "Abcd" 
      handle getUnrealWorld()
       => "/Pixera/Resources/Resource/getUnrealWorld" arguments: (Handle or Path) 

      // Sets the restrict to specific services state and the list of IPs of the services.
      null setMultiResourceItemRestrictedServiceIps(int itemIndex,string[] ipAdresses)
       => "/Pixera/Resources/Resource/setMultiResourceItemRestrictedServiceIps" arguments: (Handle or Path) 1 ["Efgh", ...] 

      // Returns the list of restricted service IPs in a comma separated string.
      string[] getMultiResourceItemRestrictedServiceIps(int itemIndex)
       => "/Pixera/Resources/Resource/getMultiResourceItemRestrictedServiceIps" arguments: (Handle or Path) 1 
      null replace(string path)
       => "/Pixera/Resources/Resource/replace" arguments: (Handle or Path) "Abcd" 
   handle getInst(string instancePath)
    => "/Pixera/Resources/Resource/getInst" arguments: "Abcd" 
   handle getHandleFromInstancePath(string instancePath)
    => "/Pixera/Resources/Resource/getHandleFromInstancePath" arguments: "Abcd" 
      string getInstancePath()
       => "/Pixera/Resources/Resource/getInstancePath" arguments: (Handle or Path) 

      // Search for a transcoding preset with the given name, and if found,
      // moves the resource to the transcoding folder and starts transcoding it with that preset
      // if you want to convert all frames, set 0 as start and -1 as end frame.
      // serviceId is currently not used.
      null transcodeWithExisitngPreset(string presetName,boolean useRxCache,string destinationPath,int startFrame,int endFrame,uint serviceId)
       => "/Pixera/Resources/Resource/transcodeWithExisitngPreset" arguments: (Handle or Path) "Abcd" true "Abcd" 1 1 1 

      // Move the resource to the transcoding folder and start transcoding with a preset
      // in JSON format. See "Transcoding::addOrChangePreset" on how to build the JSON string
      null transcodeWithSettings(string settings,boolean useRxCache,string destinationPath,int startFrame,int endFrame,uint serviceId)
       => "/Pixera/Resources/Resource/transcodeWithSettings" arguments: (Handle or Path) "Abcd" true "Abcd" 1 1 1 
      null moveToTranscodingFolder(string folderPath)
       => "/Pixera/Resources/Resource/moveToTranscodingFolder" arguments: (Handle or Path) "Abcd" 
   }

   class UnrealWorld
   {
      string[] getLevelNames()
       => "/Pixera/Resources/UnrealWorld/getLevelNames" arguments: (Handle or Path) 
      null loadLevel(string levelName)
       => "/Pixera/Resources/UnrealWorld/loadLevel" arguments: (Handle or Path) "Abcd" 
      string[] getEventTriggerNames()
       => "/Pixera/Resources/UnrealWorld/getEventTriggerNames" arguments: (Handle or Path) 
      null triggerEventByName(string triggerName)
       => "/Pixera/Resources/UnrealWorld/triggerEventByName" arguments: (Handle or Path) "Abcd" 
      null createNDisplayConfig()
       => "/Pixera/Resources/UnrealWorld/createNDisplayConfig" arguments: (Handle or Path) 
      null runUnreal()
       => "/Pixera/Resources/UnrealWorld/runUnreal" arguments: (Handle or Path) 
      null killUnreal()
       => "/Pixera/Resources/UnrealWorld/killUnreal" arguments: (Handle or Path) 
      string getName()
       => "/Pixera/Resources/UnrealWorld/getName" arguments: (Handle or Path) 
   handle getInst(string instancePath)
    => "/Pixera/Resources/UnrealWorld/getInst" arguments: "Abcd" 
   handle getHandleFromInstancePath(string instancePath)
    => "/Pixera/Resources/UnrealWorld/getHandleFromInstancePath" arguments: "Abcd" 
      string getInstancePath()
       => "/Pixera/Resources/UnrealWorld/getInstancePath" arguments: (Handle or Path) 
   }
}

namespace Timelines
{
   // Returns the handle of the timeline at the (zero-based) index in
   // the timeline library of the Compositing tab.
   handle getTimelineAtIndex(int index)
    => "/Pixera/Timelines/getTimelineAtIndex" arguments: 1 

   // Returns the handle of the timeline with the given name (as shown in the 
   // timeline library).
   handle getTimelineFromName(string name)
    => "/Pixera/Timelines/getTimelineFromName" arguments: "Abcd" 

   // Returns handles to all timelines.
   handle[] getTimelines()
    => "/Pixera/Timelines/getTimelines"

   // Returns names to all timelines.
   string[] getTimelineNames()
    => "/Pixera/Timelines/getTimelineNames"

   // Returns handles to all selected timelines
   handle[] getTimelinesSelected()
    => "/Pixera/Timelines/getTimelinesSelected"

   // Create Timeline
   handle createTimeline()
    => "/Pixera/Timelines/createTimeline"

   struct TimelineAttributes
   {
      int index;
      string name;
      double fps;
      int mode;
   }

   class Timeline
   {
      // Pixera Control self-reference function.
      handle ref()
       => "/Pixera/Timelines/Timeline/ref" arguments: (Handle or Path) 

      // Removes the timeline.
      null removeThis()
       => "/Pixera/Timelines/Timeline/removeThis" arguments: (Handle or Path) 

      // Duplicate the timeline. withoutClipsCues is optional and on default false
      handle duplicateThis(optional<bool> withoutClipsCues)
       => "/Pixera/Timelines/Timeline/duplicateThis" arguments: (Handle or Path) val 

      // Select the timeline.
      null selectThis()
       => "/Pixera/Timelines/Timeline/selectThis" arguments: (Handle or Path) 

      // Get zoom factor of the timeline.
      double getZoomFactor()
       => "/Pixera/Timelines/Timeline/getZoomFactor" arguments: (Handle or Path) 

      // Set zoom factor of the timeline.
      null setZoomFactor(double zoomFactor)
       => "/Pixera/Timelines/Timeline/setZoomFactor" arguments: (Handle or Path) 1.0 

      // Get vertical scroll offset of the timeline.
      int getVerticalScrollOffset()
       => "/Pixera/Timelines/Timeline/getVerticalScrollOffset" arguments: (Handle or Path) 

      // Get vertical scroll offset of the timeline.
      null setVerticalScrollOffset(int offset)
       => "/Pixera/Timelines/Timeline/setVerticalScrollOffset" arguments: (Handle or Path) 1 

      // Get vertical scroll offset of the timeline.
      int getHorizontalScrollOffset()
       => "/Pixera/Timelines/Timeline/getHorizontalScrollOffset" arguments: (Handle or Path) 

      // Get vertical scroll offset of the timeline.
      null setHorizontalScrollOffset(int offset)
       => "/Pixera/Timelines/Timeline/setHorizontalScrollOffset" arguments: (Handle or Path) 1 

      // Moves the timeline up or down in the render order, depending on whether moveDown is true.
      null moveInRenderOrder(boolean moveDown)
       => "/Pixera/Timelines/Timeline/moveInRenderOrder" arguments: (Handle or Path) true 
      null setRenderOrder(int index)
       => "/Pixera/Timelines/Timeline/setRenderOrder" arguments: (Handle or Path) 1 
      int getRenderOrder()
       => "/Pixera/Timelines/Timeline/getRenderOrder" arguments: (Handle or Path) 

      // Returns handles to all layers of the timeline.
      handle[] getLayers()
       => "/Pixera/Timelines/Timeline/getLayers" arguments: (Handle or Path) 

      // Returns the handle from a layer with name.
      handle getLayerFromName(string name)
       => "/Pixera/Timelines/Timeline/getLayerFromName" arguments: (Handle or Path) "Abcd" 

      // Returns names to all layers of the timeline.
      string[] getLayerNames()
       => "/Pixera/Timelines/Timeline/getLayerNames" arguments: (Handle or Path) 

      // Returns handles to all selected layers of the timeline.
      handle[] getLayersSelected()
       => "/Pixera/Timelines/Timeline/getLayersSelected" arguments: (Handle or Path) 

      // Select Layer by index of the timeline.
      null selectLayerByIndex(int index)
       => "/Pixera/Timelines/Timeline/selectLayerByIndex" arguments: (Handle or Path) 1 

      // Select Layers of the timeline by Names.
      null selectLayerByNames(string[] layerNames)
       => "/Pixera/Timelines/Timeline/selectLayerByNames" arguments: (Handle or Path) ["Efgh", ...] 

      // Returns a handle to the layer in the timeline at the (zero-based) index in
      // the order as shown in the Pixera Timeline interface.
      handle getLayerAtIndex(int index)
       => "/Pixera/Timelines/Timeline/getLayerAtIndex" arguments: (Handle or Path) 1 

      // Creates a layer and returns a handle to it.
      handle createLayer()
       => "/Pixera/Timelines/Timeline/createLayer" arguments: (Handle or Path) 

      // Batch-create clips on multiple layers.
      string createClipsFromJsonString(string jsonString)
       => "/Pixera/Timelines/Timeline/createClipsFromJsonString" arguments: (Handle or Path) "Abcd" 

      // Batch-remove clips as efficiently as possible.
      null removeClipsFromJsonString(string jsonString)
       => "/Pixera/Timelines/Timeline/removeClipsFromJsonString" arguments: (Handle or Path) "Abcd" 
      string getCueInfosAsJsonString()
       => "/Pixera/Timelines/Timeline/getCueInfosAsJsonString" arguments: (Handle or Path) 

      // Returns the handles of all cues in chronological order.
      handle[] getCues()
       => "/Pixera/Timelines/Timeline/getCues" arguments: (Handle or Path) 
      handle[] getCuesSelected()
       => "/Pixera/Timelines/Timeline/getCuesSelected" arguments: (Handle or Path) 

      // Returns names to all cues.
      string[] getCueNames()
       => "/Pixera/Timelines/Timeline/getCueNames" arguments: (Handle or Path) 

      // Returns the handle of the cue with the given index. 
      // Indices are in chronological order.
      handle getCueAtIndex(int index)
       => "/Pixera/Timelines/Timeline/getCueAtIndex" arguments: (Handle or Path) 1 

      // Returns the handle of the cue with the given name.
      // If multiple cues have the same name, the handle to the first match will be returned.
      // name: name of cue
      handle getCueFromName(string name)
       => "/Pixera/Timelines/Timeline/getCueFromName" arguments: (Handle or Path) "Abcd" 

      // Returns the handle of the cue with the given number.
      // If multiple cues have the same number, the handle to the first match will be returned.
      // number: number of cue
      handle getCueFromNumber(int number)
       => "/Pixera/Timelines/Timeline/getCueFromNumber" arguments: (Handle or Path) 1 

      // Jumps to and executes the cue with the given name.
      // name: name of cue
      // blendDuration: optional parameter to set blend duration in seconds.
      null applyCueWithName(string name,optional<double> blendDuration)
       => "/Pixera/Timelines/Timeline/applyCueWithName" arguments: (Handle or Path) "Abcd" val 

      // Jumps to and executes the cue with the given number.
      // number: number of cue
      // blendDuration: optional parameter to set blend duration in seconds.
      null applyCueWithNumber(int number,optional<double> blendDuration)
       => "/Pixera/Timelines/Timeline/applyCueWithNumber" arguments: (Handle or Path) 1 val 

      // Creates a cue and returns its handle.
      // name: Name of the cue
      // timeInFrames: Time on timeline in total frames
      // operation:
      // 1:Play
      // 2:Pause
      // 3:Jump
      // 4:Stop
      handle createCue(string name,double timeInFrames,int operation)
       => "/Pixera/Timelines/Timeline/createCue" arguments: (Handle or Path) "Abcd" 1.0 1 

      // Removes all cues.
      null removeCues()
       => "/Pixera/Timelines/Timeline/removeCues" arguments: (Handle or Path) 

      // Create pause cue before selected clips
      null createPauseCueBeforeSelectedClips()
       => "/Pixera/Timelines/Timeline/createPauseCueBeforeSelectedClips" arguments: (Handle or Path) 

      // Starts the timeline at the current time.
      null play()
       => "/Pixera/Timelines/Timeline/play" arguments: (Handle or Path) 

      // Pauses the timeline at the current time.
      null pause()
       => "/Pixera/Timelines/Timeline/pause" arguments: (Handle or Path) 

      // Stops the timeline.
      null stop()
       => "/Pixera/Timelines/Timeline/stop" arguments: (Handle or Path) 

      // Toggles the timeline transport mode between play and pause.
      null toggleTransport()
       => "/Pixera/Timelines/Timeline/toggleTransport" arguments: (Handle or Path) 

      // Stores all domination values. I.e. events are created at the current time.
      null store()
       => "/Pixera/Timelines/Timeline/store" arguments: (Handle or Path) 

      // Resets all domination values.
      null reset()
       => "/Pixera/Timelines/Timeline/reset" arguments: (Handle or Path) 

      // Returns the attributes of the timeline (see TimelineAttributes struct).
      null getAttributes()
       => "/Pixera/Timelines/Timeline/getAttributes" arguments: (Handle or Path) 

      // Sets the current time in frames. Use getFps(.) to relate the frames to seconds.
      // This method is deprecated. setCurrentTime(int time) should be used instead.
      // time: Time in frames.
      boolean setCurrentFrame(int time)
       => "/Pixera/Timelines/Timeline/setCurrentFrame" arguments: (Handle or Path) 1 

      // Sets the current time in frames. Use getFps() to relate the frames to seconds.
      // time: Time in frames.
      null setCurrentTime(int time)
       => "/Pixera/Timelines/Timeline/setCurrentTime" arguments: (Handle or Path) 1 

      // Returns the current time in frames. Use getFps() to relate the frames to seconds.
      int getCurrentTime()
       => "/Pixera/Timelines/Timeline/getCurrentTime" arguments: (Handle or Path) 

      // Scrub frames up or down from current time.
      null scrubCurrentTime(int frames)
       => "/Pixera/Timelines/Timeline/scrubCurrentTime" arguments: (Handle or Path) 1 

      // Returns the current time as a hours, minutes, seconds, frames string.
      string getCurrentHMSF()
       => "/Pixera/Timelines/Timeline/getCurrentHMSF" arguments: (Handle or Path) 

      // Sets the transport mode of the timeline.
      // Mode Parameter: Play = 1, Pause = 2, Stop = 3.
      boolean setTransportMode(int mode)
       => "/Pixera/Timelines/Timeline/setTransportMode" arguments: (Handle or Path) 1 

      // Returns the transport mode of the timeline.
      // Return values: Play = 1, Pause = 2, Stop = 3.
      int getTransportMode()
       => "/Pixera/Timelines/Timeline/getTransportMode" arguments: (Handle or Path) 

      // Set timecode input for midi and artnet timecode.
      double setTimecodeInput(int hour,int minute,int second,int frame,double elapsedTime,boolean running,int freshMode,int stateToken,int format)
       => "/Pixera/Timelines/Timeline/setTimecodeInput" arguments: (Handle or Path) 1 1 1 1 1.0 true 1 1 1 

      // Returns the frames per second value used as a time base.
      double getFps()
       => "/Pixera/Timelines/Timeline/getFps" arguments: (Handle or Path) 

      // Returns the name of the timeline with the given handle.
      string getName()
       => "/Pixera/Timelines/Timeline/getName" arguments: (Handle or Path) 

      // Rename the timeline.
      null setName(string name)
       => "/Pixera/Timelines/Timeline/setName" arguments: (Handle or Path) "Abcd" 

      // Moves to next cue on timeline
      null moveToNextCue()
       => "/Pixera/Timelines/Timeline/moveToNextCue" arguments: (Handle or Path) 

      // Moves to next cue on timeline and ignores cue properties.
      null moveToNextCueIgnoreProperties()
       => "/Pixera/Timelines/Timeline/moveToNextCueIgnoreProperties" arguments: (Handle or Path) 

      // Returns handle to next cue on timeline.
      handle getCueNext()
       => "/Pixera/Timelines/Timeline/getCueNext" arguments: (Handle or Path) 

      // Moves to previous cue on timeline.
      null moveToPreviousCue()
       => "/Pixera/Timelines/Timeline/moveToPreviousCue" arguments: (Handle or Path) 

      // Moves to previous cue on timeline and ignore cue properties
      null moveToPreviousCueIgnoreProperties()
       => "/Pixera/Timelines/Timeline/moveToPreviousCueIgnoreProperties" arguments: (Handle or Path) 

      // Returns previous cue on timeline.
      handle getCuePrevious()
       => "/Pixera/Timelines/Timeline/getCuePrevious" arguments: (Handle or Path) 

      // Sets the next cue to be ignored when its reached.
      null ignoreNextCue()
       => "/Pixera/Timelines/Timeline/ignoreNextCue" arguments: (Handle or Path) 

      // Sets next cue with a specific operation to be ignored when reached.
      // 1: Play
      // 2: Pause
      // 3: Stop
      // 4: Jump
      null ignoreNextCueWithOperation(int cueOperation)
       => "/Pixera/Timelines/Timeline/ignoreNextCueWithOperation" arguments: (Handle or Path) 1 

      // Fades between current and goal time. Time unit is frames.
      // if preloadDelayInMilliseconds is not set system fade to time delay is used
      null blendToTime(double goalTime,double blendDuration,optional<int> preloadDelayInMilliseconds)
       => "/Pixera/Timelines/Timeline/blendToTime" arguments: (Handle or Path) 1.0 1.0 val 

      // Fades between current and goal time. Time unit is frames. The transport mode at goal time is set to
      // play (transportMode = 1) or pause (transportMode = 2).
      // if preloadDelayInMilliseconds is not set system fade to time delay is used
      null blendToTimeWithTransportMode(double goalTime,double blendDuration,int transportMode,optional<int> preloadDelayInMilliseconds)
       => "/Pixera/Timelines/Timeline/blendToTimeWithTransportMode" arguments: (Handle or Path) 1.0 1.0 1 val 

      // Sets the blend-to-time mode.
      // 1: Cross fade
      // 2: Dip to transparent
      boolean setBlendToTimeMode(int mode)
       => "/Pixera/Timelines/Timeline/setBlendToTimeMode" arguments: (Handle or Path) 1 

      // Sets the speed factor. The value of 'factor' has to be larger than 0. Use this method carefully.
      // To manipulate playback speed we recommend to use setTransportAttributes(.) for the "Transport"
      // parameters of each layer.
      null setSpeedFactor(double factor)
       => "/Pixera/Timelines/Timeline/setSpeedFactor" arguments: (Handle or Path) 1.0 

      // Returns the speed factor.
      double getSpeedFactor()
       => "/Pixera/Timelines/Timeline/getSpeedFactor" arguments: (Handle or Path) 

      // Sets the opacity value.
      // value: opacity value between 0.0 and 1.0
      null setOpacity(double value)
       => "/Pixera/Timelines/Timeline/setOpacity" arguments: (Handle or Path) 1.0 

      // Returns the opacity value.
      double getOpacity()
       => "/Pixera/Timelines/Timeline/getOpacity" arguments: (Handle or Path) 

      // Starts opacity animation from current opacity to 1 (fadeIn == true) or 0 (fadeIn == false).
      // The parameter fullFadeDuration represents the time a complete animation from 0 to 1 or vice versa would
      // last. If the current opacity is inbetween, the executed fade would last less time. E.g. a fade out
      // starting at opacity 0.3 would last fullFadeDuration * 0.3.
      // Time unit is frames.
      null startOpacityAnimation(boolean fadeIn,double fullFadeDuration)
       => "/Pixera/Timelines/Timeline/startOpacityAnimation" arguments: (Handle or Path) true 1.0 

      // Sets the SMPTE timecode mode.
      // 0: None
      // 1: Receive
      // 2: Send
      null setSmpteMode(int mode)
       => "/Pixera/Timelines/Timeline/setSmpteMode" arguments: (Handle or Path) 1 

      // Returns the SMPTE timecode mode.
      int getSmpteMode()
       => "/Pixera/Timelines/Timeline/getSmpteMode" arguments: (Handle or Path) 

      // Stores recorded domination values using the current settings.
      null storeRecordedValues()
       => "/Pixera/Timelines/Timeline/storeRecordedValues" arguments: (Handle or Path) 

      // Sets the SMPTE timecode input behaviour.
      // 1: Continue
      // 2: Pause
      // 3: Stop
      null setSmpteInputBehaviour(int mode)
       => "/Pixera/Timelines/Timeline/setSmpteInputBehaviour" arguments: (Handle or Path) 1 

      // Returns the SMPTE timecode input behaviour.
      int getSmpteInputBehaviour()
       => "/Pixera/Timelines/Timeline/getSmpteInputBehaviour" arguments: (Handle or Path) 

      // Sets the SMPTE timecode offset.
      null setSmpteOffset(double time)
       => "/Pixera/Timelines/Timeline/setSmpteOffset" arguments: (Handle or Path) 1.0 

      // Returns the SMPTE timecode offset.
      double getSmpteOffset()
       => "/Pixera/Timelines/Timeline/getSmpteOffset" arguments: (Handle or Path) 

      // Clears the recorded domination values and resets the reference time.
      null resetRecordedValues()
       => "/Pixera/Timelines/Timeline/resetRecordedValues" arguments: (Handle or Path) 
      string getTimelineInfosAsJsonString()
       => "/Pixera/Timelines/Timeline/getTimelineInfosAsJsonString" arguments: (Handle or Path) 

      // Starts preview editing.
      // goalTime: Sets the preview nowpointer to the given time.
      null startPreviewEdit(double goalTime)
       => "/Pixera/Timelines/Timeline/startPreviewEdit" arguments: (Handle or Path) 1.0 

      // End preview editing.
      // moveToPreview: define whether normal playback should be moved to preview nowpointer or not.
      // blendDurationInMs: Optional parameter to set blend duration in frames. If not set the time defined in settings is used.
      null endPreviewEdit(boolean moveToPreview,optional<int> blendDurationInMs)
       => "/Pixera/Timelines/Timeline/endPreviewEdit" arguments: (Handle or Path) true val 
   handle getInst(string instancePath)
    => "/Pixera/Timelines/Timeline/getInst" arguments: "Abcd" 
   handle getHandleFromInstancePath(string instancePath)
    => "/Pixera/Timelines/Timeline/getHandleFromInstancePath" arguments: "Abcd" 
      string getInstancePath()
       => "/Pixera/Timelines/Timeline/getInstancePath" arguments: (Handle or Path) 
   }

   class Layer
   {
      // Pixera Control self-reference function.
      handle ref()
       => "/Pixera/Timelines/Layer/ref" arguments: (Handle or Path) 

      // Removes the layer.
      null removeThis()
       => "/Pixera/Timelines/Layer/removeThis" arguments: (Handle or Path) 
      handle[] getNodes()
       => "/Pixera/Timelines/Layer/getNodes" arguments: (Handle or Path) 
      handle[] getParameters()
       => "/Pixera/Timelines/Layer/getParameters" arguments: (Handle or Path) 

      // Returns a node immediately below the layer based on the name displayed in the 
      // Timeline UI (e.g. the "Position" node below a standard layer).
      handle getNodeWithName(string name)
       => "/Pixera/Timelines/Layer/getNodeWithName" arguments: (Handle or Path) "Abcd" 

      // Returns a handle to a parameter node child with the given name. At the level of the
      // layer, this will deliver those parameters (e.g. "Transport") that are direct children
      // of the layer. Other parameters can be accessed via the node children of the layer
      // (e.g. the x position is a child of the "Position" node).
      handle getParamWithName(string name)
       => "/Pixera/Timelines/Layer/getParamWithName" arguments: (Handle or Path) "Abcd" 

      // Returns the current position, rotation and scale values (array with 9 entries) 
      // of the layer as determined by the clip at the given time. If no clip is found
      // then the returned array will be empty.
      double[] getSpatialParametersAtTime(double time)
       => "/Pixera/Timelines/Layer/getSpatialParametersAtTime" arguments: (Handle or Path) 1.0 

      // Returns the parent timeline.
      handle getTimeline()
       => "/Pixera/Timelines/Layer/getTimeline" arguments: (Handle or Path) 

      // Sets the name of the layer.
      null setName(string name)
       => "/Pixera/Timelines/Layer/setName" arguments: (Handle or Path) "Abcd" 

      // Returns the name of the layer.
      string getName()
       => "/Pixera/Timelines/Layer/getName" arguments: (Handle or Path) 

      // Resets all dominant parameters of the layer.
      // I.e. after execution the output of the
      // layer is determined by default values, keys and clips.
      null resetLayer()
       => "/Pixera/Timelines/Layer/resetLayer" arguments: (Handle or Path) 

      // Returns all parameter values of the layer as json.
      string getLayerJsonDescrip()
       => "/Pixera/Timelines/Layer/getLayerJsonDescrip" arguments: (Handle or Path) 

      // Set all parameter values as of the layer.
      null setLayerJsonDescrip(string descrip,boolean makeAllDominant)
       => "/Pixera/Timelines/Layer/setLayerJsonDescrip" arguments: (Handle or Path) "Abcd" true 
      string getJsonDescrip()
       => "/Pixera/Timelines/Layer/getJsonDescrip" arguments: (Handle or Path) 
      null initFromJsonDescrip(string descrip)
       => "/Pixera/Timelines/Layer/initFromJsonDescrip" arguments: (Handle or Path) "Abcd" 

      // Sets the opacity of the layer.
      null setOpacity(double value,optional<int> fadeTimeMs)
       => "/Pixera/Timelines/Layer/setOpacity" arguments: (Handle or Path) 1.0 val 

      // Returns the opacity of the layer.
      double getOpacity()
       => "/Pixera/Timelines/Layer/getOpacity" arguments: (Handle or Path) 

      // Resets the dominant opacity of the layer.
      null resetOpacity()
       => "/Pixera/Timelines/Layer/resetOpacity" arguments: (Handle or Path) 

      // Sets the volume of the layer.
      null setVolume(double value,optional<int> fadeTimeMs)
       => "/Pixera/Timelines/Layer/setVolume" arguments: (Handle or Path) 1.0 val 

      // Returns the volume of the layer.
      double getVolume()
       => "/Pixera/Timelines/Layer/getVolume" arguments: (Handle or Path) 

      // Resets the dominant volume of the layer.
      null resetVolume()
       => "/Pixera/Timelines/Layer/resetVolume" arguments: (Handle or Path) 

      // Mutes the layer.
      null muteLayer()
       => "/Pixera/Timelines/Layer/muteLayer" arguments: (Handle or Path) 

      // Un-Mutes the layer.
      null unMuteLayer()
       => "/Pixera/Timelines/Layer/unMuteLayer" arguments: (Handle or Path) 

      // Returns whether the layer is muted.
      boolean getIsLayerMuted()
       => "/Pixera/Timelines/Layer/getIsLayerMuted" arguments: (Handle or Path) 

      // Mutes the Audio.
      null muteAudio()
       => "/Pixera/Timelines/Layer/muteAudio" arguments: (Handle or Path) 

      // Un-Mutes the Audio.
      null unMuteAudio()
       => "/Pixera/Timelines/Layer/unMuteAudio" arguments: (Handle or Path) 

      // Returns whether the audio is muted.
      boolean getIsAudioMuted()
       => "/Pixera/Timelines/Layer/getIsAudioMuted" arguments: (Handle or Path) 

      // The Dmx mute state is encoded in a single 32-Bit value.
      // Muting and unMuting is done by performing bitwise operations.
      // The first 18 FX can be muted individually.
      // The Value for those is: (2^fxIndex)
      // None: 0x0 or 0
      // Transport: 0x1 or 1
      // Opacity: 0x2 or 2
      // Position: 0x4 or 4
      // Rotation: 0x8 or 8
      // Scale: 0x10 or 16
      // FxStart = 0x20 or 32
      // FxEnd = 0x400000 or 4194304
      // FxAll = 0x7FFFE0 or 8388576
      // All = 0x7FFFFF or 8388607
      int getDmxMuteState()
       => "/Pixera/Timelines/Layer/getDmxMuteState" arguments: (Handle or Path) 
      null setDmxMuteState(uint muteState)
       => "/Pixera/Timelines/Layer/setDmxMuteState" arguments: (Handle or Path) 1 
      null toggleExplicitMute(uint flag)
       => "/Pixera/Timelines/Layer/toggleExplicitMute" arguments: (Handle or Path) 1 

      // Sets the mode and loop state of the layer's transport parameter.
      null setTransport(int mode,boolean loop)
       => "/Pixera/Timelines/Layer/setTransport" arguments: (Handle or Path) 1 true 

      // Returns the mode of the layer's transport parameter.
      int getTransportMode()
       => "/Pixera/Timelines/Layer/getTransportMode" arguments: (Handle or Path) 

      // Resets the dominant state of the layer's transport parameter.
      null resetTransportMode()
       => "/Pixera/Timelines/Layer/resetTransportMode" arguments: (Handle or Path) 

      // Returns the loop state of the layer's transport parameter.
      boolean getTransportLoop()
       => "/Pixera/Timelines/Layer/getTransportLoop" arguments: (Handle or Path) 

      // Sets playback speed of the layer.
      null setPlaybackSpeed(double speed)
       => "/Pixera/Timelines/Layer/setPlaybackSpeed" arguments: (Handle or Path) 1.0 

      // Returns playback speed of the layer.
      double getPlaybackSpeed()
       => "/Pixera/Timelines/Layer/getPlaybackSpeed" arguments: (Handle or Path) 

      // Assigns a resource to the layer. The id is conceptually the handle but the
      // handle can not be passed directly for some implementations of the API. Therefore,
      // Resource.getId() should be used to fill this parameter.
      // Note that, up to and including API revision 14, this function took effect by
      // changing the resource assignment of the current clip. From revision 15 onwards,
      // the function works by assigning the resource to the layer as a dominant value
      // independent of the clips in the layer.
      null assignResource(double id)
       => "/Pixera/Timelines/Layer/assignResource" arguments: (Handle or Path) 1.0 

      // Assigns a resource to the layer while besides the resource id also a fade duration
      // has to be passed to the function. The id is conceptually the handle but the handle
      // can not be passed directly for some implementations of the API. Therefore,
      // Resource.getId() should be used to fill this parameter. The unit of the parameter
      // fadeDuration is seconds. Only pass values >= 0. While 0 means 'no fade'.
      null assignResourceWithFade(double id,double fadeDuration)
       => "/Pixera/Timelines/Layer/assignResourceWithFade" arguments: (Handle or Path) 1.0 1.0 

      // Returns the resource currently assigned to the layer.
      handle getAssignedResource()
       => "/Pixera/Timelines/Layer/getAssignedResource" arguments: (Handle or Path) 

      // Resets the currently assigned dominant resource of the layer.
      // I.e. after execution no resource is dominant and the output of the
      // layer is determined by its clips.
      null resetAssignedResource()
       => "/Pixera/Timelines/Layer/resetAssignedResource" arguments: (Handle or Path) 

      // Returns the resource currently assigned to the layer.
      handle getAssignedModelResource()
       => "/Pixera/Timelines/Layer/getAssignedModelResource" arguments: (Handle or Path) 

      // Reset the resource currently assigned to the layer.
      null resetAssignedModelResource()
       => "/Pixera/Timelines/Layer/resetAssignedModelResource" arguments: (Handle or Path) 

      // get assigend fx names.
      string[] getFxNames()
       => "/Pixera/Timelines/Layer/getFxNames" arguments: (Handle or Path) 

      // Sets the duration of the fade that is applied when the dominant resource of the layer is changed, 
      // see API function Layer.assignResource(.). The unit of the value parameter is seconds.
      null setFadeDurationDominantResourceChange(double value)
       => "/Pixera/Timelines/Layer/setFadeDurationDominantResourceChange" arguments: (Handle or Path) 1.0 

      // Returns the duration of the fade that is applied when the dominant resource of the layer is changed.
      // The unit of the returned value is seconds.
      double getFadeDurationDominantResourceChange()
       => "/Pixera/Timelines/Layer/getFadeDurationDominantResourceChange" arguments: (Handle or Path) 

      // Creates a clip at current time and returns a handle to it.
      handle createClip()
       => "/Pixera/Timelines/Layer/createClip" arguments: (Handle or Path) 

      // Creates a clip at the given time and returns a handle to it.
      // Time in frames.
      handle createClipAtTime(double timeInFrames)
       => "/Pixera/Timelines/Layer/createClipAtTime" arguments: (Handle or Path) 1.0 
      null controlClipBorder(handle clip,boolean isEnter,boolean isIncremental,double entryTime)
       => "/Pixera/Timelines/Layer/controlClipBorder" arguments: (Handle or Path) 123456789 true true 1.0 

      // Returns the clip at the given index. Index is 0-based.
      handle getClipAtIndex(int index)
       => "/Pixera/Timelines/Layer/getClipAtIndex" arguments: (Handle or Path) 1 

      // Returns all clips.
      handle[] getClips()
       => "/Pixera/Timelines/Layer/getClips" arguments: (Handle or Path) 

      // Returns current clip
      handle getClipCurrent(int offset)
       => "/Pixera/Timelines/Layer/getClipCurrent" arguments: (Handle or Path) 1 

      // Returns all clips.
      handle[] getClipsSelected()
       => "/Pixera/Timelines/Layer/getClipsSelected" arguments: (Handle or Path) 

      // Removes all clips.
      null removeClips()
       => "/Pixera/Timelines/Layer/removeClips" arguments: (Handle or Path) 

      // Sets the screen with name given as layer's home screen.
      null setHomeScreenFromScreenName(string screenName)
       => "/Pixera/Timelines/Layer/setHomeScreenFromScreenName" arguments: (Handle or Path) "Abcd" 

      // Returns the name of the current home screen.
      string getHomeScreenName()
       => "/Pixera/Timelines/Layer/getHomeScreenName" arguments: (Handle or Path) 

      // Set the blend mode of the layer by name.
      null setBlendMode(string blendMode)
       => "/Pixera/Timelines/Layer/setBlendMode" arguments: (Handle or Path) "Abcd" 

      // Get the blend mode of the fayer.
      string getBlendMode()
       => "/Pixera/Timelines/Layer/getBlendMode" arguments: (Handle or Path) 

      // Add effect by resource id.
      // Use Pixera.Resources.Resource.getInst(resourcePath).getId() to get resource id.
      null addEffectById(double id)
       => "/Pixera/Timelines/Layer/addEffectById" arguments: (Handle or Path) 1.0 

      // Sets the 'preload permanently' status of the layer.
      null setPreloadPermanently(boolean doPreloadPermanently)
       => "/Pixera/Timelines/Layer/setPreloadPermanently" arguments: (Handle or Path) true 

      // Returns the 'preload permanently' status of the layer.
      boolean getPreloadPermanently()
       => "/Pixera/Timelines/Layer/getPreloadPermanently" arguments: (Handle or Path) 

      // Sets the restrict to specific services state and the list of IPs of the services.
      null setRestrictToServiceWithIps(boolean doRestrict,string[] ipAdresses)
       => "/Pixera/Timelines/Layer/setRestrictToServiceWithIps" arguments: (Handle or Path) true ["Efgh", ...] 

      // Returns the restrict to service state.
      boolean getRestrictToService()
       => "/Pixera/Timelines/Layer/getRestrictToService" arguments: (Handle or Path) 

      // Returns the list of restricted service IPs in a comma separated string.
      string[] getRestrictedServiceIps()
       => "/Pixera/Timelines/Layer/getRestrictedServiceIps" arguments: (Handle or Path) 

      // Get offsets.
      double[] getOffsets()
       => "/Pixera/Timelines/Layer/getOffsets" arguments: (Handle or Path) 

      // Set offsets.
      null setOffsets(optional<double> x,optional<double> y,optional<double> z,optional<double> xr,optional<double> yr,optional<double> zr,optional<double> xScale,optional<double> yScale,optional<double> zScale)
       => "/Pixera/Timelines/Layer/setOffsets" arguments: (Handle or Path) val val val val val val val val val 

      // Sets the current dominant value or clip value to offset by typeindex
      // resetDominant and removeKeyframesClips are optional and false on default
      // typeIndex 0 = position,
      // typeIndex 1 = rotation,
      // typeIndex 2 = scale
      null setCurrentValuesToOffset(int typeIndex,optional<bool> resetDominant,optional<bool> removeKeyframesClips)
       => "/Pixera/Timelines/Layer/setCurrentValuesToOffset" arguments: (Handle or Path) 1 val val 

      // Set the render order of the layer. index 0 = top
      // to send the layer to the last you can use -1 as index
      null setRenderOrder(int index)
       => "/Pixera/Timelines/Layer/setRenderOrder" arguments: (Handle or Path) 1 
      int getRenderOrder()
       => "/Pixera/Timelines/Layer/getRenderOrder" arguments: (Handle or Path) 
   handle getInst(string instancePath)
    => "/Pixera/Timelines/Layer/getInst" arguments: "Abcd" 
   handle getHandleFromInstancePath(string instancePath)
    => "/Pixera/Timelines/Layer/getHandleFromInstancePath" arguments: "Abcd" 
      string getInstancePath()
       => "/Pixera/Timelines/Layer/getInstancePath" arguments: (Handle or Path) 
      null executeJavaScriptOnCurrentWebResource(string script)
       => "/Pixera/Timelines/Layer/executeJavaScriptOnCurrentWebResource" arguments: (Handle or Path) "Abcd" 
   }

   class Clip
   {
      // Returns an id based on the handle. This is currently necessary in some situations
      // because some API implementations can not yet consume handles as parameters. 
      double getId()
       => "/Pixera/Timelines/Clip/getId" arguments: (Handle or Path) 

      // Removes the clip.
      null removeThis()
       => "/Pixera/Timelines/Clip/removeThis" arguments: (Handle or Path) 

      // Returns a handle to the timeline in which the clip is situated.
      handle getTimeline()
       => "/Pixera/Timelines/Clip/getTimeline" arguments: (Handle or Path) 
      null setTime(double time)
       => "/Pixera/Timelines/Clip/setTime" arguments: (Handle or Path) 1.0 
      double getTime()
       => "/Pixera/Timelines/Clip/getTime" arguments: (Handle or Path) 
      null setDuration(double duration)
       => "/Pixera/Timelines/Clip/setDuration" arguments: (Handle or Path) 1.0 
      double getDuration()
       => "/Pixera/Timelines/Clip/getDuration" arguments: (Handle or Path) 
      null setLabel(string label)
       => "/Pixera/Timelines/Clip/setLabel" arguments: (Handle or Path) "Abcd" 
      string getLabel()
       => "/Pixera/Timelines/Clip/getLabel" arguments: (Handle or Path) 

      // Play modes:
      // 1: Lock to time
      // 2: Play once
      // 3: Loop
      // 4: Pause at endpoint
      // 5: Lock to time no loop
      int getPlayMode()
       => "/Pixera/Timelines/Clip/getPlayMode" arguments: (Handle or Path) 
      null setPlayMode(int playMode)
       => "/Pixera/Timelines/Clip/setPlayMode" arguments: (Handle or Path) 1 

      // Get the speed 
      double getSpeed()
       => "/Pixera/Timelines/Clip/getSpeed" arguments: (Handle or Path) 
      null setSpeed(double speed)
       => "/Pixera/Timelines/Clip/setSpeed" arguments: (Handle or Path) 1.0 

      // Get if frameblending is on or off
      boolean getBlendFrames()
       => "/Pixera/Timelines/Clip/getBlendFrames" arguments: (Handle or Path) 
      null setBlendFrames(boolean doFrameblending)
       => "/Pixera/Timelines/Clip/setBlendFrames" arguments: (Handle or Path) true 

      // Get the inpoint of clip
      double getInpoint()
       => "/Pixera/Timelines/Clip/getInpoint" arguments: (Handle or Path) 
      null setInpoint(double inpoint)
       => "/Pixera/Timelines/Clip/setInpoint" arguments: (Handle or Path) 1.0 

      // Get the outpoint of clip
      double getOutpoint()
       => "/Pixera/Timelines/Clip/getOutpoint" arguments: (Handle or Path) 
      null setOutpoint(double inpoint)
       => "/Pixera/Timelines/Clip/setOutpoint" arguments: (Handle or Path) 1.0 

      // Assigns a resource to the resource parameter within the clip.
      // Conceptually, the resId is a handle but the handle can not be passed directly for
      // some implementations of the API. Therefore, Resource.getId() should be used to
      // fill this parameter.
      // setToResourceDuration is optional and true if not set
      null assignResource(double resId,optional<bool> setToResourceDuration)
       => "/Pixera/Timelines/Clip/assignResource" arguments: (Handle or Path) 1.0 val 

      // Assigns a resource to the resource parameter within the clip.
      // Conceptually, the resId is a handle but the handle can not be passed directly for
      // some implementations of the API. Therefore, Resource.getId() should be used to
      // fill this parameter.
      handle getAssignedResource()
       => "/Pixera/Timelines/Clip/getAssignedResource" arguments: (Handle or Path) 

      // Returns the name of the resource assigned to the clip.
      // If no resource is assigned an empty string is returned.
      string getAssignedResourceName()
       => "/Pixera/Timelines/Clip/getAssignedResourceName" arguments: (Handle or Path) 
      null setToResourceDuration()
       => "/Pixera/Timelines/Clip/setToResourceDuration" arguments: (Handle or Path) 
      null setText(string text)
       => "/Pixera/Timelines/Clip/setText" arguments: (Handle or Path) "Abcd" 
      string getText()
       => "/Pixera/Timelines/Clip/getText" arguments: (Handle or Path) 

      // Creates a key at the given time with the given value in the clip parameter specified by
      // namePath, with the parts of namePath consisting of the strings shown in the timeline UI.
      // E.g. "Position/x" refers to the parameter responsible for the x position of the layer.
      // The name of this method may be changed in future versions of the API to reflect the 
      // "key" (instead of "event") terminology.
      null createEvent(string namePath,double time,double value)
       => "/Pixera/Timelines/Clip/createEvent" arguments: (Handle or Path) "Abcd" 1.0 1.0 

      // Creates a key at the given time with the given value in the clip parameter specified by
      // namePath, with the parts of namePath consisting of the strings shown in the timeline UI.
      // E.g. "Position/x" refers to the parameter responsible for the x position of the layer.
      // The name of this method may be changed in future versions of the API to reflect the 
      // "key" (instead of "event") terminology.
      null createEventInPixelSpace(string namePath,double time,double value)
       => "/Pixera/Timelines/Clip/createEventInPixelSpace" arguments: (Handle or Path) "Abcd" 1.0 1.0 

      // Remove a key at the given time with the given by namePath,
      // with the parts of namePath consisting of the strings shown in the timeline UI.
      // E.g. "Position/x" refers to the parameter responsible for the x position of the layer.
      // The name of this method may be changed in future versions of the API to reflect the 
      // "key" (instead of "event") terminology.
      null removeEvent(string namePath,double time)
       => "/Pixera/Timelines/Clip/removeEvent" arguments: (Handle or Path) "Abcd" 1.0 

      // Creates a Cue Before Clip
      handle createPauseCueBeforeClip()
       => "/Pixera/Timelines/Clip/createPauseCueBeforeClip" arguments: (Handle or Path) 

      //set look up table
      null setColorTransformPath(string colorTransformPath)
       => "/Pixera/Timelines/Clip/setColorTransformPath" arguments: (Handle or Path) "Abcd" 

      //get look up table
      string getColorTransformPath()
       => "/Pixera/Timelines/Clip/getColorTransformPath" arguments: (Handle or Path) 

      //clear look up table
      null clearColorTransformPath()
       => "/Pixera/Timelines/Clip/clearColorTransformPath" arguments: (Handle or Path) 

      //return all keyframes with time and value of this clip as json string
      string getKeyframesAsJsonString()
       => "/Pixera/Timelines/Clip/getKeyframesAsJsonString" arguments: (Handle or Path) 
   }


   // Returns a handle for the node specified by id after checking that a node with the id exists.
   // Conceptually, the id and the handle are the same but some implementations of the API can not
   // yet consume handles as parameters, making it necessary to translate between the two occasionally.
   handle getNodeFromId(double id)
    => "/Pixera/Timelines/getNodeFromId" arguments: 1.0 
   handle getInst(string instancePath)
    => "/Pixera/Timelines/getInst" arguments: "Abcd" 
   string getInstancePath(handle apEntityThisHandle)
    => "/Pixera/Timelines/getInstancePath" arguments: 123456789 

   class Node
   {
      handle[] getParameters()
       => "/Pixera/Timelines/Node/getParameters" arguments: (Handle or Path) 
      string getName()
       => "/Pixera/Timelines/Node/getName" arguments: (Handle or Path) 

      // Returns a handle to a parameter node child with the given name. E.g. if the current
      // node is the "Position" folder then the name "x" would return the parameter node
      // representing the x position of the layer.
      handle getParamWithName(string name)
       => "/Pixera/Timelines/Node/getParamWithName" arguments: (Handle or Path) "Abcd" 

      // Sets the values of the children of the node in the order that they are displayed
      // in the timeline. This allows e.g. setting the x, y, and z values of a node with
      // one invocation.
      null setValues(double[] values)
       => "/Pixera/Timelines/Node/setValues" arguments: (Handle or Path) [1.0, ...] 

      // Returns the values of the children of the node in the order that they are displayed
      // in the timeline. This allows e.g. setting the x, y, and z values of a node with
      // one invocation.
      double[] getValues()
       => "/Pixera/Timelines/Node/getValues" arguments: (Handle or Path) 

      // Resets the dominant values of the children of the node in the timeline.
      null resetValues()
       => "/Pixera/Timelines/Node/resetValues" arguments: (Handle or Path) 

      // Stores all node values in the Timeline.
      null storeValues()
       => "/Pixera/Timelines/Node/storeValues" arguments: (Handle or Path) 
      null mute()
       => "/Pixera/Timelines/Node/mute" arguments: (Handle or Path) 
      null unMute()
       => "/Pixera/Timelines/Node/unMute" arguments: (Handle or Path) 
      null toggleMute()
       => "/Pixera/Timelines/Node/toggleMute" arguments: (Handle or Path) 
      boolean getIsMuted()
       => "/Pixera/Timelines/Node/getIsMuted" arguments: (Handle or Path) 

      // Returns a handle to the timeline that holds the node.
      handle getTimeline()
       => "/Pixera/Timelines/Node/getTimeline" arguments: (Handle or Path) 
   handle getInst(string instancePath)
    => "/Pixera/Timelines/Node/getInst" arguments: "Abcd" 
   handle getHandleFromInstancePath(string instancePath)
    => "/Pixera/Timelines/Node/getHandleFromInstancePath" arguments: "Abcd" 
      string getInstancePath()
       => "/Pixera/Timelines/Node/getInstancePath" arguments: (Handle or Path) 
   }

   // Attributes of the transport parameter's state (see
   // Param.setTransportAttributes()).
   struct TransportAttributes
   {
      int mode;
      double speed;
      boolean loop;
      double inpoint;
      double outpoint;
   }

   class Param
   {
      string getName()
       => "/Pixera/Timelines/Param/getName" arguments: (Handle or Path) 
      boolean getIsChannel()
       => "/Pixera/Timelines/Param/getIsChannel" arguments: (Handle or Path) 

      //set parameter value. can be double or string
      null setValue(timelineParamValue value,optional<int> fadeTimeMs)
       => "/Pixera/Timelines/Param/setValue" arguments: (Handle or Path) 1.0 or "Abcd" val 
      null setValueRelativ(double value,optional<int> fadeTimeMs)
       => "/Pixera/Timelines/Param/setValueRelativ" arguments: (Handle or Path) 1.0 val 

      //return can be double or string
      timelineParamValue getValue()
       => "/Pixera/Timelines/Param/getValue" arguments: (Handle or Path) 
      null resetValue()
       => "/Pixera/Timelines/Param/resetValue" arguments: (Handle or Path) 

      // Store parameter value in the Timeline.
      null storeValue()
       => "/Pixera/Timelines/Param/storeValue" arguments: (Handle or Path) 

      // Store parameter value in the Timeline and remove other keys.
      null storeValueAndRemoveOther()
       => "/Pixera/Timelines/Param/storeValueAndRemoveOther" arguments: (Handle or Path) 

      // Sets the transport state. Only effective for the "Transport" parameter of each layer.
      // Mode is as defined for Timelines.Timeline.setTransportMode().
      // inpoint and outpoint are in frames. Inpoint of zero is ignored at pause. Outpoint of zero is always ignored.
      null setTransportAttributes(int mode,double speed,boolean loop,int inpoint,int outpoint)
       => "/Pixera/Timelines/Param/setTransportAttributes" arguments: (Handle or Path) 1 1.0 true 1 1 

      // Returns the attributes of the current transport state.
      null getAttributes()
       => "/Pixera/Timelines/Param/getAttributes" arguments: (Handle or Path) 
      null mute()
       => "/Pixera/Timelines/Param/mute" arguments: (Handle or Path) 
      null unMute()
       => "/Pixera/Timelines/Param/unMute" arguments: (Handle or Path) 
      null toggleMute()
       => "/Pixera/Timelines/Param/toggleMute" arguments: (Handle or Path) 
      boolean getIsMuted()
       => "/Pixera/Timelines/Param/getIsMuted" arguments: (Handle or Path) 
   handle getInst(string instancePath)
    => "/Pixera/Timelines/Param/getInst" arguments: "Abcd" 
   handle getHandleFromInstancePath(string instancePath)
    => "/Pixera/Timelines/Param/getHandleFromInstancePath" arguments: "Abcd" 
      string getInstancePath()
       => "/Pixera/Timelines/Param/getInstancePath" arguments: (Handle or Path) 
   }

   // Struct delivered by Cue.getCueAttributes.
   // The members are the same as the return values of the corresponding accessor methods.
   struct CueAttributes
   {
      int index;
      string name;
      int operation;
      int jumpMode;
      double jumpGoalTime;
      string jumpGoalLabel;
      handle jumpGoalCue;
      int number;
      double waitDuration;
      string note;
   }

   class Cue
   {
      // Removes cue.
      null removeThis()
       => "/Pixera/Timelines/Cue/removeThis" arguments: (Handle or Path) 

      // Jumps to and executes the cue.
      // blendDuration: optional parameter to set blend duration in seconds.
      null apply(optional<double> blendDuration)
       => "/Pixera/Timelines/Cue/apply" arguments: (Handle or Path) val 

      // Blends to and executes the cue. Deprecated method. Use apply().
      // blendDuration: blend duration in seconds.
      null blendToThis(double blendDuration)
       => "/Pixera/Timelines/Cue/blendToThis" arguments: (Handle or Path) 1.0 

      // Returns the attributes of the cue (see CueAttributes struct).
      null getAttributes()
       => "/Pixera/Timelines/Cue/getAttributes" arguments: (Handle or Path) 

      // Returns a handle to the timeline in which the cue is situated.
      handle getTimeline()
       => "/Pixera/Timelines/Cue/getTimeline" arguments: (Handle or Path) 

      // Returns the time-ordered index of the cue in the timeline (-1 if the cue is not found).
      int getIndex()
       => "/Pixera/Timelines/Cue/getIndex" arguments: (Handle or Path) 

      // Returns the name of the cue.
      string getName()
       => "/Pixera/Timelines/Cue/getName" arguments: (Handle or Path) 

      // Sets the name of the cue.
      boolean setName(string name)
       => "/Pixera/Timelines/Cue/setName" arguments: (Handle or Path) "Abcd" 

      // Returns the info of the cue.
      string getNote()
       => "/Pixera/Timelines/Cue/getNote" arguments: (Handle or Path) 

      // Sets the info of the cue.
      boolean setNote(string note)
       => "/Pixera/Timelines/Cue/setNote" arguments: (Handle or Path) "Abcd" 

      // Returns the operation mode of the cue.
      // 1: Play
      // 2: Pause
      // 3: Stop
      // 4: Jump
      int getOperation()
       => "/Pixera/Timelines/Cue/getOperation" arguments: (Handle or Path) 

      // Sets the operation mode for the cue.
      // 1: Play
      // 2: Pause
      // 3: Stop
      // 4: Jump
      boolean setOperation(int operation)
       => "/Pixera/Timelines/Cue/setOperation" arguments: (Handle or Path) 1 

      // Returns the jump mode of the cue.
      // 0: None
      // 1: To time
      // 2: To cue
      int getJumpMode()
       => "/Pixera/Timelines/Cue/getJumpMode" arguments: (Handle or Path) 

      // Sets the jump mode of the cue with given handle (this only affects the cue
      // if it has its operation set to "jump").
      // 0: None
      // 1: To time
      // 2: To cue
      boolean setJumpMode(int jumpMode)
       => "/Pixera/Timelines/Cue/setJumpMode" arguments: (Handle or Path) 1 

      // Returns the time in frames of the jump goal of the cue.
      double getJumpGoalTime()
       => "/Pixera/Timelines/Cue/getJumpGoalTime" arguments: (Handle or Path) 

      // Sets the time the timline should jump to if the cue is reached.
      // This only affects the cue if it's set to jumpToTime.
      boolean setJumpGoalTime(double time)
       => "/Pixera/Timelines/Cue/setJumpGoalTime" arguments: (Handle or Path) 1.0 

      // Returns the name of the cue the timeline should jump to if the cue is reached.
      string getJumpGoalLabel()
       => "/Pixera/Timelines/Cue/getJumpGoalLabel" arguments: (Handle or Path) 

      // Returns the handle of the cue the timeline should jump to if the cue is reached.
      handle getJumpGoalCue()
       => "/Pixera/Timelines/Cue/getJumpGoalCue" arguments: (Handle or Path) 

      // Sets the name of the cue to which the timeline should jump if the cue is reached.
      // This only affects the cue if it's set to jumpToLabel.
      boolean setJumpGoalLabel(string jumpGoalLabel)
       => "/Pixera/Timelines/Cue/setJumpGoalLabel" arguments: (Handle or Path) "Abcd" 

      // Returns the number of the cue.
      int getNumber()
       => "/Pixera/Timelines/Cue/getNumber" arguments: (Handle or Path) 

      // Sets the number of the cue.
      null setNumber(int number)
       => "/Pixera/Timelines/Cue/setNumber" arguments: (Handle or Path) 1 

      // Returns the time in frames that the cue will cause the timeline to wait when
      // it is reached before the cue is applied.
      double getWaitDuration()
       => "/Pixera/Timelines/Cue/getWaitDuration" arguments: (Handle or Path) 

      // Sets the time in frames that the cue will cause the timeline to wait when
      // it is reached before the cue is applied.
      boolean setWaitDuration(double time)
       => "/Pixera/Timelines/Cue/setWaitDuration" arguments: (Handle or Path) 1.0 

      // Returns the time in frames, the blending between this cue and its jump target takes.
      double getBlendDuration()
       => "/Pixera/Timelines/Cue/getBlendDuration" arguments: (Handle or Path) 

      // Sets the blend duration of a cue.
      // Time in Frames
      boolean setBlendDuration(double timeInFrames)
       => "/Pixera/Timelines/Cue/setBlendDuration" arguments: (Handle or Path) 1.0 

      // Returns the time in frames for the cue.
      double getTime()
       => "/Pixera/Timelines/Cue/getTime" arguments: (Handle or Path) 

      // Sets the time of the cue.
      // The unit of the parameter 'time' is frames.
      boolean setTime(double time)
       => "/Pixera/Timelines/Cue/setTime" arguments: (Handle or Path) 1.0 

      // Returns the name of the timeline that is triggered by this cue. An empty string is returned
      // when no timeline is triggered.
      string getTimelineToTriggerName()
       => "/Pixera/Timelines/Cue/getTimelineToTriggerName" arguments: (Handle or Path) 

      // Sets the timeline that is triggered by this cue. Returns a boolean. A return value false means
      // that something went wrong and the cue is not changed.
      // When the string parameter 'nameTimeline' is empty, the cue property 'Timeline to Trigger' is cleared.
      // I.e. the cue will not trigger any timeline.
      boolean setTimelineToTrigger(string nameTimeline)
       => "/Pixera/Timelines/Cue/setTimelineToTrigger" arguments: (Handle or Path) "Abcd" 

      // Returns the applied playback time mode of the timeline that is triggered by this cue.
      // The return value corresponds to: Current Time = 1, Time = 2, Cue = 3.
      // 0 is returned when no timeline is triggered. 
      int getTimelineToTriggerMode()
       => "/Pixera/Timelines/Cue/getTimelineToTriggerMode" arguments: (Handle or Path) 

      // Sets the applied playback time mode of the timeline that is triggered by this cue. A return value false means
      // that something went wrong and the cue is not changed.
      // Mode Parameter: Current Time = 1, Time = 2, Cue = 3.
      boolean setTimelineToTriggerTimeMode(int mode)
       => "/Pixera/Timelines/Cue/setTimelineToTriggerTimeMode" arguments: (Handle or Path) 1 

      // Returns the applied playback mode of the timeline that is triggered by this cue.
      // The return value corresponds to: Play = 1, Pause = 2, Stop = 3.
      // 0 is returned when no timeline is triggered. 
      int getTimelineTriggerMode()
       => "/Pixera/Timelines/Cue/getTimelineTriggerMode" arguments: (Handle or Path) 

      // Sets the applied playback mode of the timeline that is triggered by this cue. A return value false means
      // that something went wrong and the cue is not changed.
      // Mode Parameter: Play = 1, Pause = 2, Stop = 3.
      boolean setTimelineTriggerMode(int mode)
       => "/Pixera/Timelines/Cue/setTimelineTriggerMode" arguments: (Handle or Path) 1 

      // Returns the applied time of the timeline that is triggered by this cue in frames.
      // -1 is returned when no timeline is triggered or no time is applied. 
      double getTimelineTriggerApplyTime()
       => "/Pixera/Timelines/Cue/getTimelineTriggerApplyTime" arguments: (Handle or Path) 

      // Sets the applied time of the timeline that is triggered by this cue. A return value false means
      // that something went wrong and the cue is not changed.
      // The unit of the parameter 'time' is frames. The trigger time mode of this cue is set to 'Time'.
      // However, a value < 0. means that the apply time is resetted. I.e. no
      // time will be applied and the time mode of the cue is set to 'Current Time'.
      boolean setTimelineTriggerApplyTime(double time)
       => "/Pixera/Timelines/Cue/setTimelineTriggerApplyTime" arguments: (Handle or Path) 1.0 

      // Sets the apply cue of the timeline that is triggered by this cue. A return value false means
      // that something went wrong and the cue is not changed.
      // The trigger time mode of this cue is automatically set to 'Cue'.
      boolean setTimelineTriggerApplyCue(string goalCueLabel)
       => "/Pixera/Timelines/Cue/setTimelineTriggerApplyCue" arguments: (Handle or Path) "Abcd" 

      // Returns whether the cue will be applied when the nowpointer passes it.
      boolean isActive()
       => "/Pixera/Timelines/Cue/isActive" arguments: (Handle or Path) 

      // Sets the acitvity state for the cue.
      // idState: 'Active' = 1, 'Ignore' = 2, 'Ignore Once' = 3
      null setActivity(int idState)
       => "/Pixera/Timelines/Cue/setActivity" arguments: (Handle or Path) 1 

      // Returns the countdown time to this cue in frames.
      // Returns zero when this cue was already passed.
      double getCountdown()
       => "/Pixera/Timelines/Cue/getCountdown" arguments: (Handle or Path) 

      // Returns the countdown time to this cue as a hours, minutes, seconds, frames string.
      // Returns zero string when this cue was already passed.
      string getCountdownHMSF()
       => "/Pixera/Timelines/Cue/getCountdownHMSF" arguments: (Handle or Path) 

      // Sets the "Network Command" information for the cue. conveyorName must be one of the entries in the "API Output" dropdown of the cue inspector.
      // commandData is the string to be executed.
      null setCommand(string conveyorName,string commandData)
       => "/Pixera/Timelines/Cue/setCommand" arguments: (Handle or Path) "Abcd" "Abcd" 

      //setColor
      null setColor(int red,int green,int blue)
       => "/Pixera/Timelines/Cue/setColor" arguments: (Handle or Path) 1 1 1 

      //getColor
      int[] getColor()
       => "/Pixera/Timelines/Cue/getColor" arguments: (Handle or Path) 
   handle getInst(string instancePath)
    => "/Pixera/Timelines/Cue/getInst" arguments: "Abcd" 
   handle getHandleFromInstancePath(string instancePath)
    => "/Pixera/Timelines/Cue/getHandleFromInstancePath" arguments: "Abcd" 
      string getInstancePath()
       => "/Pixera/Timelines/Cue/getInstancePath" arguments: (Handle or Path) 
   }
}

namespace Calibration
{
   // Sets the marker positions for projector calibration with external data.
   // Positions must contain the marker coordinates in world space in consecutive order 
   // like this: x1, y1, z1, x2, y2, z2, x3, y3, z3, ...
   // markerIds must contain a unique integer id for each marker in the same order as 
   // the marker positions. The markerIds matching the coordinates example are 1,2,3.
   null setMarkerPositions(double[] positions,int[] markerIds)
    => "/Pixera/Calibration/setMarkerPositions" arguments: [1.0, ...] [1, ...] 
}

namespace WebViews
{
   null loadDeviceUi(string devicePath)
    => "/Pixera/WebViews/loadDeviceUi" arguments: "Abcd" 
   null activatePreviousFunc()
    => "/Pixera/WebViews/activatePreviousFunc"
   null activateNextFunc()
    => "/Pixera/WebViews/activateNextFunc"
   string getLastActivatedFunc()
    => "/Pixera/WebViews/getLastActivatedFunc"
   null deviceActivated(string devicePath,boolean withSelection)
    => "/Pixera/WebViews/deviceActivated" arguments: "Abcd" true 
   null funcActivated(string funcPath,boolean withSelection)
    => "/Pixera/WebViews/funcActivated" arguments: "Abcd" true 
   null setFuncBodyState(string funcPath,string state)
    => "/Pixera/WebViews/setFuncBodyState" arguments: "Abcd" "Abcd" 
   string getFuncBodyState(string funcPath)
    => "/Pixera/WebViews/getFuncBodyState" arguments: "Abcd" 
   null setTag(string tag,string text)
    => "/Pixera/WebViews/setTag" arguments: "Abcd" "Abcd" 
   null setEditorIsUsingBlocks(boolean useBlocks)
    => "/Pixera/WebViews/setEditorIsUsingBlocks" arguments: true 
}

// Ui namespace is only accessible from plugins hosted in Pixera, i.e. it is
// not relevant to external API access.
namespace Ui
{
namespace Control
{
   //set current control page
   null setControlPage(string pageName)
    => "/Pixera/Ui/Control/setControlPage" arguments: "Abcd" 

   //get control pages
   string[] getControlPages()
    => "/Pixera/Ui/Control/getControlPages"

   //get current control page
   string getCurrentControlPage()
    => "/Pixera/Ui/Control/getCurrentControlPage"
}

namespace PreviewCamera
{
   //select the preview camera for the preview. first starts at 0
   null selectPreviewCameraByIndex(int index)
    => "/Pixera/Ui/PreviewCamera/selectPreviewCameraByIndex" arguments: 1 

   //select the preview camera by name
   null selectPreviewCameraByName(string name)
    => "/Pixera/Ui/PreviewCamera/selectPreviewCameraByName" arguments: "Abcd" 
   string[] getPreviewCameraNames()
    => "/Pixera/Ui/PreviewCamera/getPreviewCameraNames"
}

   null lockUi(string password)
    => "/Pixera/Ui/lockUi" arguments: "Abcd" 
   null unlockUi(string password)
    => "/Pixera/Ui/unlockUi" arguments: "Abcd" 
   null toggleLockUi(string password)
    => "/Pixera/Ui/toggleLockUi" arguments: "Abcd" 
   handle getComboBoxWithId(double id)
    => "/Pixera/Ui/getComboBoxWithId" arguments: 1.0 

   // Set the current AppMode
   // 1 = Screens
   // 2 = Mapping
   // 3 = Compositing
   // 4 = Compositing Inside
   // 5 = Settings
   // 6 = Mapping Screens Feedarea
   // 7 = Control
   null setAppMode(int mode)
    => "/Pixera/Ui/setAppMode" arguments: 1 

   // Get the current AppMode
   int getAppMode()
    => "/Pixera/Ui/getAppMode"

   // Get display Testpattern
   boolean getDisplayTestpattern()
    => "/Pixera/Ui/getDisplayTestpattern"

   // Get display Testpattern
   null setDisplayTestpattern(boolean display)
    => "/Pixera/Ui/setDisplayTestpattern" arguments: true 

   //toggle the output freeze
   null toggleOutputFreeze()
    => "/Pixera/Ui/toggleOutputFreeze"

   // Get the current AppMode
   string getPreviewCameraAsJsonString()
    => "/Pixera/Ui/getPreviewCameraAsJsonString"
   null setPreviewCameraAsJsonString(string cameraFrustrumStateString)
    => "/Pixera/Ui/setPreviewCameraAsJsonString" arguments: "Abcd" 
   null setDisableContentRendering(boolean state)
    => "/Pixera/Ui/setDisableContentRendering" arguments: true 
   boolean getIsContentRenderingDisabled()
    => "/Pixera/Ui/getIsContentRenderingDisabled"
   null setDisableWorkspaceRendering(boolean state)
    => "/Pixera/Ui/setDisableWorkspaceRendering" arguments: true 
   boolean getIsWorkspaceRenderingDisabled()
    => "/Pixera/Ui/getIsWorkspaceRenderingDisabled"

   class ComboBox
   {
      null clear()
       => "/Pixera/Ui/ComboBox/clear" arguments: (Handle or Path) 
      null addItem(string item,int id)
       => "/Pixera/Ui/ComboBox/addItem" arguments: (Handle or Path) "Abcd" 1 
      null setSelectedId(int id)
       => "/Pixera/Ui/ComboBox/setSelectedId" arguments: (Handle or Path) 1 
      int getSelectedId()
       => "/Pixera/Ui/ComboBox/getSelectedId" arguments: (Handle or Path) 
   }
}

namespace Direct
{
   // Sets all entities registered in the current thread. Entities that were previously
   // registered that are not in the handle array are removed.
   // usageHints is either empty or it contains one entry for each handle. Possible entries are:
   //    "screen"
   //    "perspective"
   //    "parameter"
   //    "studioCamera"
   null setRegistered(handle[] hdls,int expectedFrequency,int dampingMs,string[] usageHints)
    => "/Pixera/Direct/setRegistered" arguments: [123456789, ...] 1 1 ["Efgh", ...] 

   // Updates the representation of all registered entities.
   null reloadRegistered()
    => "/Pixera/Direct/reloadRegistered"

   // Register projector for use with the Direct API.
   handle registerProjector(string name,int expectedFrequency,int dampingMs)
    => "/Pixera/Direct/registerProjector" arguments: "Abcd" 1 1 

   class Projector
   {
      null setPosition(optional<double> xPos,optional<double> yPos,optional<double> zPos)
       => "/Pixera/Direct/Projector/setPosition" arguments: (Handle or Path) val val val 
      null setRotation(optional<double> xRot,optional<double> yRot,optional<double> zRot)
       => "/Pixera/Direct/Projector/setRotation" arguments: (Handle or Path) val val val 
      null setPosRot(optional<double> xPos,optional<double> yPos,optional<double> zPos,optional<double> xRot,optional<double> yRot,optional<double> zRot)
       => "/Pixera/Direct/Projector/setPosRot" arguments: (Handle or Path) val val val val val val 
   }


   // Register the screen for use with the Direct API.
   handle registerScreen(string name,int expectedFrequency,int dampingMs)
    => "/Pixera/Direct/registerScreen" arguments: "Abcd" 1 1 

   class Screen
   {
      // Sets the position in meters.
      null setPosition(optional<double> xPos,optional<double> yPos,optional<double> zPos)
       => "/Pixera/Direct/Screen/setPosition" arguments: (Handle or Path) val val val 

      // Sets the rotation in degrees.
      null setRotation(optional<double> xRot,optional<double> yRot,optional<double> zRot)
       => "/Pixera/Direct/Screen/setRotation" arguments: (Handle or Path) val val val 

      // Sets position and rotation in one API call.
      null setPosRot(optional<double> xPos,optional<double> yPos,optional<double> zPos,optional<double> xRot,optional<double> yRot,optional<double> zRot)
       => "/Pixera/Direct/Screen/setPosRot" arguments: (Handle or Path) val val val val val val 

      // Sets position, rotation and the perspective position for the first screen group in one API call.
      null setPosRotAndPerspectivePos(optional<double> xPos,optional<double> yPos,optional<double> zPos,optional<double> xRot,optional<double> yRot,optional<double> zRot,optional<double> perspXPos,optional<double> perspYPos,optional<double> perspZPos)
       => "/Pixera/Direct/Screen/setPosRotAndPerspectivePos" arguments: (Handle or Path) val val val val val val val val val 

      // Sets position, rotation and scale in one API call.
      null setPosRotScale(optional<double> xPos,optional<double> yPos,optional<double> zPos,optional<double> xRot,optional<double> yRot,optional<double> zRot,optional<double> xScale,optional<double> yScale,optional<double> zScale)
       => "/Pixera/Direct/Screen/setPosRotScale" arguments: (Handle or Path) val val val val val val val val val 

      // Enables time logging for the screen. Every 10 seconds values are printed to the pixera log
      // showing the number of messages and the minimum and maximum time between two messages for every second.
      null enableLogging(boolean enable)
       => "/Pixera/Direct/Screen/enableLogging" arguments: (Handle or Path) true 
   }


   // Register the parameter for use with the Direct API. At the time when this function is executed
   // the layer should already have been displayed at least once. Otherwise the relevant underlying
   // attributes may not have been initialized yet and can not be cached.
   // The instance path traces the name hierarchy in the timeline tree. E.g. "Timeline 1.Position.x".
   handle registerParam(string instancePath)
    => "/Pixera/Direct/registerParam" arguments: "Abcd" 

   class Param
   {
      // Sets the param value. Note that this will bypass conversions and offsets determined by the GUI. 
      // E.g. layer-level offsets will not be taken into account and neither will resource-dependent scaling.
      null setValue(double value)
       => "/Pixera/Direct/Param/setValue" arguments: (Handle or Path) 1.0 

      // Enables time logging for the param. Every 10 seconds values are printed to the pixera log
      // showing the number of messages and the minimum and maximum time between two messages for every second.
      null enableLogging(boolean enable)
       => "/Pixera/Direct/Param/enableLogging" arguments: (Handle or Path) true 
   }


   // Register the camera with the screen group name for use with the Direct API.
   handle registerCamera(string cameraName,int expectedFrequency)
    => "/Pixera/Direct/registerCamera" arguments: "Abcd" 1 

   class Camera
   {
      // Sets the position in meters.
      null setPosition(double xPos,double yPos,double zPos)
       => "/Pixera/Direct/Camera/setPosition" arguments: (Handle or Path) 1.0 1.0 1.0 

      // Sets the euler rotation in degrees.
      null setRotation(double xRot,double yRot,double zRot)
       => "/Pixera/Direct/Camera/setRotation" arguments: (Handle or Path) 1.0 1.0 1.0 

      // Sets the rotation in quaternions.
      null setRotationQuat(double xQuat,double yQuat,double zQuat,double wQuat)
       => "/Pixera/Direct/Camera/setRotationQuat" arguments: (Handle or Path) 1.0 1.0 1.0 1.0 

      // Sets the position in meters, rotation and fov in degrees.
      null setTransformation(double xPos,double yPos,double zPos,double xRot,double yRot,double zRot,double fov,double aspectRatio)
       => "/Pixera/Direct/Camera/setTransformation" arguments: (Handle or Path) 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 

      // Sets the position in meters, rotation in quaternions, fov in degrees.
      null setTransformationQuat(double xPos,double yPos,double zPos,double xQuat,double yQuat,double zQuat,double wQuat,double fov,double aspectRatio)
       => "/Pixera/Direct/Camera/setTransformationQuat" arguments: (Handle or Path) 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 

      // Sets the position in meters, rotation and fov in degrees, centerX, centerX and panelWidth in millimeters.
      null setTransformationAndLensProps(double xPos,double yPos,double zPos,double xRot,double yRot,double zRot,double fov,double aspectRatio,double nearClip,double farClip,double aperture,double focus,double iris,double k1,double k2,double centerX,double centerY,double panelWidth)
       => "/Pixera/Direct/Camera/setTransformationAndLensProps" arguments: (Handle or Path) 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 

      // Sets the position in meters, rotation in quaternions, fov in degrees, centerX, centerX and panelWidth in millimeters.
      null setTransformationAndLensPropsQuat(double xPos,double yPos,double zPos,double xQuat,double yQuat,double zQuat,double wQuat,double fov,double aspectRatio,double nearClip,double farClip,double aperture,double focus,double iris,double k1,double k2,double centerX,double centerY,double panelWidth)
       => "/Pixera/Direct/Camera/setTransformationAndLensPropsQuat" arguments: (Handle or Path) 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 

      // Sets the position in meters, rotation and fov in degrees, centerX, centerX and panelWidth in millimeters.
      null setTransformationAndLensPropsExt(double xPos,double yPos,double zPos,double xRot,double yRot,double zRot,double fov,double aspectRatio,double nearClip,double farClip,double aperture,double focus,double focalDistance,double zoom,double iris,double k1,double k2,double k3,double p1,double p2,double centerX,double centerY,double panelWidth,double overscan,optional<double> focalLength,optional<double> focalLengthDistorted)
       => "/Pixera/Direct/Camera/setTransformationAndLensPropsExt" arguments: (Handle or Path) 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 val val 

      // Sets the position in meters, rotation in quaternions, fov in degrees, centerX, centerX and panelWidth in millimeters.
      null setTransformationAndLensPropsExtQuat(double xPos,double yPos,double zPos,double xQuat,double yQuat,double zQuat,double wQuat,double fov,double aspectRatio,double nearClip,double farClip,double aperture,double focus,double focalDistance,double zoom,double iris,double k1,double k2,double k3,double p1,double p2,double centerX,double centerY,double panelWidth,double overscan,optional<double> focalLength,optional<double> focalLengthDistorted)
       => "/Pixera/Direct/Camera/setTransformationAndLensPropsExtQuat" arguments: (Handle or Path) 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 val val 
   }


   // Register the perspective with the screen name for use with the Direct API.
   handle registerPerspective(string screenName,int expectedFrequency)
    => "/Pixera/Direct/registerPerspective" arguments: "Abcd" 1 

   class Perspective
   {
      // Sets the position in meters, rotation and fov in degrees.
      null setTransformation(double xPos,double yPos,double zPos,double xRot,double yRot,double zRot,double fov,double aspectRatio)
       => "/Pixera/Direct/Perspective/setTransformation" arguments: (Handle or Path) 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 

      // Sets the position in meters, rotation and fov in degrees.
      null setTransformationAndLensProps(double xPos,double yPos,double zPos,double xRot,double yRot,double zRot,double fov,double aspectRatio,double nearClip,double farClip,double aperture,double focus,double iris,double k1,double k2,double centerX,double centerY,double panelWidth)
       => "/Pixera/Direct/Perspective/setTransformationAndLensProps" arguments: (Handle or Path) 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 
   }
}

namespace Unreal
{
namespace Utility
{
   int getSupportedUnrealPluginVersion()
    => "/Pixera/Unreal/Utility/getSupportedUnrealPluginVersion"
}

namespace Network
{
}

}

}

