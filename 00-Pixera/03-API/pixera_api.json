{
 "name": "Pixera",
 "namespaces": [
  {
   "functions": [
    {
     "documentation": "Returns the current revision of the API.\r\nRelease versions have even revision numbers. Beta versions have odd revision numbers.\r\n",
     "name": "getApiRevision",
     "params": [],
     "returnValues": [
      {
       "name": "int",
       "type": "int"
      }
     ]
    },
    {
     "documentation": "Returns true if the function (or class method) is available.\r\nfunctionName must be the fully qualified name of the function or method,\r\ne.g. \"Pixera.Screens.Screen.setPosition\".\r\n",
     "name": "getHasFunction",
     "params": [
      {
       "name": "functionName",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "bool",
       "type": "bool"
      }
     ]
    },
    {
     "documentation": "Outputs a debug string into the Pixera log and returns the same string in\r\nthe reply.\r\n",
     "name": "outputDebug",
     "params": [
      {
       "name": "message",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "string",
       "type": "string"
      }
     ]
    },
    {
     "name": "getLicenseJson",
     "params": [],
     "returnValues": [
      {
       "name": "string",
       "type": "string"
      }
     ]
    },
    {
     "documentation": "Returns the number of milliseconds since midnight Jan 1st 1970 UTC.\r\n",
     "name": "getCurrentTime",
     "params": [],
     "returnValues": [
      {
       "name": "double",
       "type": "double"
      }
     ]
    },
    {
     "documentation": "Returns the current time as an ISO-8601 string (using the local timezone).\r\n",
     "name": "getCurrentTimeAsString",
     "params": [],
     "returnValues": [
      {
       "name": "string",
       "type": "string"
      }
     ]
    },
    {
     "documentation": "No operation. This function does nothing. It can be used in request/response scenarios\r\n(e.g. JSON-RPC) to bookend a set of API invocations. This gives the client a way\r\nto know that the last invocation in the set has been processed by Pixera.\r\n",
     "name": "noop",
     "params": [],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "documentation": "Experimental. Currently only relevant to Javascript interpretation within Pixera.\r\n",
     "name": "requestCallback",
     "params": [
      {
       "name": "functionName",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "name": "readFileString",
     "params": [
      {
       "name": "path",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "string",
       "type": "string"
      }
     ]
    },
    {
     "name": "writeFileString",
     "params": [
      {
       "name": "path",
       "type": "string"
      },
      {
       "name": "fileStr",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "name": "getAccessRecipe",
     "params": [
      {
       "name": "hdlPath",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "string",
       "type": "string"
      }
     ]
    },
    {
     "documentation": "See the documentation PDF for more information on monitoring.\r\nThe Javascript implementation does not support monitoring.\r\nIn the JSON implementation, the result of this function is a JSON object, not a string.\r\n",
     "name": "pollMonitoring",
     "params": [],
     "returnValues": [
      {
       "name": "string",
       "type": "string"
      }
     ]
    },
    {
     "name": "unsubscribeMonitoringSubject",
     "params": [
      {
       "name": "subject",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "bool",
       "type": "bool"
      }
     ]
    },
    {
     "name": "subscribeMonitoringSubject",
     "params": [
      {
       "name": "subject",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "bool",
       "type": "bool"
      }
     ]
    },
    {
     "name": "setMonitoringEventMode",
     "params": [
      {
       "name": "mode",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "bool",
       "type": "bool"
      }
     ]
    },
    {
     "documentation": "In the Control implementation this function is called when monitoring events are sent.\r\n",
     "name": "monitoringEvent",
     "params": [
      {
       "name": "eventDescription",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "documentation": "Only available in json implementation.\r\n",
     "name": "setShowContextInReplies",
     "params": [
      {
       "name": "doShow",
       "type": "bool"
      }
     ],
     "returnValues": [
      {
       "name": "bool",
       "type": "bool"
      }
     ]
    },
    {
     "name": "setMonitoringHasDelimiter",
     "params": [
      {
       "name": "hasDelimiter",
       "type": "bool"
      }
     ],
     "returnValues": [
      {
       "name": "bool",
       "type": "bool"
      }
     ]
    },
    {
     "documentation": "Runs the javascript function jsFunction with code jsCode.\r\n",
     "name": "runJsScript",
     "params": [
      {
       "name": "jsFunction",
       "type": "string"
      },
      {
       "name": "jsCode",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "string",
       "type": "string"
      }
     ]
    },
    {
     "name": "dynamicRebuildFromJsonDescription",
     "params": [
      {
       "name": "deviceName",
       "type": "string"
      },
      {
       "name": "jsonDescription",
       "type": "string"
      },
      {
       "name": "folder",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "name": "resetSelectiveRenderingFrameCounters",
     "params": [],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    }
   ],
   "name": "Utility"
  },
  {
   "classes": [
    {
     "methods": [
      {
       "name": "sendString",
       "params": [
        {
         "name": "str",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      }
     ],
     "name": "Conveyor"
    }
   ],
   "functions": [
    {
     "deliver": "Pixera.Network.Conveyor",
     "name": "getConveyor",
     "params": [
      {
       "name": "conveyorName",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "handle",
       "type": "handle"
      }
     ]
    }
   ],
   "name": "Network"
  },
  {
   "functions": [
    {
     "documentation": "Sets the transport mode of the timeline identified by its (zero-based) index\r\nin the timeline library of the Compositing tab.<br>\r\nMode Parameter: Play = 1, Pause = 2, Stop = 3.\r\n",
     "name": "setTransportModeOnTimelineAtIndex",
     "params": [
      {
       "name": "index",
       "type": "int"
      },
      {
       "name": "mode",
       "type": "int"
      }
     ],
     "returnValues": [
      {
       "name": "bool",
       "type": "bool"
      }
     ]
    },
    {
     "documentation": "Sets the transport mode of the timeline identified by its name.<br>\r\nMode Parameter: Play = 1, Pause = 2, Stop = 3.\r\n",
     "name": "setTransportModeOnTimeline",
     "params": [
      {
       "name": "timelineName",
       "type": "string"
      },
      {
       "name": "mode",
       "type": "int"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "documentation": "Toggles the timeline transport mode of timeline identified by its name.<br>\r\nMode toggles between Play and Pause.\r\n",
     "name": "toggleTransport",
     "params": [
      {
       "name": "timelineName",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "documentation": "Returns the current transport mode of the timeline identified by its name.<br>\r\nReturn values: Play = 1, Pause = 2, Stop = 3.\r\n",
     "name": "getTransportModeOnTimeline",
     "params": [
      {
       "name": "timelineName",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "int",
       "type": "int"
      }
     ]
    },
    {
     "documentation": "Sets the transport mode of the first timeline\r\nin the timeline library of the Compositing tab to Play.\r\n",
     "name": "startFirstTimeline",
     "params": [],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "documentation": "Sets the transport mode of the first timeline\r\nin the timeline library of the Compositing tab to Pause.\r\n",
     "name": "pauseFirstTimeline",
     "params": [],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "documentation": "Sets the transport mode of the first timeline\r\nin the timeline library of the Compositing tab to Stop.\r\n",
     "name": "stopFirstTimeline",
     "params": [],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "documentation": "Sets the opacity of the timeline identified by its name.<br>\r\ntimelineName: name of timeline<br>\r\nopacity: opacity value between 0.0 and 1.0\r\n",
     "name": "setOpacityOnTimeline",
     "params": [
      {
       "name": "timelineName",
       "type": "string"
      },
      {
       "name": "opacity",
       "type": "double"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "documentation": "Returns the opacity of the timeline identified by its name.\r\n",
     "name": "getOpacityOnTimeline",
     "params": [
      {
       "name": "timelineName",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "double",
       "type": "double"
      }
     ]
    },
    {
     "documentation": "Set the x position of the first layer of the first timeline.<br>\r\nPurely for demonstration, testing purposes.\r\n",
     "name": "setPosValue",
     "params": [
      {
       "name": "val",
       "type": "double"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "documentation": "Set the x/y position of the first layer of the first timeline.<br>\r\nPurely for demonstration, testing purposes.\r\n",
     "name": "setPosValueXY",
     "params": [
      {
       "name": "valX",
       "type": "double"
      },
      {
       "name": "valY",
       "type": "double"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "documentation": "Sets the current value of the parameter.\r\nThe parameter is identified by a path separated by periods (e.g. \"Timeline 1.Layer 1.Opacity\").\r\n",
     "name": "setParamValue",
     "params": [
      {
       "name": "path",
       "type": "string"
      },
      {
       "name": "value",
       "type": "double"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "documentation": "Jumps to and executes the cue at the (zero-based) index in the timeline at the (zero-based) index in\r\nthe timeline library of the Compositing tab.<br>\r\ncueIndex: zero-based index of cue<br>\r\ntimelineIndex: zero-based index of timeline in library<br>\r\nblendDuration: optional parameter to set blend duration in seconds.\r\n",
     "name": "applyCueAtIndexOnTimelineAtIndex",
     "params": [
      {
       "name": "cueIndex",
       "type": "int"
      },
      {
       "name": "timelineIndex",
       "type": "int"
      },
      {
       "name": "blendDuration",
       "type": "optional<double>"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "documentation": "Jumps to and executes the cue with the given number in the timeline at the (zero-based) index in\r\nthe timeline library of the Compositing tab.<br>\r\ncueNumber: number of cue<br>\r\ntimelineIndex: zero-based index of timeline in library<br>\r\nblendDuration: optional parameter to set blend duration in seconds.\r\n",
     "name": "applyCueNumberOnTimelineAtIndex",
     "params": [
      {
       "name": "cueNumber",
       "type": "int"
      },
      {
       "name": "timelineIndex",
       "type": "int"
      },
      {
       "name": "blendDuration",
       "type": "optional<double>"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "documentation": "Jumps to and executes the cue with the given number in the timeline with the given timelineName.<br>\r\ntimelineName: name of timeline<br>\r\ncueNumber: number of cue<br>\r\nblendDuration: optional parameter to set blend duration in seconds.\r\n",
     "name": "applyCueNumberOnTimeline",
     "params": [
      {
       "name": "timelineName",
       "type": "string"
      },
      {
       "name": "cueNumber",
       "type": "int"
      },
      {
       "name": "blendDuration",
       "type": "optional<double>"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "documentation": "Jumps to and executes the cue with given name in the timeline with the given timelineName.<br>\r\ntimelineName: name of timeline<br>\r\ncueName: name of cue<br>\r\nblendDuration: optional parameter to set blend duration in seconds.\r\n",
     "name": "applyCueOnTimeline",
     "params": [
      {
       "name": "timelineName",
       "type": "string"
      },
      {
       "name": "cueName",
       "type": "string"
      },
      {
       "name": "blendDuration",
       "type": "optional<double>"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "documentation": "Adds the file at the path to the folder with the given name path.\r\n",
     "name": "addResourceToFolder",
     "params": [
      {
       "name": "namePath",
       "type": "string"
      },
      {
       "name": "filePath",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "handle",
       "type": "handle"
      }
     ]
    },
    {
     "documentation": "Assigns a resource to a layer. The resource is identified by a path build from signatures and separated by forward slashes \r\n(e.g. \"Media/Folder/video.mov\"). The layer is identified by a path separated by periods (e.g. \"Timeline 1.Layer 1\").\r\n",
     "name": "assignResourceToLayer",
     "params": [
      {
       "name": "resourcePath",
       "type": "string"
      },
      {
       "name": "layerPath",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "documentation": "Refreshes a resource from file. The resource is identified by a path build from signatures and separated by forward slashes \r\n(e.g. \"Media/Folder/video.mov\").\r\n",
     "name": "refreshResource",
     "params": [
      {
       "name": "resourcePath",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "documentation": "Sets the transport mode of a layer: Play = 1, Pause = 2, Stop = 3.<br>\r\nThe layer is identified by a path separated by periods (e.g. \"Timeline 1.Layer 1\").\r\n",
     "name": "setTransportModeOnLayer",
     "params": [
      {
       "name": "layerPath",
       "type": "string"
      },
      {
       "name": "mode",
       "type": "int"
      },
      {
       "name": "loop",
       "type": "bool"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "documentation": "Returns the transport mode of a layer: Play = 1, Pause = 2, Stop = 3.<br>\r\nThe layer is identified by a path separated by periods (e.g. \"Timeline 1.Layer 1\").\r\n",
     "name": "getTransportModeOnLayer",
     "params": [
      {
       "name": "layerPath",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "int",
       "type": "int"
      }
     ]
    },
    {
     "documentation": "Returns the resource currently assigned to the layer.\r\nThe layer is identified by a path separated by periods (e.g. \"Timeline 1.Layer 1\").\r\nThe returned string is the path build from signatures and separated by forward slashes \r\n(e.g. \"Media/Folder/video.mov\").\r\n",
     "name": "getResourceAssignedToLayer",
     "params": [
      {
       "name": "layerPath",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "string",
       "type": "string"
      }
     ]
    },
    {
     "documentation": "Assign the resource with dmxfolder/dmxfile id to the clip at time in frames by layerpath\r\n",
     "name": "assignResourceToClipAtTimeByDmxId",
     "params": [
      {
       "name": "layerPath",
       "type": "string"
      },
      {
       "name": "dmxFolderId",
       "type": "int"
      },
      {
       "name": "dmxFileId",
       "type": "int"
      },
      {
       "name": "time",
       "type": "double"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "documentation": "Assign the resource with dmxfolder/dmxfile id to the clip at hmsf time by layerpath\r\n",
     "name": "assignResourceToClipAtHMSFStringByDmxId",
     "params": [
      {
       "name": "layerPath",
       "type": "string"
      },
      {
       "name": "dmxFolderId",
       "type": "int"
      },
      {
       "name": "dmxFileId",
       "type": "int"
      },
      {
       "name": "hmsf",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "documentation": "Assign the resource with dmxfolder/dmxfile id to the clip at h m s f by layerpath\r\n",
     "name": "assignResourceToClipAtHMSFByDmxId",
     "params": [
      {
       "name": "layerPath",
       "type": "string"
      },
      {
       "name": "dmxFolderId",
       "type": "int"
      },
      {
       "name": "dmxFileId",
       "type": "int"
      },
      {
       "name": "h",
       "type": "int"
      },
      {
       "name": "m",
       "type": "int"
      },
      {
       "name": "s",
       "type": "int"
      },
      {
       "name": "f",
       "type": "int"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "documentation": "Sets the current time of the timeline identified by name in frames.<br>\r\nUse getFpsOfTimeline() to relate the frames to seconds.<br>\r\nname: Name of timeline.<br>\r\ntime: New time in frames.\r\n",
     "name": "setCurrentTimeOfTimeline",
     "params": [
      {
       "name": "name",
       "type": "string"
      },
      {
       "name": "time",
       "type": "int"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "documentation": "Sets the current time of the timeline identified by name in seconds.<br>\r\nUse getFpsOfTimeline() to relate the frames to seconds.<br>\r\nname: Name of timeline.<br>\r\ntime: New time in seconds.\r\n",
     "name": "setCurrentTimeOfTimelineInSeconds",
     "params": [
      {
       "name": "name",
       "type": "string"
      },
      {
       "name": "time",
       "type": "double"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "documentation": "Sets the current time in seconds and the applied playback mode of the timeline identified by name.<br>\r\nUse getFpsOfTimeline() to relate the frames to seconds.<br>\r\nname: Name of timeline.<br>\r\ntime: New time in seconds.<br>\r\nmode: New playback mode (Play = 1, Pause = 2, Stop = 3).\r\n",
     "name": "setCurrentTimeAndTransportModeOfTimelineInSeconds",
     "params": [
      {
       "name": "name",
       "type": "string"
      },
      {
       "name": "time",
       "type": "double"
      },
      {
       "name": "mode",
       "type": "int"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "documentation": "Returns the frames per second of the timeline identified by name.<br>\r\nname: Name of timeline.\r\n",
     "name": "getFpsOfTimeline",
     "params": [
      {
       "name": "name",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "double",
       "type": "double"
      }
     ]
    },
    {
     "documentation": "Returns the current time in frames. Use getFpsOfTimeline() to relate the frames to seconds.\r\n",
     "name": "getCurrentTimeOfTimeline",
     "params": [
      {
       "name": "name",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "int",
       "type": "int"
      }
     ]
    },
    {
     "documentation": "Returns the current time in seconds.\r\n",
     "name": "getCurrentTimeOfTimelineInSeconds",
     "params": [
      {
       "name": "name",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "double",
       "type": "double"
      }
     ]
    },
    {
     "documentation": "Returns the current time of the timeline identified by name as hours, minutes, seconds, frames string.<br>\r\nname: Name of timeline.\r\n",
     "name": "getCurrentHMSFOfTimeline",
     "params": [
      {
       "name": "name",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "string",
       "type": "string"
      }
     ]
    },
    {
     "documentation": "Returns the current countdown to next countdown relevant cue as int (in frames).<br>\r\nUse getFpsOfTimeline() to relate the frames to seconds.<br>\r\nname: Name of timeline.\r\n",
     "name": "getCurrentCountdownOfTimeline",
     "params": [
      {
       "name": "name",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "int",
       "type": "int"
      }
     ]
    },
    {
     "documentation": "Returns the current countdown to next countdown relevant cue as string (in hours:minutes:seconds:frames).<br>\r\nname: Name of timeline.\r\n",
     "name": "getCurrentCountdownHMSFOfTimeline",
     "params": [
      {
       "name": "name",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "string",
       "type": "string"
      }
     ]
    },
    {
     "documentation": "Blocks timeline updates in Pixera UI.<br>\r\nUse with caution. Should exclusively be used for performance optimization<br>\r\nwhen adding multiple objects (layer, clip, keys, ...) to timelines.<br>\r\nDo never forget to unblock.<br>\r\ndoBlock: 'true' means start blocking and 'false' means unblock.<br>\r\nterminationDurationInMs: Default value is 10 sec. Duration until the blocking period is automatically terminated. We emphasize that if the default value is sufficient you should always use blockUiTimelineUpdates(false) for a controlled termination. Unit is milliseconds.\r\n",
     "name": "blockUiTimelineUpdates",
     "params": [
      {
       "name": "doBlock",
       "type": "bool"
      },
      {
       "name": "terminationDurationInMs",
       "type": "optional<int>"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "name": "startOpacityAnimationOfTimeline",
     "params": [
      {
       "name": "name",
       "type": "string"
      },
      {
       "name": "fadeIn",
       "type": "bool"
      },
      {
       "name": "fullFadeDuration",
       "type": "double"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "documentation": "Creates a clip at the given time in frames and assigns the resource.\r\nThe layer is identified by a path separated by periods (e.g. \"Timeline 1.Layer 1\").\r\nThe resource is identified by a path build from signatures and separated by forward slashes (e.g. \"Media/Folder/video.mov\").\r\n",
     "name": "createClipOnLayerAtTimeWithResource",
     "params": [
      {
       "name": "layerPath",
       "type": "string"
      },
      {
       "name": "time",
       "type": "double"
      },
      {
       "name": "resourcePath",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "documentation": "Removes the clip identified by the 0-based clipIndex on the layer.\r\nThe layer is identified by a path separated by periods (e.g. \"Timeline 1.Layer 1\").\r\n",
     "name": "removeClipOnLayerWithIndex",
     "params": [
      {
       "name": "layerPath",
       "type": "string"
      },
      {
       "name": "clipIndex",
       "type": "int"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "documentation": "Removes all clips on the layer.\r\nThe layer is identified by a path separated by periods (e.g. \"Timeline 1.Layer 1\").\r\n",
     "name": "removeAllClipsOnLayer",
     "params": [
      {
       "name": "layerPath",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "documentation": "Returns the clip duration in seconds identified by the 0-based clipIndex on the layer.\r\nThe layer is identified by a path separated by periods (e.g. \"Timeline 1.Layer 1\").\r\n",
     "name": "getClipDurationInSecondsWithIndex",
     "params": [
      {
       "name": "layerPath",
       "type": "string"
      },
      {
       "name": "clipIndex",
       "type": "int"
      }
     ],
     "returnValues": [
      {
       "name": "double",
       "type": "double"
      }
     ]
    },
    {
     "documentation": "Returns the clip duration in frames identified by the 0-based clipIndex on the layer.\r\nThe layer is identified by a path separated by periods (e.g. \"Timeline 1.Layer 1\").\r\n",
     "name": "getClipDurationInFramesWithIndex",
     "params": [
      {
       "name": "layerPath",
       "type": "string"
      },
      {
       "name": "clipIndex",
       "type": "int"
      }
     ],
     "returnValues": [
      {
       "name": "int",
       "type": "int"
      }
     ]
    },
    {
     "documentation": "Returns the clip start time in seconds identified by the 0-based clipIndex on the layer.\r\nThe layer is identified by a path separated by periods (e.g. \"Timeline 1.Layer 1\").\r\n",
     "name": "getClipTimeInSecondsWithIndex",
     "params": [
      {
       "name": "layerPath",
       "type": "string"
      },
      {
       "name": "clipIndex",
       "type": "int"
      }
     ],
     "returnValues": [
      {
       "name": "double",
       "type": "double"
      }
     ]
    },
    {
     "documentation": "Returns the clip end time in seconds identified by the 0-based clipIndex on the layer.\r\nThe layer is identified by a path separated by periods (e.g. \"Timeline 1.Layer 1\").\r\n",
     "name": "getClipEndTimeInSecondsWithIndex",
     "params": [
      {
       "name": "layerPath",
       "type": "string"
      },
      {
       "name": "clipIndex",
       "type": "int"
      }
     ],
     "returnValues": [
      {
       "name": "double",
       "type": "double"
      }
     ]
    },
    {
     "documentation": "Returns the duration of the resource in seconds.\r\nThe resource is identified by a path build from signatures and separated by forward slashes (e.g. \"Media/Folder/video.mov\").\r\n",
     "name": "getResourceDurationInSeconds",
     "params": [
      {
       "name": "resourcePath",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "double",
       "type": "double"
      }
     ]
    },
    {
     "documentation": "Returns the current value of the parameter.\r\nThe parameter is identified by a path separated by periods (e.g. \"Timeline 1.Layer 1.Opacity\").\r\n",
     "name": "getParamValue",
     "params": [
      {
       "name": "path",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "double",
       "type": "double"
      }
     ]
    },
    {
     "documentation": "Set timecode input for midi and artnet timecode.\r\n",
     "name": "setTimecodeInput",
     "params": [
      {
       "name": "hour",
       "type": "int"
      },
      {
       "name": "minute",
       "type": "int"
      },
      {
       "name": "second",
       "type": "int"
      },
      {
       "name": "frame",
       "type": "int"
      },
      {
       "name": "elapsedTime",
       "type": "double"
      },
      {
       "name": "running",
       "type": "bool"
      },
      {
       "name": "freshMode",
       "type": "int"
      },
      {
       "name": "stateToken",
       "type": "int"
      },
      {
       "name": "format",
       "type": "int"
      }
     ],
     "returnValues": [
      {
       "name": "double",
       "type": "double"
      }
     ]
    },
    {
     "documentation": "akeover all clients\r\n",
     "name": "takeOverAllClients",
     "params": [],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "documentation": "ute all incomming smpte inputs\r\n",
     "name": "setPauseSmpteInput",
     "params": [
      {
       "name": "doPause",
       "type": "bool"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    }
   ],
   "name": "Compound"
  },
  {
   "functions": [
    {
     "name": "closeApp",
     "params": [
      {
       "name": "saveProject",
       "type": "bool"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "name": "loadProject",
     "params": [
      {
       "name": "path",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "name": "saveProject",
     "params": [],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "name": "saveProjectAs",
     "params": [
      {
       "name": "path",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "name": "getProjectName",
     "params": [],
     "returnValues": [
      {
       "name": "string",
       "type": "string"
      }
     ]
    },
    {
     "name": "setProjectName",
     "params": [
      {
       "name": "name",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "name": "getProjectDirectory",
     "params": [],
     "returnValues": [
      {
       "name": "string",
       "type": "string"
      }
     ]
    },
    {
     "name": "getControlMultiUserSessionName",
     "params": [],
     "returnValues": [
      {
       "name": "string",
       "type": "string"
      }
     ]
    },
    {
     "documentation": "Shut down the local machine. There are three options for mode:<br>\r\n1: Shut down.<br>\r\n2: Shut down and turn off power (if supported).<br>\r\n3: Shut down and reboot.\r\nDefault if no mode is set is 1.\r\n",
     "name": "shutdownSystem",
     "params": [
      {
       "name": "mode",
       "type": "optional<int>"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "name": "getLiveSystemIps",
     "params": [],
     "returnValues": [
      {
       "name": "string[]",
       "type": "string[]"
      }
     ]
    },
    {
     "name": "getLiveSystemState",
     "params": [
      {
       "name": "ip",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "string",
       "type": "string"
      }
     ]
    },
    {
     "documentation": "This function is called in Pixera Control when the live system's state changes.\r\n",
     "name": "liveSystemStateChange",
     "params": [
      {
       "name": "ip",
       "type": "string"
      },
      {
       "name": "state",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "documentation": "Shut down the live system with the given IP. The mode options are the same as for shutdownSystem():\r\nDefault if no mode is set is 1.\r\n",
     "name": "shutdownLiveSystem",
     "params": [
      {
       "name": "ip",
       "type": "string"
      },
      {
       "name": "mode",
       "type": "optional<int>"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "documentation": "Wake up the live system that last had the given IP. Uses the MAC address that was last reported\r\nfor the IP.\r\n",
     "name": "wakeLiveSystem",
     "params": [
      {
       "name": "ip",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "string",
       "type": "string"
      }
     ]
    },
    {
     "documentation": "Returns the last MAC address associated with the live system with the given IP.\r\n",
     "name": "getLiveSystemMacAddress",
     "params": [
      {
       "name": "ip",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "string",
       "type": "string"
      }
     ]
    },
    {
     "documentation": "Start live system.\r\n",
     "name": "startLiveSystem",
     "params": [
      {
       "name": "ip",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "documentation": "Start all live systems in mapping/live sub-tab.\r\n",
     "name": "startLiveSystems",
     "params": [],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "documentation": "Stop live system.\r\n",
     "name": "stopLiveSystem",
     "params": [
      {
       "name": "ip",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "documentation": "Stop all live systems in mapping/live sub-tab.\r\n",
     "name": "stopLiveSystems",
     "params": [],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "documentation": "Restart live system.\r\n",
     "name": "restartLiveSystem",
     "params": [
      {
       "name": "ip",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "documentation": "Restart all live systems in mapping/live sub-tab.\r\n",
     "name": "restartLiveSystems",
     "params": [],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "documentation": "This action is run when remote heartbeat tracking detects a state change in the system.\r\n",
     "name": "remoteSystemStateChange",
     "params": [
      {
       "name": "ip",
       "type": "string"
      },
      {
       "name": "state",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "name": "getRemoteSystemIps",
     "params": [],
     "returnValues": [
      {
       "name": "string[]",
       "type": "string[]"
      }
     ]
    },
    {
     "name": "getRemoteSystemState",
     "params": [
      {
       "name": "ip",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "string",
       "type": "string"
      }
     ]
    },
    {
     "name": "setVideoStreamActiveState",
     "params": [
      {
       "name": "ip",
       "type": "string"
      },
      {
       "name": "device",
       "type": "string"
      },
      {
       "name": "isActive",
       "type": "bool"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "name": "getVideoStreamActiveState",
     "params": [
      {
       "name": "ip",
       "type": "string"
      },
      {
       "name": "device",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "bool",
       "type": "bool"
      }
     ]
    },
    {
     "name": "getDefaultClipDurationsAsJsonString",
     "params": [],
     "returnValues": [
      {
       "name": "string",
       "type": "string"
      }
     ]
    },
    {
     "documentation": "oggle output identification\r\n",
     "name": "toggleOutputIdentification",
     "params": [],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "documentation": "oggle onscreen statistics\r\n",
     "name": "toggleOnScreenStats",
     "params": [],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "documentation": "ctivate/deactivate all assigned outputs\r\n",
     "name": "setAllAssignedOutputs",
     "params": [
      {
       "name": "active",
       "type": "bool"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    }
   ],
   "name": "Session"
  },
  {
   "classes": [
    {
     "methods": [
      {
       "documentation": "Get hardware name of specified multi-user member.\r\n",
       "name": "getName",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "documentation": "Get ip of specified multi-user member.\r\n",
       "name": "getIp",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "documentation": "Get a description of the state of the specified multi-user member.\r\n",
       "name": "getState",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "name": "getPerformanceMonitoringValuesJson",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "documentation": "Filter example: system,outputs,outputsIndividual,outputsTotal,unreal\r\n",
       "name": "getPerformanceMonitoringValuesJsonEx",
       "params": [
        {
         "name": "filter",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "name": "resetCumulativePerformanceMonitoringValues",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Starts file distribution to the multi-user member of all files that are used in a timeline. If includeNotUsedYet is true then\r\nall files that have not been used yet in any timeline are also distributed.\r\n",
       "name": "ensureFileDistribution",
       "params": [
        {
         "name": "includeNotUsedYet",
         "type": "bool"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Shut down the multi-user member's machine. There are three options for mode:<br>\r\n1: Shut down.<br>\r\n2: Shut down and turn off power (if supported).<br>\r\n3: Shut down and reboot.\r\n",
       "name": "shutDown",
       "params": [
        {
         "name": "mode",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Try to wake up specified multi-user member.\r\n",
       "name": "wakeUp",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "documentation": "Returns the MAC address of the specified multi-user member.\r\n",
       "name": "getMacAddress",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "name": "resetEngine",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "restartEngine",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "startEngine",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "closeEngine",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "triggerBackup",
       "params": [
        {
         "name": "applyControlCommand",
         "type": "optional<bool>"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Get a JSON description of the hardware structure of the specified multi-user member.\r\n",
       "name": "getStructureJson",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "deliver": "Pixera.LiveSystems.MultiUserMember",
       "name": "getInst",
       "params": [
        {
         "name": "instancePath",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      }
     ],
     "name": "MultiUserMember"
    },
    {
     "methods": [
      {
       "deliver": "Pixera.LiveSystems.LiveSystem",
       "documentation": "Pixera Control self-reference function.\r\n",
       "name": "ref",
       "params": [],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "documentation": "Get hardware name of a specified live system.\r\n",
       "name": "getName",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "documentation": "Get ip of a specified live system.\r\n",
       "name": "getIp",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "name": "getState",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "name": "setBackupRole",
       "params": [
        {
         "name": "role",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "getBackupRole",
       "params": [],
       "returnValues": [
        {
         "name": "int",
         "type": "int"
        }
       ]
      },
      {
       "name": "getPerformanceMonitoringValuesJson",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "documentation": "Filter example: system,outputs,outputsIndividual,outputsTotal,unreal\r\n",
       "name": "getPerformanceMonitoringValuesJsonEx",
       "params": [
        {
         "name": "filter",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "name": "resetCumulativePerformanceMonitoringValues",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "moveMappingsToOutputs",
       "params": [
        {
         "name": "hdlSrc",
         "type": "handle"
        },
        {
         "name": "outputIdPathMapStr",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "setUsagePresetName",
       "params": [
        {
         "name": "name",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "getUsagePresetName",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "name": "updateUsagePreset",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "saveUsagePresetAs",
       "params": [
        {
         "name": "name",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Applies the currently selected usage preset.\r\n",
       "name": "applyUsagePreset",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Applies the usage preset with the matching name.\r\n",
       "name": "applyUsagePresetWithName",
       "params": [
        {
         "name": "name",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "exportUsagePreset",
       "params": [
        {
         "name": "path",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "importUsagePreset",
       "params": [
        {
         "name": "path",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "clearExportedMappings",
       "params": [
        {
         "name": "path",
         "type": "string"
        },
        {
         "name": "onlyServicePath",
         "type": "bool"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "exportMappings",
       "params": [
        {
         "name": "path",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "importMappings",
       "params": [
        {
         "name": "path",
         "type": "string"
        },
        {
         "name": "outputIdPathMapStr",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "exportMappingsDirectly",
       "params": [
        {
         "name": "path",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "importMappingsDirectly",
       "params": [
        {
         "name": "path",
         "type": "string"
        },
        {
         "name": "outputIdPathMapStr",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "exportMappingsToLiveSystemPath",
       "params": [
        {
         "name": "parentPath",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "importMappingsFromLiveSystemPath",
       "params": [
        {
         "name": "parentPath",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "clearExportedMappingsAtLiveSystemPath",
       "params": [
        {
         "name": "path",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Starts file distribution to the live system of all files that are used in a timeline. If includeNotUsedYet is true then\r\nall files that have not been used yet in any timeline are also distributed.\r\n",
       "name": "ensureFileDistribution",
       "params": [
        {
         "name": "includeNotUsedYet",
         "type": "bool"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Shut down the local machine. There are three options for mode:<br>\r\n1: Shut down.<br>\r\n2: Shut down and turn off power (if supported).<br>\r\n3: Shut down and reboot.\r\n",
       "name": "shutDown",
       "params": [
        {
         "name": "mode",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Try to wake up specified live system.\r\n",
       "name": "wakeUp",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "documentation": "Returns the MAC address of the specified Live System.\r\n",
       "name": "getMacAddress",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "deliver": "Pixera.LiveSystems.GraphicsDevice",
       "documentation": "Returns handles to the graphics devices of a Live System.\r\n",
       "name": "getGraphicsDevices",
       "params": [],
       "returnValues": [
        {
         "name": "handle[]",
         "type": "handle[]"
        }
       ]
      },
      {
       "deliver": "Pixera.LiveSystems.Output",
       "documentation": "Returns handles to all enabled outputs.\r\n",
       "name": "getEnabledOutputs",
       "params": [],
       "returnValues": [
        {
         "name": "handle[]",
         "type": "handle[]"
        }
       ]
      },
      {
       "deliver": "Pixera.LiveSystems.Output",
       "documentation": "Returns handles of all outputs even if they are not physically connected.\r\n",
       "name": "getAllOutputs",
       "params": [],
       "returnValues": [
        {
         "name": "handle[]",
         "type": "handle[]"
        }
       ]
      },
      {
       "deliver": "Pixera.LiveSystems.VideoStream",
       "documentation": "Returns handles to all video stream outputs (NDI, Art-Net, etc.).\r\n",
       "name": "getVideoStreamOutputs",
       "params": [],
       "returnValues": [
        {
         "name": "handle[]",
         "type": "handle[]"
        }
       ]
      },
      {
       "name": "resetEngine",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "restartEngine",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "startEngine",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "closeEngine",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "setAudioMasterVolume",
       "params": [
        {
         "name": "channel",
         "type": "int"
        },
        {
         "name": "volume",
         "type": "double"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "getAudioMasterVolume",
       "params": [
        {
         "name": "channel",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "double",
         "type": "double"
        }
       ]
      },
      {
       "name": "setAudioMasterMute",
       "params": [
        {
         "name": "channel",
         "type": "int"
        },
        {
         "name": "state",
         "type": "bool"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "getAudioMasterMute",
       "params": [
        {
         "name": "channel",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "name": "toggleAudioMasterMute",
       "params": [
        {
         "name": "channel",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "setAudioTimecodeInput",
       "params": [
        {
         "name": "channel",
         "type": "int"
        },
        {
         "name": "state",
         "type": "bool"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "triggerBackup",
       "params": [
        {
         "name": "applyControlCommand",
         "type": "optional<bool>"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Files which are not used in the current project are deleted from the RX-Cache directory.\r\n",
       "name": "deleteUnusedFilesFromCache",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "getStructureJson",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "deliver": "Pixera.LiveSystems.LiveSystem",
       "name": "getInst",
       "params": [
        {
         "name": "instancePath",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "name": "getInstancePath",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      }
     ],
     "name": "LiveSystem"
    },
    {
     "methods": [
      {
       "name": "getName",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "name": "update",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "apply",
       "params": [
        {
         "name": "destinationIp",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "importFromFile",
       "params": [
        {
         "name": "path",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "exportToFile",
       "params": [
        {
         "name": "path",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "deliver": "Pixera.LiveSystems.UsagePreset",
       "name": "getInst",
       "params": [
        {
         "name": "instancePath",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "name": "getInstancePath",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      }
     ],
     "name": "UsagePreset"
    },
    {
     "methods": [
      {
       "name": "getName",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "deliver": "Pixera.LiveSystems.Output",
       "documentation": "Returns handles to all enabled outputs.\r\n",
       "name": "getEnabledOutputs",
       "params": [],
       "returnValues": [
        {
         "name": "handle[]",
         "type": "handle[]"
        }
       ]
      },
      {
       "deliver": "Pixera.LiveSystems.Output",
       "documentation": "Returns handles of all outputs even if they are not physically connected.\r\n",
       "name": "getAllOutputs",
       "params": [],
       "returnValues": [
        {
         "name": "handle[]",
         "type": "handle[]"
        }
       ]
      },
      {
       "deliver": "Pixera.LiveSystems.GraphicsDevice",
       "name": "getInst",
       "params": [
        {
         "name": "instancePath",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "name": "getInstancePath",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      }
     ],
     "name": "GraphicsDevice"
    },
    {
     "methods": [
      {
       "name": "getName",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "documentation": "Set output active/inactive.\r\n",
       "name": "setActive",
       "params": [
        {
         "name": "active",
         "type": "bool"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Return current active state of output.\r\n",
       "name": "getActive",
       "params": [],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "documentation": "set output identify.\r\n",
       "name": "setIdentify",
       "params": [
        {
         "name": "state",
         "type": "bool"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "get output identify.\r\n",
       "name": "getIdentify",
       "params": [],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "deliver": "Pixera.Screens.Screen",
       "documentation": "Return assigned Screens.\r\n",
       "name": "getAssignedScreens",
       "params": [],
       "returnValues": [
        {
         "name": "handle[]",
         "type": "handle[]"
        }
       ]
      },
      {
       "deliver": "Pixera.Projectors.Projector",
       "documentation": "Return assigned Projectors.\r\n",
       "name": "getAssignedProjectors",
       "params": [],
       "returnValues": [
        {
         "name": "handle[]",
         "type": "handle[]"
        }
       ]
      },
      {
       "name": "getEnabled",
       "params": [],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "name": "getForPreview",
       "params": [],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "documentation": "set outputs is aggregate\r\n",
       "name": "setIsOutputAggregate",
       "params": [
        {
         "name": "state",
         "type": "bool"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "set outputs is aggregate\r\n",
       "name": "getIsOutputAggregate",
       "params": [],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "documentation": "set vertical and horizontal aggregate settings\r\n",
       "name": "setAggregateDims",
       "params": [
        {
         "name": "horizontalCount",
         "type": "int"
        },
        {
         "name": "verticalCount",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "get vertical and horizontal aggregate settings\r\n",
       "name": "getAggregateDims",
       "params": [],
       "returnValues": [
        {
         "name": "int[]",
         "type": "int[]"
        }
       ]
      },
      {
       "deliver": "Pixera.LiveSystems.Output",
       "name": "getInst",
       "params": [
        {
         "name": "instancePath",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "name": "getInstancePath",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      }
     ],
     "name": "Output"
    },
    {
     "methods": [
      {
       "name": "getName",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "documentation": "Set video stream active/inactive.\r\n",
       "name": "setActive",
       "params": [
        {
         "name": "active",
         "type": "bool"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Get active state of video stream.\r\n",
       "name": "getActive",
       "params": [],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "name": "getIpAddress",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "name": "setIpAddress",
       "params": [
        {
         "name": "ipAddress",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "getDeviceType",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "deliver": "Pixera.LiveSystems.VideoStream",
       "name": "getInst",
       "params": [
        {
         "name": "instancePath",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "name": "getInstancePath",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      }
     ],
     "name": "VideoStream"
    }
   ],
   "functions": [
    {
     "deliver": "Pixera.LiveSystems.LiveSystem",
     "documentation": "Get the handles of the live systems.\r\nThis will also return handles of live systems that are no longer connected.\r\n",
     "name": "getLiveSystems",
     "params": [],
     "returnValues": [
      {
       "name": "handle[]",
       "type": "handle[]"
      }
     ]
    },
    {
     "documentation": "Called when the live system has become unavailable.\r\n",
     "name": "liveSystemNotAvailable",
     "params": [
      {
       "name": "reason",
       "type": "int"
      },
      {
       "name": "system",
       "type": "handle"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "deliver": "Pixera.LiveSystems.MultiUserMember",
     "name": "getMultiUserMembers",
     "params": [],
     "returnValues": [
      {
       "name": "handle[]",
       "type": "handle[]"
      }
     ]
    },
    {
     "deliver": "Pixera.LiveSystems.UsagePreset",
     "name": "getUsagePresets",
     "params": [],
     "returnValues": [
      {
       "name": "handle[]",
       "type": "handle[]"
      }
     ]
    }
   ],
   "name": "LiveSystems"
  },
  {
   "name": "Settings",
   "namespaces": [
    {
     "functions": [
      {
       "documentation": "If this is true, the values for transformation and scale, set in Node::setValues have to be in pixels.\r\n",
       "name": "getShowDimsInPixels",
       "params": [],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "documentation": "If this is true, the nodes will be using size instead of scale.\r\n",
       "name": "getShowScaleAsSize",
       "params": [],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "name": "setFadeToTimeDelay",
       "params": [
        {
         "name": "timeInMilliseconds",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "getFadeToTimeDelay",
       "params": [],
       "returnValues": [
        {
         "name": "int",
         "type": "int"
        }
       ]
      }
     ],
     "name": "SettingsGeneral"
    },
    {
     "functions": [
      {
       "documentation": "Get Transcoding presets as a vector of Json-Strings<br>\r\nWith the stucture:<br>\r\nAvailable container/codec strings:<br>\r\nvp9: mkv, mp4<br>\r\nH264: mp4<br>\r\nH265: mp4<br>\r\nHAP: mov<br>\r\nHAP Alpha: mov<br>\r\nHAP Q: mov<br>\r\nImage: png, tiff, dpx<br>\r\n<br>\r\nCompression settings:<br>\r\nLossless : 0<br>\r\nLow : 1<br>\r\nMedium : 2<br>\r\nHigh : 3<br>\r\n<br>\r\nHap compression settings:<br>\r\nNone : 0<br>\r\nSnappy : 1<br>\r\n<br>\r\nH264 Presets:<br>\r\nDefault : 1<br>\r\nSlow : 2<br>\r\nMedium : 3<br>\r\nFast : 4<br>\r\nHp (High Performance): 5<br>\r\nHq : 6<br>\r\nBd : 7<br>\r\nLl (Low latency) : 8<br>\r\nLlHq : 9<br>\r\nLlHp : 10<br>\r\nLossless : 11<br>\r\nLossless Hp : 12\r\n",
       "name": "getTranscodingPresets",
       "params": [],
       "returnValues": [
        {
         "name": "string[]",
         "type": "string[]"
        }
       ]
      },
      {
       "documentation": "Search for preset with given name if found it will be set to the given setup,\r\nif not a new one will be created.\r\n",
       "name": "addOrChangeTranscodingPreset",
       "params": [
        {
         "name": "preset",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      }
     ],
     "name": "SettingsTranscoding"
    },
    {
     "functions": [
      {
       "documentation": "Defines the rule for the automatic distribution of newly added resources. 0: None, 1: On Import, 2: On Use\r\n",
       "name": "setAutoDistributionRule",
       "params": [
        {
         "name": "rule",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Returns the rule for the automatic distribution of newly added resources. 0: None, 1: On Import, 2: On Use\r\n",
       "name": "getAutoDistributionRule",
       "params": [],
       "returnValues": [
        {
         "name": "int",
         "type": "int"
        }
       ]
      }
     ],
     "name": "SettingsResourceDistribution"
    }
   ]
  },
  {
   "classes": [
    {
     "methods": [
      {
       "documentation": "Returns an id based on the handle. This is currently necessary in some situations\r\nbecause some API implementations can not yet consume handles as parameters. \r\n",
       "name": "getId",
       "params": [],
       "returnValues": [
        {
         "name": "double",
         "type": "double"
        }
       ]
      },
      {
       "name": "getName",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "documentation": "Sets the position in meters.\r\n",
       "name": "setPosition",
       "params": [
        {
         "name": "xPos",
         "type": "optional<double>"
        },
        {
         "name": "yPos",
         "type": "optional<double>"
        },
        {
         "name": "zPos",
         "type": "optional<double>"
        }
       ],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "documentation": "Returns the position in meters.\r\n",
       "name": "getPosition",
       "params": [],
       "returnValues": [
        {
         "name": "ScreenPosValues",
         "type": "ScreenPosValues"
        }
       ]
      },
      {
       "documentation": "Sets the rotation in degrees.\r\n",
       "name": "setRotation",
       "params": [
        {
         "name": "xRot",
         "type": "optional<double>"
        },
        {
         "name": "yRot",
         "type": "optional<double>"
        },
        {
         "name": "zRot",
         "type": "optional<double>"
        }
       ],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "documentation": "Returns the Rotation in degrees.\r\n",
       "name": "getRotation",
       "params": [],
       "returnValues": [
        {
         "name": "ScreenPosValues",
         "type": "ScreenPosValues"
        }
       ]
      },
      {
       "documentation": "Scales the screen proportionally (a value of 1.0 leaves the size unchanged). \r\n",
       "name": "setScale",
       "params": [
        {
         "name": "xScale",
         "type": "optional<double>"
        },
        {
         "name": "yScale",
         "type": "optional<double>"
        },
        {
         "name": "zScale",
         "type": "optional<double>"
        }
       ],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "documentation": "Returns the Scale.\r\n",
       "name": "getScale",
       "params": [],
       "returnValues": [
        {
         "name": "ScreenPosValues",
         "type": "ScreenPosValues"
        }
       ]
      },
      {
       "documentation": "Sets position and rotation in one API call.\r\n",
       "name": "setPosRot",
       "params": [
        {
         "name": "xPos",
         "type": "optional<double>"
        },
        {
         "name": "yPos",
         "type": "optional<double>"
        },
        {
         "name": "zPos",
         "type": "optional<double>"
        },
        {
         "name": "xRot",
         "type": "optional<double>"
        },
        {
         "name": "yRot",
         "type": "optional<double>"
        },
        {
         "name": "zRot",
         "type": "optional<double>"
        }
       ],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "documentation": "Sets position, rotation and the perspective position for the first screen group in one API call.\r\n",
       "name": "setPosRotAndPerspectivePos",
       "params": [
        {
         "name": "xPos",
         "type": "optional<double>"
        },
        {
         "name": "yPos",
         "type": "optional<double>"
        },
        {
         "name": "zPos",
         "type": "optional<double>"
        },
        {
         "name": "xRot",
         "type": "optional<double>"
        },
        {
         "name": "yRot",
         "type": "optional<double>"
        },
        {
         "name": "zRot",
         "type": "optional<double>"
        },
        {
         "name": "perspXPos",
         "type": "optional<double>"
        },
        {
         "name": "perspYPos",
         "type": "optional<double>"
        },
        {
         "name": "perspZPos",
         "type": "optional<double>"
        }
       ],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "documentation": "Sets position, rotation and scale in one API call.\r\n",
       "name": "setPosRotScale",
       "params": [
        {
         "name": "xPos",
         "type": "optional<double>"
        },
        {
         "name": "yPos",
         "type": "optional<double>"
        },
        {
         "name": "zPos",
         "type": "optional<double>"
        },
        {
         "name": "xRot",
         "type": "optional<double>"
        },
        {
         "name": "yRot",
         "type": "optional<double>"
        },
        {
         "name": "zRot",
         "type": "optional<double>"
        },
        {
         "name": "xScale",
         "type": "optional<double>"
        },
        {
         "name": "yScale",
         "type": "optional<double>"
        },
        {
         "name": "zScale",
         "type": "optional<double>"
        }
       ],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "deliver": "Pixera.Screens.Perspective",
       "documentation": "Returns handles to all perspectives currently available for the screen.\r\n",
       "name": "getPerspectives",
       "params": [],
       "returnValues": [
        {
         "name": "handle[]",
         "type": "handle[]"
        }
       ]
      },
      {
       "deliver": "Pixera.Screens.Perspective",
       "documentation": "Returns the perspective for the Screen Group with the given name.\r\n",
       "name": "getPerspectiveForScreenGroup",
       "params": [
        {
         "name": "screenGroupName",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "deliver": "Pixera.Screens.Perspective",
       "documentation": "Returns the perspective for the first Screen Group.\r\n",
       "name": "getPersepective",
       "params": [],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "documentation": "Snap the Perspective to Screen<br>.\r\n0 : Snap Mode to Bounding Box<br>\r\n1 : Snap Mode to UV Coords<br>\r\n2 : Snap Mode to Vertices<br>\r\n3 : Snap Mode to Bounding Box in View<br>\r\n4 : Snap Mode to Vertices with Projection\r\n",
       "name": "snapPerspectiveCornersToScreen",
       "params": [
        {
         "name": "mode",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Sets the position of the perspective in meters.\r\n",
       "name": "setPerspectivePosition",
       "params": [
        {
         "name": "xPos",
         "type": "optional<double>"
        },
        {
         "name": "yPos",
         "type": "optional<double>"
        },
        {
         "name": "zPos",
         "type": "optional<double>"
        }
       ],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "documentation": "Sets the position of the perspective in meters and moves the look-at point so that the\r\nrelationship between eye and look-at point is maintained. Look-at point will not be moved\r\nif generalized perspective projection is being used.\r\n",
       "name": "setPerspectivePositionWithLookAt",
       "params": [
        {
         "name": "xPos",
         "type": "optional<double>"
        },
        {
         "name": "yPos",
         "type": "optional<double>"
        },
        {
         "name": "zPos",
         "type": "optional<double>"
        }
       ],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "documentation": "Returns the position of the perspective in meters.\r\n",
       "name": "getPerspectivePosition",
       "params": [],
       "returnValues": [
        {
         "name": "ScreenPosValues",
         "type": "ScreenPosValues"
        }
       ]
      },
      {
       "documentation": "Sets the rotation around the view axis of the screen's perspective in degrees.\r\n",
       "name": "setPerspectiveRotation",
       "params": [
        {
         "name": "xRot",
         "type": "optional<double>"
        },
        {
         "name": "yRot",
         "type": "optional<double>"
        },
        {
         "name": "zRot",
         "type": "optional<double>"
        }
       ],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "documentation": "Returns the rotation around the view axis of the screen's perspective in degrees.\r\n",
       "name": "getPerspectiveRotation",
       "params": [],
       "returnValues": [
        {
         "name": "ScreenPosValues",
         "type": "ScreenPosValues"
        }
       ]
      },
      {
       "documentation": "This method is deprecated. Please use setPerspectivePosition(.) instead.\r\n",
       "name": "setCameraPosition",
       "params": [
        {
         "name": "xPos",
         "type": "optional<double>"
        },
        {
         "name": "yPos",
         "type": "optional<double>"
        },
        {
         "name": "zPos",
         "type": "optional<double>"
        }
       ],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "documentation": "This method is deprecated. Please use setPerspectivePositionWithLookAt(.) instead.\r\n",
       "name": "setCameraPositionWithLookAt",
       "params": [
        {
         "name": "xPos",
         "type": "optional<double>"
        },
        {
         "name": "yPos",
         "type": "optional<double>"
        },
        {
         "name": "zPos",
         "type": "optional<double>"
        }
       ],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "documentation": "This method is deprecated. Please use getPerspectivePosition(.) instead.\r\n",
       "name": "getCameraPosition",
       "params": [],
       "returnValues": [
        {
         "name": "ScreenPosValues",
         "type": "ScreenPosValues"
        }
       ]
      },
      {
       "documentation": "This method is deprecated. Please use setPerspectiveRotation(.) instead.\r\n",
       "name": "setCameraRotation",
       "params": [
        {
         "name": "xRot",
         "type": "optional<double>"
        },
        {
         "name": "yRot",
         "type": "optional<double>"
        },
        {
         "name": "zRot",
         "type": "optional<double>"
        }
       ],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "documentation": "This method is deprecated. Please use getPerspectiveRotation(.) instead.\r\n",
       "name": "getCameraRotation",
       "params": [],
       "returnValues": [
        {
         "name": "ScreenPosValues",
         "type": "ScreenPosValues"
        }
       ]
      },
      {
       "documentation": "Sets the frustum base of the screen's perspective in pixels. The frustum base is positioned in the X/Y plane of the content compositing\r\nspace so that its center is at the position given by the x and y parameters. The origin the position relates to is that of the screen given\r\nby originScreenId  (use Screen.getId() to access this id or pass a handle to the origin screen). This makes it possible to relate\r\nmultiple perspective pixel positions  to the same origin.<br>\r\nThe width and height of the frustum base are set to pixel dimensions as given by the width and height parameters.<br>\r\nThe rotation parameter rotates the frustum base around the Z axis the given number of degrees.\r\n",
       "name": "setContentSamplingFrustumBase",
       "params": [
        {
         "name": "x",
         "type": "double"
        },
        {
         "name": "y",
         "type": "double"
        },
        {
         "name": "width",
         "type": "double"
        },
        {
         "name": "height",
         "type": "double"
        },
        {
         "name": "rotation",
         "type": "double"
        },
        {
         "name": "originScreenId",
         "type": "double"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Launches a calibration tool for the screen. The mode and diff strings \r\ndepend on the tool. If they are left empty appropriate defaults will be used.<br>\r\nmode options:<br>\r\n\"newCalib\": Launches \"New Calibration\" dialog.<br>\r\n\"autoRecalib\": Launches re-calibration without user interaction. Dialog is closed automatically afterwards.<br>\r\ndiff options:<br>\r\n\"vioso\"\r\n",
       "name": "runCalibration",
       "params": [
        {
         "name": "mode",
         "type": "string"
        },
        {
         "name": "diff",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Relaunches a calibration tool for the screen for further editing. The diff string\r\ndepends on the tool. If it is left empty an appropriate default will be used.\r\n",
       "name": "editCalibration",
       "params": [
        {
         "name": "diff",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Notifiy if Calibration is finshed\r\nFinished Parameter: True = Finished, False = Not Finished\r\n",
       "name": "finshedCalibration",
       "params": [
        {
         "name": "finished",
         "type": "bool"
        }
       ],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "documentation": "Same functionality as pressing Button \"Distribute Loaded Calibrations\"\r\n",
       "name": "distributeLoadedCalibrationAndReload",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Resets a warp that originated with a calibration tool. The diff string depends\r\non the tool. If it is empty an appropriate default will be used.\r\n",
       "name": "resetWarpFile",
       "params": [
        {
         "name": "diff",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Loads the warp file at the specified path for the screen.\r\n",
       "name": "loadWarpFile",
       "params": [
        {
         "name": "filePath",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Like loadWarpFile() except diff string can be used to control the format. Use \"mpcdi\"\r\nto load MPCDI files.\r\n",
       "name": "loadWarpFileWithDiff",
       "params": [
        {
         "name": "filePath",
         "type": "string"
        },
        {
         "name": "diff",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Adds the warp file at the specified path to those loaded for the screen.\r\n",
       "name": "addWarpFile",
       "params": [
        {
         "name": "filePath",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Like loadWarpFile() except diff string can be used to control the format. Use \"mpcdi\"\r\nto add MPCDI files.\r\n",
       "name": "addWarpFileWithDiff",
       "params": [
        {
         "name": "filePath",
         "type": "string"
        },
        {
         "name": "diff",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "loadColorCalibration",
       "params": [
        {
         "name": "calibrationName",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "runColorCalibration",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Sets the screen visibility in the workspace.\r\n",
       "name": "setIsVisible",
       "params": [
        {
         "name": "isVisible",
         "type": "bool"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Get the screen visibility in the workspace.\r\n",
       "name": "getIsVisible",
       "params": [],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "documentation": "Sets if a screen can be used as a projection surface. \r\n",
       "name": "setIsProjectable",
       "params": [
        {
         "name": "isProjectable",
         "type": "bool"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Get if the screen can be used as a projection surface.\r\n",
       "name": "getIsProjectable",
       "params": [],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "documentation": "Triggers a manual update of the mappings between this screen and the projectors. \r\n",
       "name": "triggerRefreshMapping",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Reset all color correction\r\n",
       "name": "resetAllColorCorrections",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "et ColorCorrection Value by Path\r\n",
       "name": "setColorCorrectionWithPath",
       "params": [
        {
         "name": "path",
         "type": "string"
        },
        {
         "name": "value",
         "type": "float"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "et ColorCorrection Value by Path\r\n",
       "name": "getColorCorrectionWithPath",
       "params": [
        {
         "name": "path",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "float",
         "type": "float"
        }
       ]
      },
      {
       "documentation": "et colorcorrection with jsonstring\r\n",
       "name": "setColorCorrectionAsJsonString",
       "params": [
        {
         "name": "colorCorrection",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "et colorcorrection as jsonstring\r\n",
       "name": "getColorCorrectionAsJsonString",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "deliver": "Pixera.LiveSystems.Output",
       "documentation": "et outputs\r\n",
       "name": "getOutput",
       "params": [],
       "returnValues": [
        {
         "name": "handle[]",
         "type": "handle[]"
        }
       ]
      },
      {
       "documentation": "Set the active state of a active screen Blackout. \r\n",
       "name": "setBlackout",
       "params": [
        {
         "name": "isActive",
         "type": "bool"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Get the active state of a active screen blackout. \r\n",
       "name": "getBlackout",
       "params": [],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "deliver": "Pixera.Screens.Screen",
       "name": "getInst",
       "params": [
        {
         "name": "instancePath",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "deliver": "Pixera.Screens.Screen",
       "name": "getHandleFromInstancePath",
       "params": [
        {
         "name": "instancePath",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "name": "getInstancePath",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      }
     ],
     "name": "Screen"
    },
    {
     "methods": [
      {
       "name": "getName",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "documentation": "Sets the position in meters.\r\n",
       "name": "setPosition",
       "params": [
        {
         "name": "xPos",
         "type": "optional<double>"
        },
        {
         "name": "yPos",
         "type": "optional<double>"
        },
        {
         "name": "zPos",
         "type": "optional<double>"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Returns the position in meters.\r\n",
       "name": "getPosition",
       "params": [
        {
         "name": "xPos",
         "type": "double"
        },
        {
         "name": "yPos",
         "type": "double"
        },
        {
         "name": "zPos",
         "type": "double"
        }
       ],
       "returnValues": [
        {
         "name": "double[]",
         "type": "double[]"
        }
       ]
      },
      {
       "documentation": "Sets the euler rotation in degrees.\r\n",
       "name": "setRotation",
       "params": [
        {
         "name": "xRot",
         "type": "optional<double>"
        },
        {
         "name": "yRot",
         "type": "optional<double>"
        },
        {
         "name": "zRot",
         "type": "optional<double>"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Sets rotation in quaternions.\r\n",
       "name": "setRotationQuat",
       "params": [
        {
         "name": "xQuat",
         "type": "optional<double>"
        },
        {
         "name": "yQuat",
         "type": "optional<double>"
        },
        {
         "name": "zQuat",
         "type": "optional<double>"
        },
        {
         "name": "wQuat",
         "type": "optional<double>"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Returns the euler rotation in degrees.\r\n",
       "name": "getRotation",
       "params": [
        {
         "name": "xPos",
         "type": "double"
        },
        {
         "name": "yPos",
         "type": "double"
        },
        {
         "name": "zPos",
         "type": "double"
        }
       ],
       "returnValues": [
        {
         "name": "double[]",
         "type": "double[]"
        }
       ]
      },
      {
       "documentation": "Sets the position in meters, rotation and fov in degrees.\r\n",
       "name": "setTransformation",
       "params": [
        {
         "name": "xPos",
         "type": "optional<double>"
        },
        {
         "name": "yPos",
         "type": "optional<double>"
        },
        {
         "name": "zPos",
         "type": "optional<double>"
        },
        {
         "name": "xRot",
         "type": "optional<double>"
        },
        {
         "name": "yRot",
         "type": "optional<double>"
        },
        {
         "name": "zRot",
         "type": "optional<double>"
        },
        {
         "name": "fov",
         "type": "optional<double>"
        },
        {
         "name": "aspectRatio",
         "type": "optional<double>"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Sets the position in meters, rotation in quaternions, fov in degrees.\r\n",
       "name": "setTransformationQuat",
       "params": [
        {
         "name": "xPos",
         "type": "optional<double>"
        },
        {
         "name": "yPos",
         "type": "optional<double>"
        },
        {
         "name": "zPos",
         "type": "optional<double>"
        },
        {
         "name": "xQuat",
         "type": "optional<double>"
        },
        {
         "name": "yQuat",
         "type": "optional<double>"
        },
        {
         "name": "zQuat",
         "type": "optional<double>"
        },
        {
         "name": "wQuat",
         "type": "optional<double>"
        },
        {
         "name": "fov",
         "type": "optional<double>"
        },
        {
         "name": "aspectRatio",
         "type": "optional<double>"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Sets the position in meters, rotation and fov in degrees, centerX, centerX and panelWidth in millimeters.\r\n",
       "name": "setTransformationAndLensProps",
       "params": [
        {
         "name": "xPos",
         "type": "double"
        },
        {
         "name": "yPos",
         "type": "double"
        },
        {
         "name": "zPos",
         "type": "double"
        },
        {
         "name": "xRot",
         "type": "double"
        },
        {
         "name": "yRot",
         "type": "double"
        },
        {
         "name": "zRot",
         "type": "double"
        },
        {
         "name": "fov",
         "type": "double"
        },
        {
         "name": "aspectRatio",
         "type": "double"
        },
        {
         "name": "nearClip",
         "type": "double"
        },
        {
         "name": "farClip",
         "type": "double"
        },
        {
         "name": "aperture",
         "type": "double"
        },
        {
         "name": "focus",
         "type": "double"
        },
        {
         "name": "iris",
         "type": "double"
        },
        {
         "name": "k1",
         "type": "double"
        },
        {
         "name": "k2",
         "type": "double"
        },
        {
         "name": "centerX",
         "type": "double"
        },
        {
         "name": "centerY",
         "type": "double"
        },
        {
         "name": "panelWidth",
         "type": "double"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Sets the position in meters, rotation in quaternions, fov in degrees, centerX, centerX and panelWidth in millimeters.\r\n",
       "name": "setTransformationAndLensPropsQuat",
       "params": [
        {
         "name": "xPos",
         "type": "double"
        },
        {
         "name": "yPos",
         "type": "double"
        },
        {
         "name": "zPos",
         "type": "double"
        },
        {
         "name": "xQuat",
         "type": "double"
        },
        {
         "name": "yQuat",
         "type": "double"
        },
        {
         "name": "zQuat",
         "type": "double"
        },
        {
         "name": "wQuat",
         "type": "double"
        },
        {
         "name": "fov",
         "type": "double"
        },
        {
         "name": "aspectRatio",
         "type": "double"
        },
        {
         "name": "nearClip",
         "type": "double"
        },
        {
         "name": "farClip",
         "type": "double"
        },
        {
         "name": "aperture",
         "type": "double"
        },
        {
         "name": "focus",
         "type": "double"
        },
        {
         "name": "iris",
         "type": "double"
        },
        {
         "name": "k1",
         "type": "double"
        },
        {
         "name": "k2",
         "type": "double"
        },
        {
         "name": "centerX",
         "type": "double"
        },
        {
         "name": "centerY",
         "type": "double"
        },
        {
         "name": "panelWidth",
         "type": "double"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Sets the position in meters, rotation and fov in degrees, centerX, centerX and panelWidth in millimeters.\r\n",
       "name": "setTransformationAndLensPropsExt",
       "params": [
        {
         "name": "xPos",
         "type": "double"
        },
        {
         "name": "yPos",
         "type": "double"
        },
        {
         "name": "zPos",
         "type": "double"
        },
        {
         "name": "xRot",
         "type": "double"
        },
        {
         "name": "yRot",
         "type": "double"
        },
        {
         "name": "zRot",
         "type": "double"
        },
        {
         "name": "fov",
         "type": "double"
        },
        {
         "name": "aspectRatio",
         "type": "double"
        },
        {
         "name": "nearClip",
         "type": "double"
        },
        {
         "name": "farClip",
         "type": "double"
        },
        {
         "name": "aperture",
         "type": "double"
        },
        {
         "name": "focus",
         "type": "double"
        },
        {
         "name": "focalDistance",
         "type": "double"
        },
        {
         "name": "zoom",
         "type": "double"
        },
        {
         "name": "iris",
         "type": "double"
        },
        {
         "name": "k1",
         "type": "double"
        },
        {
         "name": "k2",
         "type": "double"
        },
        {
         "name": "k3",
         "type": "double"
        },
        {
         "name": "p1",
         "type": "double"
        },
        {
         "name": "p2",
         "type": "double"
        },
        {
         "name": "centerX",
         "type": "double"
        },
        {
         "name": "centerY",
         "type": "double"
        },
        {
         "name": "panelWidth",
         "type": "double"
        },
        {
         "name": "overscan",
         "type": "double"
        },
        {
         "name": "focalLength",
         "type": "optional<double>"
        },
        {
         "name": "focalLengthDistorted",
         "type": "optional<double>"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Sets the position in meters, rotation in quaternions, fov in degrees, centerX, centerX and panelWidth in millimeters.\r\n",
       "name": "setTransformationAndLensPropsExtQuat",
       "params": [
        {
         "name": "xPos",
         "type": "double"
        },
        {
         "name": "yPos",
         "type": "double"
        },
        {
         "name": "zPos",
         "type": "double"
        },
        {
         "name": "xQuat",
         "type": "double"
        },
        {
         "name": "yQuat",
         "type": "double"
        },
        {
         "name": "zQuat",
         "type": "double"
        },
        {
         "name": "wQuat",
         "type": "double"
        },
        {
         "name": "fov",
         "type": "double"
        },
        {
         "name": "aspectRatio",
         "type": "double"
        },
        {
         "name": "nearClip",
         "type": "double"
        },
        {
         "name": "farClip",
         "type": "double"
        },
        {
         "name": "aperture",
         "type": "double"
        },
        {
         "name": "focus",
         "type": "double"
        },
        {
         "name": "focalDistance",
         "type": "double"
        },
        {
         "name": "zoom",
         "type": "double"
        },
        {
         "name": "iris",
         "type": "double"
        },
        {
         "name": "k1",
         "type": "double"
        },
        {
         "name": "k2",
         "type": "double"
        },
        {
         "name": "k3",
         "type": "double"
        },
        {
         "name": "p1",
         "type": "double"
        },
        {
         "name": "p2",
         "type": "double"
        },
        {
         "name": "centerX",
         "type": "double"
        },
        {
         "name": "centerY",
         "type": "double"
        },
        {
         "name": "panelWidth",
         "type": "double"
        },
        {
         "name": "overscan",
         "type": "double"
        },
        {
         "name": "focalLength",
         "type": "optional<double>"
        },
        {
         "name": "focalLengthDistorted",
         "type": "optional<double>"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Set the tracking input pause.\r\n",
       "name": "setTrackingInputPause",
       "params": [
        {
         "name": "pause",
         "type": "bool"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Get the tracking input pause.\r\n",
       "name": "getTrackingInputPause",
       "params": [],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "documentation": "Set the tracking input position pause.\r\n",
       "name": "setUsePositionPropertiesFromTracking",
       "params": [
        {
         "name": "pause",
         "type": "bool"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Get the tracking input position.\r\n",
       "name": "getUsePositionPropertiesFromTracking",
       "params": [],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "documentation": "Set the tracking input rotation pause.\r\n",
       "name": "setUseRotationPropertiesFromTracking",
       "params": [
        {
         "name": "pause",
         "type": "bool"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Get the tracking input rotation pause.\r\n",
       "name": "getUseRotationPropertiesFromTracking",
       "params": [],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "documentation": "Set the camera to project on the associated screens.\r\n",
       "name": "setProjectOnAssociatedScreens",
       "params": [
        {
         "name": "state",
         "type": "bool"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Get whether the camera projects on the associated screens.\r\n",
       "name": "getProjectOnAssociatedScreens",
       "params": [],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "documentation": "Move the projected inner frustum rendering to the top among multiple studio cameras.\r\n",
       "name": "moveToTop",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "deliver": "Pixera.Screens.StudioCamera",
       "name": "getInst",
       "params": [
        {
         "name": "instancePath",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "deliver": "Pixera.Screens.StudioCamera",
       "name": "getHandleFromInstancePath",
       "params": [
        {
         "name": "instancePath",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "name": "getInstancePath",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      }
     ],
     "name": "StudioCamera"
    },
    {
     "methods": [
      {
       "name": "getName",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "documentation": "Sets the position in meters, rotation and fov in degrees. The look at point is not locked by default.\r\n",
       "name": "setTransformation",
       "params": [
        {
         "name": "xPos",
         "type": "optional<double>"
        },
        {
         "name": "yPos",
         "type": "optional<double>"
        },
        {
         "name": "zPos",
         "type": "optional<double>"
        },
        {
         "name": "xRot",
         "type": "optional<double>"
        },
        {
         "name": "yRot",
         "type": "optional<double>"
        },
        {
         "name": "zRot",
         "type": "optional<double>"
        },
        {
         "name": "fov",
         "type": "optional<double>"
        },
        {
         "name": "aspectRatio",
         "type": "optional<double>"
        },
        {
         "name": "lockLookAtPt",
         "type": "optional<bool>"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "deliver": "Pixera.Screens.Perspective",
       "name": "getInst",
       "params": [
        {
         "name": "instancePath",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "deliver": "Pixera.Screens.Perspective",
       "name": "getHandleFromInstancePath",
       "params": [
        {
         "name": "instancePath",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "name": "getInstancePath",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      }
     ],
     "name": "Perspective"
    }
   ],
   "functions": [
    {
     "deliver": "Pixera.Screens.Screen",
     "documentation": "Screen name as shown in the inspector.\r\n",
     "name": "getScreenWithName",
     "params": [
      {
       "name": "name",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "handle",
       "type": "handle"
      }
     ]
    },
    {
     "documentation": "This function was introduced for test purposes, is not typical of the API\r\nand is likely to be removed soon. Do not use it in shipping products!\r\nThe function sets the position of the screen with the given name.\r\nThe recommended way of doing this is to first use getScreenWithName(.) and\r\nthen Screen.setPosition(.).\r\n",
     "name": "setNamedScreenPosition",
     "params": [
      {
       "name": "name",
       "type": "string"
      },
      {
       "name": "xPos",
       "type": "optional<double>"
      },
      {
       "name": "yPos",
       "type": "optional<double>"
      },
      {
       "name": "zPos",
       "type": "optional<double>"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "deliver": "Pixera.Screens.Screen",
     "documentation": "Returns handles to all screens currently used in the Screens tab.\r\n",
     "name": "getScreens",
     "params": [],
     "returnValues": [
      {
       "name": "handle[]",
       "type": "handle[]"
      }
     ]
    },
    {
     "name": "getScreenNames",
     "params": [],
     "returnValues": [
      {
       "name": "string[]",
       "type": "string[]"
      }
     ]
    },
    {
     "deliver": "Pixera.Timelines.Timeline",
     "name": "getFirstTimelineWithHomeScreen",
     "params": [
      {
       "name": "screenName",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "handle",
       "type": "handle"
      }
     ]
    },
    {
     "deliver": "Pixera.Screens.StudioCamera",
     "documentation": "Returns handles to all studio cameras currently used in the Screens tab.\r\n",
     "name": "getStudioCameras",
     "params": [],
     "returnValues": [
      {
       "name": "handle[]",
       "type": "handle[]"
      }
     ]
    }
   ],
   "name": "Screens",
   "structs": [
    {
     "name": "ScreenPosValues",
     "params": [
      {
       "name": "x",
       "type": "double"
      },
      {
       "name": "y",
       "type": "double"
      },
      {
       "name": "z",
       "type": "double"
      }
     ]
    }
   ]
  },
  {
   "classes": [
    {
     "methods": [
      {
       "documentation": "The position units are as in the inspector, i.e. meters.\r\n",
       "name": "getPosition",
       "params": [],
       "returnValues": [
        {
         "name": "ProjectorPosValues",
         "type": "ProjectorPosValues"
        }
       ]
      },
      {
       "documentation": "The position units are as in the inspector, i.e. meters.\r\n",
       "name": "setPosition",
       "params": [
        {
         "name": "xPos",
         "type": "optional<double>"
        },
        {
         "name": "yPos",
         "type": "optional<double>"
        },
        {
         "name": "zPos",
         "type": "optional<double>"
        }
       ],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "documentation": "Get rotation of projector.\r\n",
       "name": "getRotation",
       "params": [],
       "returnValues": [
        {
         "name": "ProjectorPosValues",
         "type": "ProjectorPosValues"
        }
       ]
      },
      {
       "documentation": "Set rotation of projector.\r\n",
       "name": "setRotation",
       "params": [
        {
         "name": "xRot",
         "type": "optional<double>"
        },
        {
         "name": "yRot",
         "type": "optional<double>"
        },
        {
         "name": "zRot",
         "type": "optional<double>"
        }
       ],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "name": "getName",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "documentation": "Set the active state of a projector screen mapping. \r\nThe id is conceptually the handle but the handle can not be passed \r\ndirectly for some implementations of the API. \r\nTherefore, Screen.getId() should be used to fill the screenId parameter.\r\n",
       "name": "activateScreenMapping",
       "params": [
        {
         "name": "screenId",
         "type": "double"
        },
        {
         "name": "isActive",
         "type": "bool"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Set the active state of a projector Blackout. \r\n",
       "name": "setBlackout",
       "params": [
        {
         "name": "isActive",
         "type": "bool"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Get the active state of a projector blackout. \r\n",
       "name": "getBlackout",
       "params": [],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "documentation": "set Render Order ID\r\n",
       "name": "setRenderOrderId",
       "params": [
        {
         "name": "screenId",
         "type": "double"
        },
        {
         "name": "orderId",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "get Render Order ID\r\n",
       "name": "getRenderOrderId",
       "params": [
        {
         "name": "screenId",
         "type": "double"
        }
       ],
       "returnValues": [
        {
         "name": "int",
         "type": "int"
        }
       ]
      },
      {
       "documentation": "Set the softedge of a projector for a specific screen active. If screenName is empty changes will be applied to all.  \r\n",
       "name": "setSoftedgeVisible",
       "params": [
        {
         "name": "screenName",
         "type": "string"
        },
        {
         "name": "visible",
         "type": "bool"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Reset all color correction\r\n",
       "name": "resetAllColorCorrections",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "et ColorCorrection Value by Path\r\n",
       "name": "setColorCorrectionWithPath",
       "params": [
        {
         "name": "path",
         "type": "string"
        },
        {
         "name": "value",
         "type": "float"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "et ColorCorrection Value by Path\r\n",
       "name": "getColorCorrectionWithPath",
       "params": [
        {
         "name": "path",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "float",
         "type": "float"
        }
       ]
      },
      {
       "documentation": "et colorcorrection with jsonstring\r\n",
       "name": "setColorCorrectionAsJsonString",
       "params": [
        {
         "name": "colorCorrection",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "et colorcorrection as jsonstring\r\n",
       "name": "getColorCorrectionAsJsonString",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "deliver": "Pixera.LiveSystems.Output",
       "documentation": "Get projector output. Index is optional. By default the first output is returned.\r\n",
       "name": "getOutput",
       "params": [
        {
         "name": "index",
         "type": "optional<int>"
        }
       ],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "documentation": "Set projector output.\r\n",
       "name": "setOutput",
       "params": [
        {
         "name": "outputHandle",
         "type": "handle"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Set horizontal lens shift.\r\n",
       "name": "setHorizontalLensShift",
       "params": [
        {
         "name": "value",
         "type": "double"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Get horizontal lens shift.\r\n",
       "name": "getHorizontalLensShift",
       "params": [],
       "returnValues": [
        {
         "name": "double",
         "type": "double"
        }
       ]
      },
      {
       "documentation": "Set vertical lens shift.\r\n",
       "name": "setVerticalLensShift",
       "params": [
        {
         "name": "value",
         "type": "double"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Get vertical lens shift.\r\n",
       "name": "getVerticalLensShift",
       "params": [],
       "returnValues": [
        {
         "name": "double",
         "type": "double"
        }
       ]
      },
      {
       "documentation": "Set brightness.\r\nonly generic Projector can be set\r\n",
       "name": "setBrightness",
       "params": [
        {
         "name": "value",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Get brightness.\r\n",
       "name": "getBrightness",
       "params": [],
       "returnValues": [
        {
         "name": "int",
         "type": "int"
        }
       ]
      },
      {
       "documentation": "Set lens fov.\r\n",
       "name": "setFov",
       "params": [
        {
         "name": "value",
         "type": "double"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Get lens fov.\r\n",
       "name": "getFov",
       "params": [],
       "returnValues": [
        {
         "name": "double",
         "type": "double"
        }
       ]
      },
      {
       "documentation": "Set lens throw Ratio.\r\n",
       "name": "setThrowRatio",
       "params": [
        {
         "name": "value",
         "type": "double"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Get lens throw ratio.\r\n",
       "name": "getThrowRatio",
       "params": [],
       "returnValues": [
        {
         "name": "double",
         "type": "double"
        }
       ]
      },
      {
       "documentation": "Set look at point.\r\nvalues needs to be in meters\r\n",
       "name": "setLookAtPoint",
       "params": [
        {
         "name": "x",
         "type": "double"
        },
        {
         "name": "y",
         "type": "double"
        },
        {
         "name": "z",
         "type": "double"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Get look at point.\r\nvalues are in meters\r\n",
       "name": "getLookAtPoint",
       "params": [],
       "returnValues": [
        {
         "name": "double[]",
         "type": "double[]"
        }
       ]
      },
      {
       "documentation": "Set resolution of projector.\r\nthis can only be set if the projector is not connected to a output.\r\nif it is connected the projector has the resolution of the output.\r\n",
       "name": "setResolution",
       "params": [
        {
         "name": "x",
         "type": "int"
        },
        {
         "name": "y",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "get resolution of projector.\r\n",
       "name": "getResolution",
       "params": [],
       "returnValues": [
        {
         "name": "int[]",
         "type": "int[]"
        }
       ]
      },
      {
       "deliver": "Pixera.Projectors.Projector",
       "name": "getInst",
       "params": [
        {
         "name": "instancePath",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "deliver": "Pixera.Projectors.Projector",
       "name": "getHandleFromInstancePath",
       "params": [
        {
         "name": "instancePath",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "name": "getInstancePath",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      }
     ],
     "name": "Projector"
    }
   ],
   "functions": [
    {
     "deliver": "Pixera.Projectors.Projector",
     "documentation": "Projector name as shown in the inspector.\r\n",
     "name": "getProjectorWithName",
     "params": [
      {
       "name": "name",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "handle",
       "type": "handle"
      }
     ]
    },
    {
     "deliver": "Pixera.Projectors.Projector",
     "documentation": "Returns handles to all screens currently used in the Mapping tab.\r\n",
     "name": "getProjectors",
     "params": [],
     "returnValues": [
      {
       "name": "handle[]",
       "type": "handle[]"
      }
     ]
    },
    {
     "name": "getProjectorNames",
     "params": [],
     "returnValues": [
      {
       "name": "string[]",
       "type": "string[]"
      }
     ]
    }
   ],
   "name": "Projectors",
   "structs": [
    {
     "name": "ProjectorPosValues",
     "params": [
      {
       "name": "x",
       "type": "double"
      },
      {
       "name": "y",
       "type": "double"
      },
      {
       "name": "z",
       "type": "double"
      }
     ]
    }
   ]
  },
  {
   "classes": [
    {
     "methods": [
      {
       "deliver": "Pixera.Resources.ResourceFolder",
       "documentation": "Pixera Control self-reference function.\r\n",
       "name": "ref",
       "params": [],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "name": "getName",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "name": "setName",
       "params": [
        {
         "name": "name",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "deliver": "Pixera.Resources.ResourceFolder",
       "documentation": "Returns the resource folders that are immediate children of this folder.\r\n",
       "name": "getResourceFolders",
       "params": [],
       "returnValues": [
        {
         "name": "handle[]",
         "type": "handle[]"
        }
       ]
      },
      {
       "deliver": "Pixera.Resources.Resource",
       "documentation": "Returns handles to all the resources that are directly in one folder (i.e. does not consider subfolders).\r\n",
       "name": "getResources",
       "params": [],
       "returnValues": [
        {
         "name": "handle[]",
         "type": "handle[]"
        }
       ]
      },
      {
       "deliver": "Pixera.Resources.Resource",
       "documentation": "Returns a handle to a resource in the current folder at index\r\n",
       "name": "getResourceAtIndex",
       "params": [
        {
         "name": "index",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "deliver": "Pixera.Resources.Resource",
       "documentation": "Returns a handle to a resource in the current folder by name\r\n",
       "name": "getResourceByName",
       "params": [
        {
         "name": "name",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "deliver": "Pixera.Resources.Resource",
       "documentation": "Adds the file at the path to the folder.\r\n",
       "name": "addResource",
       "params": [
        {
         "name": "path",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "deliver": "Pixera.Resources.Resource",
       "documentation": "Adds the files at the directory path to the folder. If checkRedundancy == true then only files that have names\r\nthat are not currently in the folder are added. If remoteOthers == true then the missing files in the folder are removed, assets are untouched\r\n",
       "name": "addResourcesFromDirectory",
       "params": [
        {
         "name": "path",
         "type": "string"
        },
        {
         "name": "removeOthers",
         "type": "bool"
        },
        {
         "name": "checkRedundancy",
         "type": "bool"
        }
       ],
       "returnValues": [
        {
         "name": "handle[]",
         "type": "handle[]"
        }
       ]
      },
      {
       "deliver": "Pixera.Resources.Resource",
       "documentation": "Adds the files at the directory path to the folder. If checkRedundancy == true then only files that have names\r\nthat are not currently in the folder are added. If remoteOthers == true then the missing files in the folder are removed, assets are also removed\r\n",
       "name": "addResourcesFromDirectoryRemoveAssets",
       "params": [
        {
         "name": "path",
         "type": "string"
        },
        {
         "name": "removeOthers",
         "type": "bool"
        },
        {
         "name": "checkRedundancy",
         "type": "bool"
        }
       ],
       "returnValues": [
        {
         "name": "handle[]",
         "type": "handle[]"
        }
       ]
      },
      {
       "deliver": "Pixera.Resources.Resource",
       "documentation": "reates and adds a text(0), colour(1), web(2), timelinereference(3) or multi(4) resource.\r\n",
       "name": "addInternalResource",
       "params": [
        {
         "name": "signature",
         "type": "string"
        },
        {
         "name": "resKind",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "documentation": "Creates folders hierarchically for a path as children of the specified folder.\r\nFor example if you call this against the handle of the \"Media\" folder with a path like:\r\n\"/my/new/folders\", it will result in the following structure: \"Media/my/new/folders\".\r\n",
       "name": "createFoldersFrom",
       "params": [
        {
         "name": "path",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Reloads for all resources in folder the files from disk, distributes changed files and creates new preview.\r\n",
       "name": "refreshResources",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Reloads for all resources in folder the files from disk, distributes changed files and creates new preview.\r\n",
       "name": "moveResourceToThis",
       "params": [
        {
         "name": "id",
         "type": "double"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "removeThis",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "removeThisIncludingAssets",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "removeAllContents",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "removeAllContentsIncludingAssets",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "deleteAllContentsAssetsFromLiveSystem",
       "params": [
        {
         "name": "apEntityLiveSystemHandle",
         "type": "handle"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Resets distribution targets based on the file distribution settings and if needed distributes resource.\r\n",
       "name": "resetDistributionTargets",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Changes the state of a distribution target of a resource.\r\n",
       "name": "changeDistributionTarget",
       "params": [
        {
         "name": "apEntityLiveSystemHandle",
         "type": "handle"
        },
        {
         "name": "shouldDistribute",
         "type": "bool"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "replaceResourcesByString",
       "params": [
        {
         "name": "searchString",
         "type": "string"
        },
        {
         "name": "replaceString",
         "type": "string"
        },
        {
         "name": "path",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "deliver": "Pixera.Resources.ResourceFolder",
       "name": "getInst",
       "params": [
        {
         "name": "instancePath",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "deliver": "Pixera.Resources.ResourceFolder",
       "name": "getHandleFromInstancePath",
       "params": [
        {
         "name": "instancePath",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "name": "getInstancePath",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "name": "getDmxId",
       "params": [],
       "returnValues": [
        {
         "name": "int",
         "type": "int"
        }
       ]
      },
      {
       "documentation": "Get DMX Id of both the resource and its parent folder as:<br>\r\nFolder Id << 16, Resource Id.\r\n",
       "name": "getCombinedDmxId",
       "params": [],
       "returnValues": [
        {
         "name": "int",
         "type": "int"
        }
       ]
      },
      {
       "name": "setDmxId",
       "params": [
        {
         "name": "id",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      }
     ],
     "name": "ResourceFolder"
    },
    {
     "methods": [
      {
       "name": "getUsedTranscodingPreset",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "name": "setUsedTranscodingPreset",
       "params": [
        {
         "name": "preset",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "getTranscodeAutomatically",
       "params": [],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "name": "setTranscodeAutomatically",
       "params": [
        {
         "name": "autoTranscode",
         "type": "bool"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "getUseRxCacheAsDestination",
       "params": [],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "name": "setRxCacheAsDestination",
       "params": [
        {
         "name": "useRxCache",
         "type": "bool"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "getDestinationDirectory",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "name": "setDestinationDirectory",
       "params": [
        {
         "name": "path",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      }
     ],
     "name": "TranscodingFolder"
    },
    {
     "methods": [
      {
       "deliver": "Pixera.Resources.Resource",
       "documentation": "Pixera Control self-reference function.\r\n",
       "name": "ref",
       "params": [],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "documentation": "Removes the resource.\r\n",
       "name": "removeThis",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Permanently removes the assets associated with the resource from all systems\r\non which they are stored.\r\n",
       "filter": "Video,ImageSequence,Image,Audio,Unknown",
       "name": "deleteFilesOnSystems",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Removes the resource and permanently removes the assets associated with it from\r\nall systems on which they are stored.\r\n",
       "name": "removeThisIncludingAssets",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Permanently removes the asset from the given live system.\r\n",
       "filter": "Video,ImageSequence,Image,Audio,Unknown",
       "name": "deleteAssetFromLiveSystem",
       "params": [
        {
         "name": "apEntityLiveSystemHandle",
         "type": "handle"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Resets distribution targets based on the file distribution settings and if needed distributes resource.\r\n",
       "filter": "Video,ImageSequence,Image,Audio,Unknown",
       "name": "resetDistributionTargets",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Changes the state of a distribution target of a resource.\r\n",
       "filter": "Video,ImageSequence,Image,Audio,Unknown",
       "name": "changeDistributionTarget",
       "params": [
        {
         "name": "apEntityLiveSystemHandle",
         "type": "handle"
        },
        {
         "name": "shouldDistribute",
         "type": "bool"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "getName",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "filter": "Video,ImageSequence,Image,Audio,LiveInput,Color,WebBrowser,LayerRef,MultiRes,Compositing,Text,Unknown",
       "name": "setName",
       "params": [
        {
         "name": "name",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "filter": "Video,ImageSequence,Image,Audio,LiveInput,Unknown",
       "name": "getFps",
       "params": [],
       "returnValues": [
        {
         "name": "double",
         "type": "double"
        }
       ]
      },
      {
       "filter": "Video,ImageSequence,Image,Audio,LiveInput,Color,WebBrowser,LayerRef,MultiRes,3DModel,Unknown",
       "name": "getResolution",
       "params": [],
       "returnValues": [
        {
         "name": "double[]",
         "type": "double[]"
        }
       ]
      },
      {
       "documentation": "Returns the active state of a Live Input Resource\r\n",
       "filter": "LiveInput,Unknown",
       "name": "getIsActive",
       "params": [],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "documentation": "Returns list of available Video Modes of a Live Input Resource,\r\nnot all Live Input Resources have a list of modes.\r\n",
       "filter": "LiveInput,Unknown",
       "name": "getVideoStreamModes",
       "params": [],
       "returnValues": [
        {
         "name": "string[]",
         "type": "string[]"
        }
       ]
      },
      {
       "documentation": "Set the Video Mode of a Live Input Resource by it's index.\r\n",
       "filter": "LiveInput,Unknown",
       "name": "setVideoStreamMode",
       "params": [
        {
         "name": "index",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Returns an id based on the handle. This is currently necessary in some situations\r\nbecause some API implementations can not yet consume handles as parameters.\r\n",
       "name": "getId",
       "params": [],
       "returnValues": [
        {
         "name": "double",
         "type": "double"
        }
       ]
      },
      {
       "documentation": "Returns the duration of the resource in seconds.\r\n",
       "filter": "Video,ImageSequence,Image,Audio,Unknown",
       "name": "getDuration",
       "params": [],
       "returnValues": [
        {
         "name": "double",
         "type": "double"
        }
       ]
      },
      {
       "documentation": "Returns the type of the resource.\r\n",
       "name": "getType",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "filter": "Video,ImageSequence,Image,Audio,Compositing,Unknown",
       "name": "setCurrentVersion",
       "params": [
        {
         "name": "version",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "filter": "Video,ImageSequence,Image,Audio,Compositing,Unknown",
       "name": "getCurrentVersion",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "filter": "Video,ImageSequence,Image,Audio,Compositing,Unknown",
       "name": "getVersions",
       "params": [],
       "returnValues": [
        {
         "name": "string[]",
         "type": "string[]"
        }
       ]
      },
      {
       "documentation": "et Version Suffix, First is begin\r\n",
       "filter": "Video,ImageSequence,Image,Audio,Compositing,Unknown",
       "name": "getVersionSuffix",
       "params": [],
       "returnValues": [
        {
         "name": "string[]",
         "type": "string[]"
        }
       ]
      },
      {
       "documentation": "et start suffex for versions\r\n",
       "filter": "Video,ImageSequence,Image,Audio,Compositing,Unknown",
       "name": "rescanVersions",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Returns the png thumbnail data of the resource in a base 64 string. This is the\r\nimage that is shown in the resource tree. Its resolution is currently 256 * 174\r\npixels.\r\n",
       "name": "getThumbnailAsBase64",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "filter": "Video,ImageSequence,Image,Audio,Compositing,3DModel,FX,Unknown",
       "name": "getHasPendingTransfer",
       "params": [],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "documentation": "Returns true if the resource is currently referred to in a timeline\r\n(via a clip or a dominant value).\r\n",
       "name": "getIsInUse",
       "params": [],
       "returnValues": [
        {
         "name": "double",
         "type": "double"
        }
       ]
      },
      {
       "documentation": "Returns the time the resource was first referred to in a timeline (via a clip or a dominant\r\nvalue) in milliseconds since midnight Jan 1st 1970 UTC. If the time is zero then the resource\r\nhas not been used yet in any timeline.\r\n",
       "name": "getLastUsageBeginTime",
       "params": [],
       "returnValues": [
        {
         "name": "double",
         "type": "double"
        }
       ]
      },
      {
       "documentation": "Returns the time the resource was first referred to in a timeline (via a clip or a dominant\r\nvalue) as an ISO-8601 string (using the local timezone). If the string is empty then the resource\r\nhas not been used yet in any timeline.\r\n",
       "name": "getLastUsageBeginTimeAsString",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "documentation": "Returns the time the resource was removed from the last timeline (whether from a clip or\r\na dominant value) in milliseconds since midnight Jan 1st 1970 UTC. If the time is zero then\r\nthe resource was either never used at all or is still in use.\r\n",
       "name": "getLastUsageEndTime",
       "params": [],
       "returnValues": [
        {
         "name": "double",
         "type": "double"
        }
       ]
      },
      {
       "documentation": "Returns the time the resource was removed from the last timeline (whether from a clip or\r\na dominant value) as an ISO-8601 string (using the local timezone). If the time is zero then\r\nthe resource was either never used at all or is still in use.\r\n",
       "name": "getLastUsageEndTimeAsString",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "documentation": "get the system filepath\r\n",
       "filter": "Video,ImageSequence,Image,Audio,Compositing,3DModel,FX,Unknown",
       "name": "getFilePath",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "documentation": "Sets the text of a text input resource.\r\n",
       "filter": "Text,Unknown",
       "name": "setText",
       "params": [
        {
         "name": "text",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Returns the text of a text input resource.\r\n",
       "filter": "Text,Unknown",
       "name": "getText",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "filter": "Text,Unknown",
       "name": "setFontWithName",
       "params": [
        {
         "name": "fontName",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "filter": "Text,Unknown",
       "name": "getFontName",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "filter": "Text,Unknown",
       "name": "setFontWithPath",
       "params": [
        {
         "name": "fontPath",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "documentation": "0 : Align Left<br>\r\n1 : Align Center<br>\r\n2 : Align Right\r\n",
       "filter": "Text,Unknown",
       "name": "setHorizontalTextAlignment",
       "params": [
        {
         "name": "textAlignment",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "documentation": "0 : Align Top<br>\r\n1 : Align Center<br>\r\n2 : Align Bottom<br>\r\n",
       "filter": "Text,Unknown",
       "name": "getHorizontalTextAlignment",
       "params": [],
       "returnValues": [
        {
         "name": "int",
         "type": "int"
        }
       ]
      },
      {
       "filter": "Text,Unknown",
       "name": "setVerticalTextAlignment",
       "params": [
        {
         "name": "textAlignment",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "filter": "Text,Unknown",
       "name": "getVerticalTextAlignment",
       "params": [],
       "returnValues": [
        {
         "name": "int",
         "type": "int"
        }
       ]
      },
      {
       "filter": "Text,Unknown",
       "name": "setLineHeight",
       "params": [
        {
         "name": "lineHeight",
         "type": "double"
        }
       ],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "filter": "Text,Unknown",
       "name": "getLineHeight",
       "params": [],
       "returnValues": [
        {
         "name": "double",
         "type": "double"
        }
       ]
      },
      {
       "documentation": "Returns the text-measurements width and height of the rectangle enclosing the text. The first entry of the\r\nreturned vector represents width, the second one represents height. Unit is pixels.\r\n",
       "filter": "Text",
       "name": "getTextMeasurementsWidthAndHeight",
       "params": [],
       "returnValues": [
        {
         "name": "int[]",
         "type": "int[]"
        }
       ]
      },
      {
       "documentation": "Sets the url of a web browser resource.\r\n",
       "filter": "WebBrowser,Unknown",
       "name": "setUrl",
       "params": [
        {
         "name": "url",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Returns the url of a web browser resource.\r\n",
       "filter": "WebBrowser,Unknown",
       "name": "getUrl",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "documentation": "Sets the path to a color transformation file to be used with the resource.\r\n",
       "name": "setColorTransformPath",
       "params": [
        {
         "name": "colorTransformPath",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Returns the path of the color transformation file be used with the resource.\r\n",
       "name": "getColorTransformPath",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "documentation": "Clear the path to a color transformation file.\r\n",
       "name": "clearColorTransformPath",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Reloads the file from disk, distributes changed files and creates new preview.\r\n",
       "name": "refresh",
       "params": [
        {
         "name": "text",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Distribute the file to clients.\r\n",
       "filter": "Video,ImageSequence,Image,Audio,Compositing,3DModel,FX,Unknown",
       "name": "distribute",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Get the id used to access the resource through dmx.\r\n",
       "filter": "Video,ImageSequence,Image,Audio,Compositing,3DModel,Unknown",
       "name": "getDmxId",
       "params": [],
       "returnValues": [
        {
         "name": "int",
         "type": "int"
        }
       ]
      },
      {
       "documentation": "Set the id used to access the resource through dmx.\r\n",
       "filter": "Video,ImageSequence,Image,Audio,Compositing,3DModel,Unknown",
       "name": "setDmxId",
       "params": [
        {
         "name": "id",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Remove multiresource item at index\r\n",
       "filter": "MultiRes,Unknown",
       "name": "removeMultiresourceIndex",
       "params": [
        {
         "name": "index",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Add multiresource item\r\n",
       "filter": "MultiRes,Unknown",
       "name": "addMultiresourceItem",
       "params": [
        {
         "name": "id",
         "type": "double"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "deliver": "Pixera.Resources.Resource",
       "documentation": "Get multiresource items\r\n",
       "filter": "MultiRes,Unknown",
       "name": "getMultiresourceItems",
       "params": [],
       "returnValues": [
        {
         "name": "handle[]",
         "type": "handle[]"
        }
       ]
      },
      {
       "documentation": "replace multiresource item at index\r\n",
       "filter": "MultiRes,Unknown",
       "name": "replaceMultiresourceItemByIndex",
       "params": [
        {
         "name": "index",
         "type": "int"
        },
        {
         "name": "id",
         "type": "double"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Set multiresource resolution\r\n",
       "filter": "MultiRes,Unknown",
       "name": "setMultiresourceResolution",
       "params": [
        {
         "name": "width",
         "type": "int"
        },
        {
         "name": "height",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Set multiresource items size. (1.0 = full)\r\n",
       "filter": "MultiRes,Unknown",
       "name": "setMultiresourceItemSizebyIndex",
       "params": [
        {
         "name": "index",
         "type": "int"
        },
        {
         "name": "width",
         "type": "double"
        },
        {
         "name": "height",
         "type": "double"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Set multiresource items position.\r\n",
       "filter": "MultiRes,Unknown",
       "name": "setMultiresourceItemPositionbyIndex",
       "params": [
        {
         "name": "index",
         "type": "int"
        },
        {
         "name": "x",
         "type": "double"
        },
        {
         "name": "y",
         "type": "double"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Sets a color resource to show a gradient between its assigned colors.\r\n",
       "filter": "Color,Unknown",
       "name": "setUseGradient",
       "params": [
        {
         "name": "useGradient",
         "type": "bool"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Get if a color resource uses a gradient.\r\n",
       "filter": "Color,Unknown",
       "name": "getUseGradient",
       "params": [],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "documentation": "Set multiple colors for a color resource.\r\nColor format is ARGB encoded in one 32 bit integer\r\nwhere a << 24, r << 16, g << 8, b << 0.\r\n",
       "filter": "Color,Unknown",
       "name": "setColors",
       "params": [
        {
         "name": "argbCols",
         "type": "uint[]"
        },
        {
         "name": "positions",
         "type": "double[]"
        },
        {
         "name": "colNames",
         "type": "string[]"
        },
        {
         "name": "useGradient",
         "type": "optional<bool>"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Set one color of a color resource.<br>\r\nIf index does not exist the color will be appended to the end of the color list.\r\n",
       "filter": "Color,Unknown",
       "name": "setColorAtIndex",
       "params": [
        {
         "name": "index",
         "type": "int"
        },
        {
         "name": "red",
         "type": "int"
        },
        {
         "name": "green",
         "type": "int"
        },
        {
         "name": "blue",
         "type": "int"
        },
        {
         "name": "alpha",
         "type": "int"
        },
        {
         "name": "position",
         "type": "double"
        },
        {
         "name": "name",
         "type": "string"
        },
        {
         "name": "useGradient",
         "type": "optional<bool>"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Get color value as ARGB in a single 32 bit integer\r\nwhere a << 24, r << 16, g << 8, b << 0.\r\n",
       "filter": "Color,Unknown",
       "name": "getColorAtIndex",
       "params": [
        {
         "name": "colorIndex",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "int",
         "type": "int"
        }
       ]
      },
      {
       "filter": "Color,Unknown",
       "name": "getColorPositionAtIndex",
       "params": [
        {
         "name": "colorIndex",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "double",
         "type": "double"
        }
       ]
      },
      {
       "documentation": "action = run for launch\r\naction = kill for kill\r\n",
       "filter": "Compositing,Unknown",
       "name": "launchVirtualWorld",
       "params": [
        {
         "name": "action",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "deliver": "Pixera.Resources.UnrealWorld",
       "filter": "Compositing,Unknown",
       "name": "getUnrealWorld",
       "params": [],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "documentation": "Sets the restrict to specific services state and the list of IPs of the services.\r\n",
       "filter": "MultiRes,Unknown",
       "name": "setMultiResourceItemRestrictedServiceIps",
       "params": [
        {
         "name": "itemIndex",
         "type": "int"
        },
        {
         "name": "ipAdresses",
         "type": "string[]"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Returns the list of restricted service IPs in a comma separated string.\r\n",
       "filter": "MultiRes,Unknown",
       "name": "getMultiResourceItemRestrictedServiceIps",
       "params": [
        {
         "name": "itemIndex",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "string[]",
         "type": "string[]"
        }
       ]
      },
      {
       "filter": "Video,ImageSequence,Image,Audio,Compositing,3DModel,FX,Unknown",
       "name": "replace",
       "params": [
        {
         "name": "path",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "deliver": "Pixera.Resources.Resource",
       "name": "getInst",
       "params": [
        {
         "name": "instancePath",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "deliver": "Pixera.Resources.Resource",
       "name": "getHandleFromInstancePath",
       "params": [
        {
         "name": "instancePath",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "name": "getInstancePath",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "documentation": "Search for a transcoding preset with the given name, and if found,\r\nmoves the resource to the transcoding folder and starts transcoding it with that preset\r\nif you want to convert all frames, set 0 as start and -1 as end frame.<br>\r\nserviceId is currently not used.\r\n",
       "filter": "Video,ImageSequence,Image,Audio,Unknown",
       "name": "transcodeWithExisitngPreset",
       "params": [
        {
         "name": "presetName",
         "type": "string"
        },
        {
         "name": "useRxCache",
         "type": "bool"
        },
        {
         "name": "destinationPath",
         "type": "string"
        },
        {
         "name": "startFrame",
         "type": "int"
        },
        {
         "name": "endFrame",
         "type": "int"
        },
        {
         "name": "serviceId",
         "type": "uint"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Move the resource to the transcoding folder and start transcoding with a preset\r\nin JSON format. See \"Transcoding::addOrChangePreset\" on how to build the JSON string\r\n",
       "filter": "Video,ImageSequence,Image,Audio,Unknown",
       "name": "transcodeWithSettings",
       "params": [
        {
         "name": "settings",
         "type": "string"
        },
        {
         "name": "useRxCache",
         "type": "bool"
        },
        {
         "name": "destinationPath",
         "type": "string"
        },
        {
         "name": "startFrame",
         "type": "int"
        },
        {
         "name": "endFrame",
         "type": "int"
        },
        {
         "name": "serviceId",
         "type": "uint"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "filter": "Video,ImageSequence,Image,Audio,Unknown",
       "name": "moveToTranscodingFolder",
       "params": [
        {
         "name": "folderPath",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      }
     ],
     "name": "Resource"
    },
    {
     "methods": [
      {
       "name": "getLevelNames",
       "params": [],
       "returnValues": [
        {
         "name": "string[]",
         "type": "string[]"
        }
       ]
      },
      {
       "name": "loadLevel",
       "params": [
        {
         "name": "levelName",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "getEventTriggerNames",
       "params": [],
       "returnValues": [
        {
         "name": "string[]",
         "type": "string[]"
        }
       ]
      },
      {
       "name": "triggerEventByName",
       "params": [
        {
         "name": "triggerName",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "createNDisplayConfig",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "runUnreal",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "killUnreal",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "getName",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "deliver": "Pixera.Resources.UnrealWorld",
       "name": "getInst",
       "params": [
        {
         "name": "instancePath",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "deliver": "Pixera.Resources.UnrealWorld",
       "name": "getHandleFromInstancePath",
       "params": [
        {
         "name": "instancePath",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "name": "getInstancePath",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      }
     ],
     "name": "UnrealWorld"
    }
   ],
   "functions": [
    {
     "deliver": "Pixera.Resources.Resource",
     "documentation": "Returns handles to all resources (including within subfolders) in the resource\r\ntree in the Compositing tab.\r\n",
     "name": "getResources",
     "params": [],
     "returnValues": [
      {
       "name": "handle[]",
       "type": "handle[]"
      }
     ]
    },
    {
     "deliver": "Pixera.Resources.ResourceFolder",
     "documentation": "Returns a handle to a folder in the resource tree. The namePath\r\nspecifies the folder by starting from the root and then listing\r\nall the names as seen in the resources tree separated by forward\r\nslashes, e.g. \"Media/Std Backgrounds/Atmospherics\".\r\n",
     "name": "getResourceFolderWithNamePath",
     "params": [
      {
       "name": "namePath",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "handle",
       "type": "handle"
      }
     ]
    },
    {
     "deliver": "Pixera.Resources.ResourceFolder",
     "documentation": "Returns the top level resource folders.\r\n",
     "name": "getResourceFolders",
     "params": [],
     "returnValues": [
      {
       "name": "handle[]",
       "type": "handle[]"
      }
     ]
    },
    {
     "deliver": "Pixera.Resources.TranscodingFolder",
     "name": "getTranscodingFolders",
     "params": [],
     "returnValues": [
      {
       "name": "handle[]",
       "type": "handle[]"
      }
     ]
    },
    {
     "name": "getJsonDescrip",
     "params": [],
     "returnValues": [
      {
       "name": "string",
       "type": "string"
      }
     ]
    }
   ],
   "name": "Resources"
  },
  {
   "classes": [
    {
     "methods": [
      {
       "deliver": "Pixera.Timelines.Timeline",
       "documentation": "Pixera Control self-reference function.\r\n",
       "name": "ref",
       "params": [],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "documentation": "Removes the timeline.\r\n",
       "name": "removeThis",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "deliver": "Pixera.Timelines.Timeline",
       "documentation": "Duplicate the timeline. withoutClipsCues is optional and on default false\r\n",
       "name": "duplicateThis",
       "params": [
        {
         "name": "withoutClipsCues",
         "type": "optional<bool>"
        }
       ],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "documentation": "Select the timeline.\r\n",
       "name": "selectThis",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Get zoom factor of the timeline.\r\n",
       "name": "getZoomFactor",
       "params": [],
       "returnValues": [
        {
         "name": "double",
         "type": "double"
        }
       ]
      },
      {
       "documentation": "Set zoom factor of the timeline.\r\n",
       "name": "setZoomFactor",
       "params": [
        {
         "name": "zoomFactor",
         "type": "double"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Get vertical scroll offset of the timeline.\r\n",
       "name": "getVerticalScrollOffset",
       "params": [],
       "returnValues": [
        {
         "name": "int",
         "type": "int"
        }
       ]
      },
      {
       "documentation": "Get vertical scroll offset of the timeline.\r\n",
       "name": "setVerticalScrollOffset",
       "params": [
        {
         "name": "offset",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Get vertical scroll offset of the timeline.\r\n",
       "name": "getHorizontalScrollOffset",
       "params": [],
       "returnValues": [
        {
         "name": "int",
         "type": "int"
        }
       ]
      },
      {
       "documentation": "Get vertical scroll offset of the timeline.\r\n",
       "name": "setHorizontalScrollOffset",
       "params": [
        {
         "name": "offset",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Moves the timeline up or down in the render order, depending on whether moveDown is true.\r\n",
       "name": "moveInRenderOrder",
       "params": [
        {
         "name": "moveDown",
         "type": "bool"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "setRenderOrder",
       "params": [
        {
         "name": "index",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "getRenderOrder",
       "params": [],
       "returnValues": [
        {
         "name": "int",
         "type": "int"
        }
       ]
      },
      {
       "deliver": "Pixera.Timelines.Layer",
       "documentation": "Returns handles to all layers of the timeline.\r\n",
       "name": "getLayers",
       "params": [],
       "returnValues": [
        {
         "name": "handle[]",
         "type": "handle[]"
        }
       ]
      },
      {
       "deliver": "Pixera.Timelines.Layer",
       "documentation": "Returns the handle from a layer with name.\r\n",
       "name": "getLayerFromName",
       "params": [
        {
         "name": "name",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "documentation": "Returns names to all layers of the timeline.\r\n",
       "name": "getLayerNames",
       "params": [],
       "returnValues": [
        {
         "name": "string[]",
         "type": "string[]"
        }
       ]
      },
      {
       "deliver": "Pixera.Timelines.Layer",
       "documentation": "Returns handles to all selected layers of the timeline.\r\n",
       "name": "getLayersSelected",
       "params": [],
       "returnValues": [
        {
         "name": "handle[]",
         "type": "handle[]"
        }
       ]
      },
      {
       "documentation": "Select Layer by index of the timeline.\r\n",
       "name": "selectLayerByIndex",
       "params": [
        {
         "name": "index",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Select Layers of the timeline by Names.\r\n",
       "name": "selectLayerByNames",
       "params": [
        {
         "name": "layerNames",
         "type": "string[]"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "deliver": "Pixera.Timelines.Layer",
       "documentation": "Returns a handle to the layer in the timeline at the (zero-based) index in\r\nthe order as shown in the Pixera Timeline interface.\r\n",
       "name": "getLayerAtIndex",
       "params": [
        {
         "name": "index",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "deliver": "Pixera.Timelines.Layer",
       "documentation": "Creates a layer and returns a handle to it.\r\n",
       "name": "createLayer",
       "params": [],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "documentation": "Batch-create clips on multiple layers.\r\n",
       "name": "createClipsFromJsonString",
       "params": [
        {
         "name": "jsonString",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "documentation": "Batch-remove clips as efficiently as possible.\r\n",
       "name": "removeClipsFromJsonString",
       "params": [
        {
         "name": "jsonString",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "getCueInfosAsJsonString",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "deliver": "Pixera.Timelines.Cue",
       "documentation": "Returns the handles of all cues in chronological order.\r\n",
       "name": "getCues",
       "params": [],
       "returnValues": [
        {
         "name": "handle[]",
         "type": "handle[]"
        }
       ]
      },
      {
       "deliver": "Pixera.Timelines.Cue",
       "name": "getCuesSelected",
       "params": [],
       "returnValues": [
        {
         "name": "handle[]",
         "type": "handle[]"
        }
       ]
      },
      {
       "documentation": "Returns names to all cues.\r\n",
       "name": "getCueNames",
       "params": [],
       "returnValues": [
        {
         "name": "string[]",
         "type": "string[]"
        }
       ]
      },
      {
       "deliver": "Pixera.Timelines.Cue",
       "documentation": "Returns the handle of the cue with the given index. \r\nIndices are in chronological order.\r\n",
       "name": "getCueAtIndex",
       "params": [
        {
         "name": "index",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "deliver": "Pixera.Timelines.Cue",
       "documentation": "Returns the handle of the cue with the given name.\r\nIf multiple cues have the same name, the handle to the first match will be returned.<br>\r\nname: name of cue<br>\r\n",
       "name": "getCueFromName",
       "params": [
        {
         "name": "name",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "deliver": "Pixera.Timelines.Cue",
       "documentation": "Returns the handle of the cue with the given number.\r\nIf multiple cues have the same number, the handle to the first match will be returned.<br>\r\nnumber: number of cue<br>\r\n",
       "name": "getCueFromNumber",
       "params": [
        {
         "name": "number",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "documentation": "Jumps to and executes the cue with the given name.<br>\r\nname: name of cue<br>\r\nblendDuration: optional parameter to set blend duration in seconds.\r\n",
       "name": "applyCueWithName",
       "params": [
        {
         "name": "name",
         "type": "string"
        },
        {
         "name": "blendDuration",
         "type": "optional<double>"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Jumps to and executes the cue with the given number.<br>\r\nnumber: number of cue<br>\r\nblendDuration: optional parameter to set blend duration in seconds.\r\n",
       "name": "applyCueWithNumber",
       "params": [
        {
         "name": "number",
         "type": "int"
        },
        {
         "name": "blendDuration",
         "type": "optional<double>"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "deliver": "Pixera.Timelines.Cue",
       "documentation": "Creates a cue and returns its handle.<br>\r\nname: Name of the cue<br>\r\ntimeInFrames: Time on timeline in total frames<br>\r\noperation:<br>\r\n1:Play<br>\r\n2:Pause<br>\r\n3:Jump<br>\r\n4:Stop\r\n",
       "name": "createCue",
       "params": [
        {
         "name": "name",
         "type": "string"
        },
        {
         "name": "timeInFrames",
         "type": "double"
        },
        {
         "name": "operation",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "documentation": "Removes all cues.\r\n",
       "name": "removeCues",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Create pause cue before selected clips\r\n",
       "name": "createPauseCueBeforeSelectedClips",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Starts the timeline at the current time.\r\n",
       "name": "play",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Pauses the timeline at the current time.\r\n",
       "name": "pause",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Stops the timeline.\r\n",
       "name": "stop",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Toggles the timeline transport mode between play and pause.\r\n",
       "name": "toggleTransport",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Stores all domination values. I.e. events are created at the current time.\r\n",
       "name": "store",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Resets all domination values.\r\n",
       "name": "reset",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Returns the attributes of the timeline (see TimelineAttributes struct).\r\n",
       "name": "getAttributes",
       "params": [],
       "returnValues": [
        {
         "name": "TimelineAttributes",
         "type": "TimelineAttributes"
        }
       ]
      },
      {
       "documentation": "Sets the current time in frames. Use getFps(.) to relate the frames to seconds.<br>\r\nThis method is deprecated. setCurrentTime(int time) should be used instead.<br>\r\ntime: Time in frames.\r\n",
       "name": "setCurrentFrame",
       "params": [
        {
         "name": "time",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "documentation": "Sets the current time in frames. Use getFps() to relate the frames to seconds.<br>\r\ntime: Time in frames.\r\n",
       "name": "setCurrentTime",
       "params": [
        {
         "name": "time",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Returns the current time in frames. Use getFps() to relate the frames to seconds.\r\n",
       "name": "getCurrentTime",
       "params": [],
       "returnValues": [
        {
         "name": "int",
         "type": "int"
        }
       ]
      },
      {
       "documentation": "Scrub frames up or down from current time.\r\n",
       "name": "scrubCurrentTime",
       "params": [
        {
         "name": "frames",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Returns the current time and allows to change it.<br>\r\nIf the parameter doSet is equal to true, the timeline time is set to the value of the parameter time.\r\nTime unit is frames.<br>\r\ntime: Time in frames.\r\ndoSet: Determines whether the timeline time is changed to parameter time.\r\n",
       "name": "CurrentTime",
       "params": [
        {
         "name": "time",
         "type": "int"
        },
        {
         "name": "doSet",
         "type": "bool"
        }
       ],
       "returnValues": [
        {
         "name": "int",
         "type": "int"
        }
       ]
      },
      {
       "documentation": "Returns the current time as a hours, minutes, seconds, frames string.\r\n",
       "name": "getCurrentHMSF",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "documentation": "Sets the transport mode of the timeline.<br>\r\nMode Parameter: Play = 1, Pause = 2, Stop = 3.\r\n",
       "name": "setTransportMode",
       "params": [
        {
         "name": "mode",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "documentation": "Returns the transport mode of the timeline.<br>\r\nReturn values: Play = 1, Pause = 2, Stop = 3.\r\n",
       "name": "getTransportMode",
       "params": [],
       "returnValues": [
        {
         "name": "int",
         "type": "int"
        }
       ]
      },
      {
       "documentation": "Set timecode input for midi and artnet timecode.\r\n",
       "name": "setTimecodeInput",
       "params": [
        {
         "name": "hour",
         "type": "int"
        },
        {
         "name": "minute",
         "type": "int"
        },
        {
         "name": "second",
         "type": "int"
        },
        {
         "name": "frame",
         "type": "int"
        },
        {
         "name": "elapsedTime",
         "type": "double"
        },
        {
         "name": "running",
         "type": "bool"
        },
        {
         "name": "freshMode",
         "type": "int"
        },
        {
         "name": "stateToken",
         "type": "int"
        },
        {
         "name": "format",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "double",
         "type": "double"
        }
       ]
      },
      {
       "documentation": "Returns the frames per second value used as a time base.\r\n",
       "name": "getFps",
       "params": [],
       "returnValues": [
        {
         "name": "double",
         "type": "double"
        }
       ]
      },
      {
       "documentation": "Returns the name of the timeline with the given handle.\r\n",
       "name": "getName",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "documentation": "Rename the timeline.\r\n",
       "name": "setName",
       "params": [
        {
         "name": "name",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Moves to next cue on timeline\r\n",
       "name": "moveToNextCue",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Moves to next cue on timeline and ignores cue properties.\r\n",
       "name": "moveToNextCueIgnoreProperties",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "deliver": "Pixera.Timelines.Cue",
       "documentation": "Returns handle to next cue on timeline.\r\n",
       "name": "getCueNext",
       "params": [],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "documentation": "Moves to previous cue on timeline.\r\n",
       "name": "moveToPreviousCue",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Moves to previous cue on timeline and ignore cue properties\r\n",
       "name": "moveToPreviousCueIgnoreProperties",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "deliver": "Pixera.Timelines.Cue",
       "documentation": "Returns previous cue on timeline.\r\n",
       "name": "getCuePrevious",
       "params": [],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "documentation": "Sets the next cue to be ignored when its reached.\r\n",
       "name": "ignoreNextCue",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Sets next cue with a specific operation to be ignored when reached.<br>\r\n1: Play<br>\r\n2: Pause<br>\r\n3: Stop<br>\r\n4: Jump\r\n",
       "name": "ignoreNextCueWithOperation",
       "params": [
        {
         "name": "cueOperation",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Fades between current and goal time. Time unit is frames.<br>\r\nif preloadDelayInMilliseconds is not set system fade to time delay is used\r\n",
       "name": "blendToTime",
       "params": [
        {
         "name": "goalTime",
         "type": "double"
        },
        {
         "name": "blendDuration",
         "type": "double"
        },
        {
         "name": "preloadDelayInMilliseconds",
         "type": "optional<int>"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Fades between current and goal time. Time unit is frames. The transport mode at goal time is set to\r\nplay (transportMode = 1) or pause (transportMode = 2).<br>\r\nif preloadDelayInMilliseconds is not set system fade to time delay is used\r\n",
       "name": "blendToTimeWithTransportMode",
       "params": [
        {
         "name": "goalTime",
         "type": "double"
        },
        {
         "name": "blendDuration",
         "type": "double"
        },
        {
         "name": "transportMode",
         "type": "int"
        },
        {
         "name": "preloadDelayInMilliseconds",
         "type": "optional<int>"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Sets the blend-to-time mode.<br>\r\n1: Cross fade<br>\r\n2: Dip to transparent\r\n",
       "name": "setBlendToTimeMode",
       "params": [
        {
         "name": "mode",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "documentation": "Sets the speed factor. The value of 'factor' has to be larger than 0. Use this method carefully.\r\nTo manipulate playback speed we recommend to use setTransportAttributes(.) for the \"Transport\"\r\nparameters of each layer.\r\n",
       "name": "setSpeedFactor",
       "params": [
        {
         "name": "factor",
         "type": "double"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Returns the speed factor.\r\n",
       "name": "getSpeedFactor",
       "params": [],
       "returnValues": [
        {
         "name": "double",
         "type": "double"
        }
       ]
      },
      {
       "documentation": "Sets the opacity value.<br>\r\nvalue: opacity value between 0.0 and 1.0\r\n",
       "name": "setOpacity",
       "params": [
        {
         "name": "value",
         "type": "double"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Returns the opacity value.\r\n",
       "name": "getOpacity",
       "params": [],
       "returnValues": [
        {
         "name": "double",
         "type": "double"
        }
       ]
      },
      {
       "documentation": "Starts opacity animation from current opacity to 1 (fadeIn == true) or 0 (fadeIn == false).\r\nThe parameter fullFadeDuration represents the time a complete animation from 0 to 1 or vice versa would\r\nlast. If the current opacity is inbetween, the executed fade would last less time. E.g. a fade out\r\nstarting at opacity 0.3 would last fullFadeDuration * 0.3.<br>\r\nTime unit is frames.\r\n",
       "name": "startOpacityAnimation",
       "params": [
        {
         "name": "fadeIn",
         "type": "bool"
        },
        {
         "name": "fullFadeDuration",
         "type": "double"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Sets the SMPTE timecode mode.<br>\r\n0: None<br>\r\n1: Receive<br>\r\n2: Send\r\n",
       "name": "setSmpteMode",
       "params": [
        {
         "name": "mode",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Returns the SMPTE timecode mode.\r\n",
       "name": "getSmpteMode",
       "params": [],
       "returnValues": [
        {
         "name": "int",
         "type": "int"
        }
       ]
      },
      {
       "documentation": "Stores recorded domination values using the current settings.\r\n",
       "name": "storeRecordedValues",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Sets the SMPTE timecode input behaviour.<br>\r\n1: Continue<br>\r\n2: Pause<br>\r\n3: Stop\r\n",
       "name": "setSmpteInputBehaviour",
       "params": [
        {
         "name": "mode",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Returns the SMPTE timecode input behaviour.\r\n",
       "name": "getSmpteInputBehaviour",
       "params": [],
       "returnValues": [
        {
         "name": "int",
         "type": "int"
        }
       ]
      },
      {
       "documentation": "Sets the SMPTE timecode offset.\r\n",
       "name": "setSmpteOffset",
       "params": [
        {
         "name": "time",
         "type": "double"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Returns the SMPTE timecode offset.\r\n",
       "name": "getSmpteOffset",
       "params": [],
       "returnValues": [
        {
         "name": "double",
         "type": "double"
        }
       ]
      },
      {
       "documentation": "Clears the recorded domination values and resets the reference time.\r\n",
       "name": "resetRecordedValues",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "getTimelineInfosAsJsonString",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "documentation": "Starts preview editing.<br>\r\ngoalTime: Sets the preview nowpointer to the given time.\r\n",
       "name": "startPreviewEdit",
       "params": [
        {
         "name": "goalTime",
         "type": "double"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "End preview editing.<br>\r\nmoveToPreview: define whether normal playback should be moved to preview nowpointer or not.<br>\r\nblendDurationInMs: Optional parameter to set blend duration in frames. If not set the time defined in settings is used.\r\n",
       "name": "endPreviewEdit",
       "params": [
        {
         "name": "moveToPreview",
         "type": "bool"
        },
        {
         "name": "blendDurationInMs",
         "type": "optional<int>"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "deliver": "Pixera.Timelines.Timeline",
       "name": "getInst",
       "params": [
        {
         "name": "instancePath",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "deliver": "Pixera.Timelines.Timeline",
       "name": "getHandleFromInstancePath",
       "params": [
        {
         "name": "instancePath",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "name": "getInstancePath",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      }
     ],
     "name": "Timeline"
    },
    {
     "methods": [
      {
       "deliver": "Pixera.Timelines.Layer",
       "documentation": "Pixera Control self-reference function.\r\n",
       "name": "ref",
       "params": [],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "documentation": "Removes the layer.\r\n",
       "name": "removeThis",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "deliver": "Pixera.Timelines.Node",
       "name": "getNodes",
       "params": [],
       "returnValues": [
        {
         "name": "handle[]",
         "type": "handle[]"
        }
       ]
      },
      {
       "deliver": "Pixera.Timelines.Param",
       "name": "getParameters",
       "params": [],
       "returnValues": [
        {
         "name": "handle[]",
         "type": "handle[]"
        }
       ]
      },
      {
       "deliver": "Pixera.Timelines.Node",
       "documentation": "Returns a node immediately below the layer based on the name displayed in the \r\nTimeline UI (e.g. the \"Position\" node below a standard layer).\r\n",
       "name": "getNodeWithName",
       "params": [
        {
         "name": "name",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "deliver": "Pixera.Timelines.Param",
       "documentation": "Returns a handle to a parameter node child with the given name. At the level of the\r\nlayer, this will deliver those parameters (e.g. \"Transport\") that are direct children\r\nof the layer. Other parameters can be accessed via the node children of the layer\r\n(e.g. the x position is a child of the \"Position\" node).\r\n",
       "name": "getParamWithName",
       "params": [
        {
         "name": "name",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "documentation": "Returns the current position, rotation and scale values (array with 9 entries) \r\nof the layer as determined by the clip at the given time. If no clip is found\r\nthen the returned array will be empty.\r\n",
       "name": "getSpatialParametersAtTime",
       "params": [
        {
         "name": "time",
         "type": "double"
        }
       ],
       "returnValues": [
        {
         "name": "double[]",
         "type": "double[]"
        }
       ]
      },
      {
       "deliver": "Pixera.Timelines.Timeline",
       "documentation": "Returns the parent timeline.\r\n",
       "name": "getTimeline",
       "params": [],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "documentation": "Sets the name of the layer.\r\n",
       "name": "setName",
       "params": [
        {
         "name": "name",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Returns the name of the layer.\r\n",
       "name": "getName",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "documentation": "Resets all dominant parameters of the layer.\r\nI.e. after execution the output of the\r\nlayer is determined by default values, keys and clips.\r\n",
       "name": "resetLayer",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Returns all parameter values of the layer as json.\r\n",
       "name": "getLayerJsonDescrip",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "documentation": "Set all parameter values as of the layer.\r\n",
       "name": "setLayerJsonDescrip",
       "params": [
        {
         "name": "descrip",
         "type": "string"
        },
        {
         "name": "makeAllDominant",
         "type": "bool"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "getJsonDescrip",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "name": "initFromJsonDescrip",
       "params": [
        {
         "name": "descrip",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Sets the opacity of the layer.\r\n",
       "name": "setOpacity",
       "params": [
        {
         "name": "value",
         "type": "double"
        },
        {
         "name": "fadeTimeMs",
         "type": "optional<int>"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Returns the opacity of the layer.\r\n",
       "name": "getOpacity",
       "params": [],
       "returnValues": [
        {
         "name": "double",
         "type": "double"
        }
       ]
      },
      {
       "documentation": "Resets the dominant opacity of the layer.\r\n",
       "name": "resetOpacity",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Sets the volume of the layer.\r\n",
       "name": "setVolume",
       "params": [
        {
         "name": "value",
         "type": "double"
        },
        {
         "name": "fadeTimeMs",
         "type": "optional<int>"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Returns the volume of the layer.\r\n",
       "name": "getVolume",
       "params": [],
       "returnValues": [
        {
         "name": "double",
         "type": "double"
        }
       ]
      },
      {
       "documentation": "Resets the dominant volume of the layer.\r\n",
       "name": "resetVolume",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Mutes the layer.\r\n",
       "name": "muteLayer",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Un-Mutes the layer.\r\n",
       "name": "unMuteLayer",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Returns whether the layer is muted.\r\n",
       "name": "getIsLayerMuted",
       "params": [],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "documentation": "Mutes the Audio.\r\n",
       "name": "muteAudio",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Un-Mutes the Audio.\r\n",
       "name": "unMuteAudio",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Returns whether the audio is muted.\r\n",
       "name": "getIsAudioMuted",
       "params": [],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "documentation": "The Dmx mute state is encoded in a single 32-Bit value.\r\nMuting and unMuting is done by performing bitwise operations.\r\nThe first 18 FX can be muted individually.\r\nThe Value for those is: (2^fxIndex)<br>\r\nNone: 0x0 or 0<br>\r\nTransport: 0x1 or 1<br>\r\nOpacity: 0x2 or 2<br>\r\nPosition: 0x4 or 4<br>\r\nRotation: 0x8 or 8<br>\r\nScale: 0x10 or 16<br>\r\nFxStart = 0x20 or 32<br>\r\nFxEnd = 0x400000 or 4194304<br>\r\nFxAll = 0x7FFFE0 or 8388576<br>\r\nAll = 0x7FFFFF or 8388607\r\n",
       "name": "getDmxMuteState",
       "params": [],
       "returnValues": [
        {
         "name": "int",
         "type": "int"
        }
       ]
      },
      {
       "name": "setDmxMuteState",
       "params": [
        {
         "name": "muteState",
         "type": "uint"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "toggleExplicitMute",
       "params": [
        {
         "name": "flag",
         "type": "uint"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Sets the mode and loop state of the layer's transport parameter.\r\n",
       "name": "setTransport",
       "params": [
        {
         "name": "mode",
         "type": "int"
        },
        {
         "name": "loop",
         "type": "bool"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Returns the mode of the layer's transport parameter.\r\n",
       "name": "getTransportMode",
       "params": [],
       "returnValues": [
        {
         "name": "int",
         "type": "int"
        }
       ]
      },
      {
       "documentation": "Resets the dominant state of the layer's transport parameter.\r\n",
       "name": "resetTransportMode",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Returns the loop state of the layer's transport parameter.\r\n",
       "name": "getTransportLoop",
       "params": [],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "documentation": "Sets playback speed of the layer.\r\n",
       "name": "setPlaybackSpeed",
       "params": [
        {
         "name": "speed",
         "type": "double"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Returns playback speed of the layer.\r\n",
       "name": "getPlaybackSpeed",
       "params": [],
       "returnValues": [
        {
         "name": "double",
         "type": "double"
        }
       ]
      },
      {
       "documentation": "Assigns a resource to the layer. The id is conceptually the handle but the\r\nhandle can not be passed directly for some implementations of the API. Therefore,\r\nResource.getId() should be used to fill this parameter.<br>\r\nNote that, up to and including API revision 14, this function took effect by\r\nchanging the resource assignment of the current clip. From revision 15 onwards,\r\nthe function works by assigning the resource to the layer as a dominant value\r\nindependent of the clips in the layer.\r\n",
       "name": "assignResource",
       "params": [
        {
         "name": "id",
         "type": "double"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Assigns a resource to the layer while besides the resource id also a fade duration\r\nhas to be passed to the function. The id is conceptually the handle but the handle\r\ncan not be passed directly for some implementations of the API. Therefore,\r\nResource.getId() should be used to fill this parameter. The unit of the parameter\r\nfadeDuration is seconds. Only pass values >= 0. While 0 means 'no fade'.\r\n",
       "name": "assignResourceWithFade",
       "params": [
        {
         "name": "id",
         "type": "double"
        },
        {
         "name": "fadeDuration",
         "type": "double"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "deliver": "Pixera.Resources.Resource",
       "documentation": "Returns the resource currently assigned to the layer.\r\n",
       "name": "getAssignedResource",
       "params": [],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "documentation": "Resets the currently assigned dominant resource of the layer.\r\nI.e. after execution no resource is dominant and the output of the\r\nlayer is determined by its clips.\r\n",
       "name": "resetAssignedResource",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "deliver": "Pixera.Resources.Resource",
       "documentation": "Returns the resource currently assigned to the layer.\r\n",
       "name": "getAssignedModelResource",
       "params": [],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "documentation": "Reset the resource currently assigned to the layer.\r\n",
       "name": "resetAssignedModelResource",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "get assigend fx names.\r\n",
       "name": "getFxNames",
       "params": [],
       "returnValues": [
        {
         "name": "string[]",
         "type": "string[]"
        }
       ]
      },
      {
       "documentation": "Sets the duration of the fade that is applied when the dominant resource of the layer is changed, \r\nsee API function Layer.assignResource(.). The unit of the value parameter is seconds.\r\n",
       "name": "setFadeDurationDominantResourceChange",
       "params": [
        {
         "name": "value",
         "type": "double"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Returns the duration of the fade that is applied when the dominant resource of the layer is changed.\r\nThe unit of the returned value is seconds.\r\n",
       "name": "getFadeDurationDominantResourceChange",
       "params": [],
       "returnValues": [
        {
         "name": "double",
         "type": "double"
        }
       ]
      },
      {
       "deliver": "Pixera.Timelines.Clip",
       "documentation": "Creates a clip at current time and returns a handle to it.\r\n",
       "name": "createClip",
       "params": [],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "deliver": "Pixera.Timelines.Clip",
       "documentation": "Creates a clip at the given time and returns a handle to it.\r\nTime in frames.\r\n",
       "name": "createClipAtTime",
       "params": [
        {
         "name": "timeInFrames",
         "type": "double"
        }
       ],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "name": "controlClipBorder",
       "params": [
        {
         "name": "clip",
         "type": "handle"
        },
        {
         "name": "isEnter",
         "type": "bool"
        },
        {
         "name": "isIncremental",
         "type": "bool"
        },
        {
         "name": "entryTime",
         "type": "double"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "deliver": "Pixera.Timelines.Clip",
       "documentation": "Returns the clip at the given index. Index is 0-based.\r\n",
       "name": "getClipAtIndex",
       "params": [
        {
         "name": "index",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "deliver": "Pixera.Timelines.Clip",
       "documentation": "Returns all clips.\r\n",
       "name": "getClips",
       "params": [],
       "returnValues": [
        {
         "name": "handle[]",
         "type": "handle[]"
        }
       ]
      },
      {
       "deliver": "Pixera.Timelines.Clip",
       "documentation": "Returns current clip\r\n",
       "name": "getClipCurrent",
       "params": [
        {
         "name": "offset",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "deliver": "Pixera.Timelines.Clip",
       "documentation": "Returns all clips.\r\n",
       "name": "getClipsSelected",
       "params": [],
       "returnValues": [
        {
         "name": "handle[]",
         "type": "handle[]"
        }
       ]
      },
      {
       "documentation": "Removes all clips.\r\n",
       "name": "removeClips",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Sets the screen with name given as layer's home screen.\r\n",
       "name": "setHomeScreenFromScreenName",
       "params": [
        {
         "name": "screenName",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Returns the name of the current home screen.\r\n",
       "name": "getHomeScreenName",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "documentation": "Set the blend mode of the layer by name.\r\n",
       "name": "setBlendMode",
       "params": [
        {
         "name": "blendMode",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Get the blend mode of the fayer.\r\n",
       "name": "getBlendMode",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "documentation": "Add effect by resource id.\r\nUse Pixera.Resources.Resource.getInst(resourcePath).getId() to get resource id.\r\n",
       "name": "addEffectById",
       "params": [
        {
         "name": "id",
         "type": "double"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Sets the 'preload permanently' status of the layer.\r\n",
       "name": "setPreloadPermanently",
       "params": [
        {
         "name": "doPreloadPermanently",
         "type": "bool"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Returns the 'preload permanently' status of the layer.\r\n",
       "name": "getPreloadPermanently",
       "params": [],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "documentation": "Sets the restrict to specific services state and the list of IPs of the services.\r\n",
       "name": "setRestrictToServiceWithIps",
       "params": [
        {
         "name": "doRestrict",
         "type": "bool"
        },
        {
         "name": "ipAdresses",
         "type": "string[]"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Returns the restrict to service state.\r\n",
       "name": "getRestrictToService",
       "params": [],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "documentation": "Returns the list of restricted service IPs in a comma separated string.\r\n",
       "name": "getRestrictedServiceIps",
       "params": [],
       "returnValues": [
        {
         "name": "string[]",
         "type": "string[]"
        }
       ]
      },
      {
       "documentation": "Get offsets.\r\n",
       "name": "getOffsets",
       "params": [],
       "returnValues": [
        {
         "name": "double[]",
         "type": "double[]"
        }
       ]
      },
      {
       "documentation": "Set offsets.\r\n",
       "name": "setOffsets",
       "params": [
        {
         "name": "x",
         "type": "optional<double>"
        },
        {
         "name": "y",
         "type": "optional<double>"
        },
        {
         "name": "z",
         "type": "optional<double>"
        },
        {
         "name": "xr",
         "type": "optional<double>"
        },
        {
         "name": "yr",
         "type": "optional<double>"
        },
        {
         "name": "zr",
         "type": "optional<double>"
        },
        {
         "name": "xScale",
         "type": "optional<double>"
        },
        {
         "name": "yScale",
         "type": "optional<double>"
        },
        {
         "name": "zScale",
         "type": "optional<double>"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Sets the current dominant value or clip value to offset by typeindex<br>\r\nresetDominant and removeKeyframesClips are optional and false on default<br>\r\ntypeIndex 0 = position,<br>\r\ntypeIndex 1 = rotation,<br>\r\ntypeIndex 2 = scale\r\n",
       "name": "setCurrentValuesToOffset",
       "params": [
        {
         "name": "typeIndex",
         "type": "int"
        },
        {
         "name": "resetDominant",
         "type": "optional<bool>"
        },
        {
         "name": "removeKeyframesClips",
         "type": "optional<bool>"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Set the render order of the layer. index 0 = top\r\nto send the layer to the last you can use -1 as index\r\n",
       "name": "setRenderOrder",
       "params": [
        {
         "name": "index",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "getRenderOrder",
       "params": [],
       "returnValues": [
        {
         "name": "int",
         "type": "int"
        }
       ]
      },
      {
       "deliver": "Pixera.Timelines.Layer",
       "name": "getInst",
       "params": [
        {
         "name": "instancePath",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "deliver": "Pixera.Timelines.Layer",
       "name": "getHandleFromInstancePath",
       "params": [
        {
         "name": "instancePath",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "name": "getInstancePath",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "name": "executeJavaScriptOnCurrentWebResource",
       "params": [
        {
         "name": "script",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      }
     ],
     "name": "Layer"
    },
    {
     "methods": [
      {
       "documentation": "Returns an id based on the handle. This is currently necessary in some situations\r\nbecause some API implementations can not yet consume handles as parameters. \r\n",
       "name": "getId",
       "params": [],
       "returnValues": [
        {
         "name": "double",
         "type": "double"
        }
       ]
      },
      {
       "documentation": "Removes the clip.\r\n",
       "name": "removeThis",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "deliver": "Pixera.Timelines.Timeline",
       "documentation": "Returns a handle to the timeline in which the clip is situated.\r\n",
       "name": "getTimeline",
       "params": [],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "name": "setTime",
       "params": [
        {
         "name": "time",
         "type": "double"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "getTime",
       "params": [],
       "returnValues": [
        {
         "name": "double",
         "type": "double"
        }
       ]
      },
      {
       "name": "setDuration",
       "params": [
        {
         "name": "duration",
         "type": "double"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "getDuration",
       "params": [],
       "returnValues": [
        {
         "name": "double",
         "type": "double"
        }
       ]
      },
      {
       "name": "setLabel",
       "params": [
        {
         "name": "label",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "getLabel",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "documentation": "Play modes:<br>\r\n1: Lock to time<br>\r\n2: Play once<br>\r\n3: Loop<br>\r\n4: Pause at endpoint<br>\r\n5: Lock to time no loop\r\n",
       "name": "getPlayMode",
       "params": [],
       "returnValues": [
        {
         "name": "int",
         "type": "int"
        }
       ]
      },
      {
       "name": "setPlayMode",
       "params": [
        {
         "name": "playMode",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Get the speed \r\n",
       "name": "getSpeed",
       "params": [],
       "returnValues": [
        {
         "name": "double",
         "type": "double"
        }
       ]
      },
      {
       "name": "setSpeed",
       "params": [
        {
         "name": "speed",
         "type": "double"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Get if frameblending is on or off\r\n",
       "name": "getBlendFrames",
       "params": [],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "name": "setBlendFrames",
       "params": [
        {
         "name": "doFrameblending",
         "type": "bool"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Get the inpoint of clip\r\n",
       "name": "getInpoint",
       "params": [],
       "returnValues": [
        {
         "name": "double",
         "type": "double"
        }
       ]
      },
      {
       "name": "setInpoint",
       "params": [
        {
         "name": "inpoint",
         "type": "double"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Get the outpoint of clip\r\n",
       "name": "getOutpoint",
       "params": [],
       "returnValues": [
        {
         "name": "double",
         "type": "double"
        }
       ]
      },
      {
       "name": "setOutpoint",
       "params": [
        {
         "name": "inpoint",
         "type": "double"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Assigns a resource to the resource parameter within the clip.<br>\r\nConceptually, the resId is a handle but the handle can not be passed directly for\r\nsome implementations of the API. Therefore, Resource.getId() should be used to\r\nfill this parameter.<br>\r\nsetToResourceDuration is optional and true if not set\r\n",
       "name": "assignResource",
       "params": [
        {
         "name": "resId",
         "type": "double"
        },
        {
         "name": "setToResourceDuration",
         "type": "optional<bool>"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "deliver": "Pixera.Resources.Resource",
       "documentation": "Assigns a resource to the resource parameter within the clip.<br>\r\nConceptually, the resId is a handle but the handle can not be passed directly for\r\nsome implementations of the API. Therefore, Resource.getId() should be used to\r\nfill this parameter.\r\n",
       "name": "getAssignedResource",
       "params": [],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "documentation": "Returns the name of the resource assigned to the clip.<br>\r\nIf no resource is assigned an empty string is returned.\r\n",
       "name": "getAssignedResourceName",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "name": "setToResourceDuration",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "setText",
       "params": [
        {
         "name": "text",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "getText",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "documentation": "Creates a key at the given time with the given value in the clip parameter specified by\r\nnamePath, with the parts of namePath consisting of the strings shown in the timeline UI.\r\nE.g. \"Position/x\" refers to the parameter responsible for the x position of the layer.\r\nThe name of this method may be changed in future versions of the API to reflect the \r\n\"key\" (instead of \"event\") terminology.\r\n",
       "name": "createEvent",
       "params": [
        {
         "name": "namePath",
         "type": "string"
        },
        {
         "name": "time",
         "type": "double"
        },
        {
         "name": "value",
         "type": "double"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Creates a key at the given time with the given value in the clip parameter specified by\r\nnamePath, with the parts of namePath consisting of the strings shown in the timeline UI.\r\nE.g. \"Position/x\" refers to the parameter responsible for the x position of the layer.\r\nThe name of this method may be changed in future versions of the API to reflect the \r\n\"key\" (instead of \"event\") terminology.\r\n",
       "name": "createEventInPixelSpace",
       "params": [
        {
         "name": "namePath",
         "type": "string"
        },
        {
         "name": "time",
         "type": "double"
        },
        {
         "name": "value",
         "type": "double"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Remove a key at the given time with the given by namePath,\r\nwith the parts of namePath consisting of the strings shown in the timeline UI.\r\nE.g. \"Position/x\" refers to the parameter responsible for the x position of the layer.\r\nThe name of this method may be changed in future versions of the API to reflect the \r\n\"key\" (instead of \"event\") terminology.\r\n",
       "name": "removeEvent",
       "params": [
        {
         "name": "namePath",
         "type": "string"
        },
        {
         "name": "time",
         "type": "double"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "deliver": "Pixera.Timelines.Param",
       "documentation": "Creates a Cue Before Clip\r\n",
       "name": "createPauseCueBeforeClip",
       "params": [],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "documentation": "et look up table\r\n",
       "name": "setColorTransformPath",
       "params": [
        {
         "name": "colorTransformPath",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "et look up table\r\n",
       "name": "getColorTransformPath",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "documentation": "lear look up table\r\n",
       "name": "clearColorTransformPath",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "eturn all keyframes with time and value of this clip as json string\r\n",
       "name": "getKeyframesAsJsonString",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      }
     ],
     "name": "Clip"
    },
    {
     "methods": [
      {
       "deliver": "Pixera.Timelines.Param",
       "name": "getParameters",
       "params": [],
       "returnValues": [
        {
         "name": "handle[]",
         "type": "handle[]"
        }
       ]
      },
      {
       "name": "getName",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "deliver": "Pixera.Timelines.Param",
       "documentation": "Returns a handle to a parameter node child with the given name. E.g. if the current\r\nnode is the \"Position\" folder then the name \"x\" would return the parameter node\r\nrepresenting the x position of the layer.\r\n",
       "name": "getParamWithName",
       "params": [
        {
         "name": "name",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "documentation": "Sets the values of the children of the node in the order that they are displayed\r\nin the timeline. This allows e.g. setting the x, y, and z values of a node with\r\none invocation.\r\n",
       "name": "setValues",
       "params": [
        {
         "name": "values",
         "type": "double[]"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Returns the values of the children of the node in the order that they are displayed\r\nin the timeline. This allows e.g. setting the x, y, and z values of a node with\r\none invocation.\r\n",
       "name": "getValues",
       "params": [],
       "returnValues": [
        {
         "name": "double[]",
         "type": "double[]"
        }
       ]
      },
      {
       "documentation": "Resets the dominant values of the children of the node in the timeline.\r\n",
       "name": "resetValues",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Stores all node values in the Timeline.\r\n",
       "name": "storeValues",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "mute",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "unMute",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "toggleMute",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "getIsMuted",
       "params": [],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "deliver": "Pixera.Timelines.Timeline",
       "documentation": "Returns a handle to the timeline that holds the node.\r\n",
       "name": "getTimeline",
       "params": [],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "deliver": "Pixera.Timelines.Node",
       "name": "getInst",
       "params": [
        {
         "name": "instancePath",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "deliver": "Pixera.Timelines.Node",
       "name": "getHandleFromInstancePath",
       "params": [
        {
         "name": "instancePath",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "name": "getInstancePath",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      }
     ],
     "name": "Node"
    },
    {
     "methods": [
      {
       "name": "getName",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "name": "getIsChannel",
       "params": [],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "documentation": "et parameter value. can be double or string\r\n",
       "name": "setValue",
       "params": [
        {
         "name": "value",
         "type": "timelineParamValue"
        },
        {
         "name": "fadeTimeMs",
         "type": "optional<int>"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "setValueRelativ",
       "params": [
        {
         "name": "value",
         "type": "double"
        },
        {
         "name": "fadeTimeMs",
         "type": "optional<int>"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "eturn can be double or string\r\n",
       "name": "getValue",
       "params": [],
       "returnValues": [
        {
         "name": "timelineParamValue",
         "type": "timelineParamValue"
        }
       ]
      },
      {
       "name": "resetValue",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Store parameter value in the Timeline.\r\n",
       "name": "storeValue",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Store parameter value in the Timeline and remove other keys.\r\n",
       "name": "storeValueAndRemoveOther",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Sets the transport state. Only effective for the \"Transport\" parameter of each layer.\r\nMode is as defined for Timelines.Timeline.setTransportMode().\r\ninpoint and outpoint are in frames. Inpoint of zero is ignored at pause. Outpoint of zero is always ignored.\r\n",
       "name": "setTransportAttributes",
       "params": [
        {
         "name": "mode",
         "type": "int"
        },
        {
         "name": "speed",
         "type": "double"
        },
        {
         "name": "loop",
         "type": "bool"
        },
        {
         "name": "inpoint",
         "type": "int"
        },
        {
         "name": "outpoint",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Returns the attributes of the current transport state.\r\n",
       "name": "getAttributes",
       "params": [],
       "returnValues": [
        {
         "name": "TransportAttributes",
         "type": "TransportAttributes"
        }
       ]
      },
      {
       "name": "mute",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "unMute",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "toggleMute",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "getIsMuted",
       "params": [],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "deliver": "Pixera.Timelines.Param",
       "name": "getInst",
       "params": [
        {
         "name": "instancePath",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "deliver": "Pixera.Timelines.Param",
       "name": "getHandleFromInstancePath",
       "params": [
        {
         "name": "instancePath",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "name": "getInstancePath",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      }
     ],
     "name": "Param"
    },
    {
     "methods": [
      {
       "documentation": "Removes cue.\r\n",
       "name": "removeThis",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Jumps to and executes the cue.<br>\r\nblendDuration: optional parameter to set blend duration in seconds.\r\n",
       "name": "apply",
       "params": [
        {
         "name": "blendDuration",
         "type": "optional<double>"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Blends to and executes the cue. Deprecated method. Use apply().<br>\r\nblendDuration: blend duration in seconds.\r\n",
       "name": "blendToThis",
       "params": [
        {
         "name": "blendDuration",
         "type": "double"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Returns the attributes of the cue (see CueAttributes struct).\r\n",
       "name": "getAttributes",
       "params": [],
       "returnValues": [
        {
         "name": "CueAttributes",
         "type": "CueAttributes"
        }
       ]
      },
      {
       "deliver": "Pixera.Timelines.Timeline",
       "documentation": "Returns a handle to the timeline in which the cue is situated.\r\n",
       "name": "getTimeline",
       "params": [],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "documentation": "Returns the time-ordered index of the cue in the timeline (-1 if the cue is not found).\r\n",
       "name": "getIndex",
       "params": [],
       "returnValues": [
        {
         "name": "int",
         "type": "int"
        }
       ]
      },
      {
       "documentation": "Returns the name of the cue.\r\n",
       "name": "getName",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "documentation": "Sets the name of the cue.\r\n",
       "name": "setName",
       "params": [
        {
         "name": "name",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "documentation": "Returns the info of the cue.\r\n",
       "name": "getNote",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "documentation": "Sets the info of the cue.\r\n",
       "name": "setNote",
       "params": [
        {
         "name": "note",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "documentation": "Returns the operation mode of the cue.<br>\r\n1: Play<br>\r\n2: Pause<br>\r\n3: Stop<br>\r\n4: Jump\r\n",
       "name": "getOperation",
       "params": [],
       "returnValues": [
        {
         "name": "int",
         "type": "int"
        }
       ]
      },
      {
       "documentation": "Sets the operation mode for the cue.<br>\r\n1: Play<br>\r\n2: Pause<br>\r\n3: Stop<br>\r\n4: Jump\r\n",
       "name": "setOperation",
       "params": [
        {
         "name": "operation",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "documentation": "Returns the jump mode of the cue.<br>\r\n0: None<br>\r\n1: To time<br>\r\n2: To cue\r\n",
       "name": "getJumpMode",
       "params": [],
       "returnValues": [
        {
         "name": "int",
         "type": "int"
        }
       ]
      },
      {
       "documentation": "Sets the jump mode of the cue with given handle (this only affects the cue\r\nif it has its operation set to \"jump\").<br>\r\n0: None<br>\r\n1: To time<br>\r\n2: To cue\r\n",
       "name": "setJumpMode",
       "params": [
        {
         "name": "jumpMode",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "documentation": "Returns the time in frames of the jump goal of the cue.\r\n",
       "name": "getJumpGoalTime",
       "params": [],
       "returnValues": [
        {
         "name": "double",
         "type": "double"
        }
       ]
      },
      {
       "documentation": "Sets the time the timline should jump to if the cue is reached.<br>\r\nThis only affects the cue if it's set to jumpToTime.\r\n",
       "name": "setJumpGoalTime",
       "params": [
        {
         "name": "time",
         "type": "double"
        }
       ],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "documentation": "Returns the name of the cue the timeline should jump to if the cue is reached.\r\n",
       "name": "getJumpGoalLabel",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "deliver": "Pixera.Timelines.Cue",
       "documentation": "Returns the handle of the cue the timeline should jump to if the cue is reached.\r\n",
       "name": "getJumpGoalCue",
       "params": [],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "documentation": "Sets the name of the cue to which the timeline should jump if the cue is reached.<br>\r\nThis only affects the cue if it's set to jumpToLabel.\r\n",
       "name": "setJumpGoalLabel",
       "params": [
        {
         "name": "jumpGoalLabel",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "documentation": "Returns the number of the cue.\r\n",
       "name": "getNumber",
       "params": [],
       "returnValues": [
        {
         "name": "int",
         "type": "int"
        }
       ]
      },
      {
       "documentation": "Sets the number of the cue.\r\n",
       "name": "setNumber",
       "params": [
        {
         "name": "number",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Returns the time in frames that the cue will cause the timeline to wait when\r\nit is reached before the cue is applied.\r\n",
       "name": "getWaitDuration",
       "params": [],
       "returnValues": [
        {
         "name": "double",
         "type": "double"
        }
       ]
      },
      {
       "documentation": "Sets the time in frames that the cue will cause the timeline to wait when\r\nit is reached before the cue is applied.\r\n",
       "name": "setWaitDuration",
       "params": [
        {
         "name": "time",
         "type": "double"
        }
       ],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "documentation": "Returns the time in frames, the blending between this cue and its jump target takes.\r\n",
       "name": "getBlendDuration",
       "params": [],
       "returnValues": [
        {
         "name": "double",
         "type": "double"
        }
       ]
      },
      {
       "documentation": "Sets the blend duration of a cue.<br>\r\nTime in Frames\r\n",
       "name": "setBlendDuration",
       "params": [
        {
         "name": "timeInFrames",
         "type": "double"
        }
       ],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "documentation": "Returns the time in frames for the cue.\r\n",
       "name": "getTime",
       "params": [],
       "returnValues": [
        {
         "name": "double",
         "type": "double"
        }
       ]
      },
      {
       "documentation": "Sets the time of the cue.\r\nThe unit of the parameter 'time' is frames.\r\n",
       "name": "setTime",
       "params": [
        {
         "name": "time",
         "type": "double"
        }
       ],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "documentation": "Returns the name of the timeline that is triggered by this cue. An empty string is returned\r\nwhen no timeline is triggered.\r\n",
       "name": "getTimelineToTriggerName",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "documentation": "Sets the timeline that is triggered by this cue. Returns a boolean. A return value false means\r\nthat something went wrong and the cue is not changed.\r\nWhen the string parameter 'nameTimeline' is empty, the cue property 'Timeline to Trigger' is cleared.\r\nI.e. the cue will not trigger any timeline.\r\n",
       "name": "setTimelineToTrigger",
       "params": [
        {
         "name": "nameTimeline",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "documentation": "Returns the applied playback time mode of the timeline that is triggered by this cue.\r\nThe return value corresponds to: Current Time = 1, Time = 2, Cue = 3.\r\n0 is returned when no timeline is triggered. \r\n",
       "name": "getTimelineToTriggerMode",
       "params": [],
       "returnValues": [
        {
         "name": "int",
         "type": "int"
        }
       ]
      },
      {
       "documentation": "Sets the applied playback time mode of the timeline that is triggered by this cue. A return value false means\r\nthat something went wrong and the cue is not changed.\r\nMode Parameter: Current Time = 1, Time = 2, Cue = 3.\r\n",
       "name": "setTimelineToTriggerTimeMode",
       "params": [
        {
         "name": "mode",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "documentation": "Returns the applied playback mode of the timeline that is triggered by this cue.\r\nThe return value corresponds to: Play = 1, Pause = 2, Stop = 3.\r\n0 is returned when no timeline is triggered. \r\n",
       "name": "getTimelineTriggerMode",
       "params": [],
       "returnValues": [
        {
         "name": "int",
         "type": "int"
        }
       ]
      },
      {
       "documentation": "Sets the applied playback mode of the timeline that is triggered by this cue. A return value false means\r\nthat something went wrong and the cue is not changed.\r\nMode Parameter: Play = 1, Pause = 2, Stop = 3.\r\n",
       "name": "setTimelineTriggerMode",
       "params": [
        {
         "name": "mode",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "documentation": "Returns the applied time of the timeline that is triggered by this cue in frames.\r\n-1 is returned when no timeline is triggered or no time is applied. \r\n",
       "name": "getTimelineTriggerApplyTime",
       "params": [],
       "returnValues": [
        {
         "name": "double",
         "type": "double"
        }
       ]
      },
      {
       "documentation": "Sets the applied time of the timeline that is triggered by this cue. A return value false means\r\nthat something went wrong and the cue is not changed.\r\nThe unit of the parameter 'time' is frames. The trigger time mode of this cue is set to 'Time'.\r\nHowever, a value < 0. means that the apply time is resetted. I.e. no\r\ntime will be applied and the time mode of the cue is set to 'Current Time'.\r\n",
       "name": "setTimelineTriggerApplyTime",
       "params": [
        {
         "name": "time",
         "type": "double"
        }
       ],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "documentation": "Sets the apply cue of the timeline that is triggered by this cue. A return value false means\r\nthat something went wrong and the cue is not changed.\r\nThe trigger time mode of this cue is automatically set to 'Cue'.\r\n",
       "name": "setTimelineTriggerApplyCue",
       "params": [
        {
         "name": "goalCueLabel",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "documentation": "Returns whether the cue will be applied when the nowpointer passes it.\r\n",
       "name": "isActive",
       "params": [],
       "returnValues": [
        {
         "name": "bool",
         "type": "bool"
        }
       ]
      },
      {
       "documentation": "Sets the acitvity state for the cue.<br>\r\nidState: 'Active' = 1, 'Ignore' = 2, 'Ignore Once' = 3\r\n",
       "name": "setActivity",
       "params": [
        {
         "name": "idState",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Returns the countdown time to this cue in frames.<br>\r\nReturns zero when this cue was already passed.\r\n",
       "name": "getCountdown",
       "params": [],
       "returnValues": [
        {
         "name": "double",
         "type": "double"
        }
       ]
      },
      {
       "documentation": "Returns the countdown time to this cue as a hours, minutes, seconds, frames string.<br>\r\nReturns zero string when this cue was already passed.\r\n",
       "name": "getCountdownHMSF",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      },
      {
       "documentation": "Sets the \"Network Command\" information for the cue. conveyorName must be one of the entries in the \"API Output\" dropdown of the cue inspector.\r\ncommandData is the string to be executed.\r\n",
       "name": "setCommand",
       "params": [
        {
         "name": "conveyorName",
         "type": "string"
        },
        {
         "name": "commandData",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "etColor\r\n",
       "name": "setColor",
       "params": [
        {
         "name": "red",
         "type": "int"
        },
        {
         "name": "green",
         "type": "int"
        },
        {
         "name": "blue",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "etColor\r\n",
       "name": "getColor",
       "params": [],
       "returnValues": [
        {
         "name": "int[]",
         "type": "int[]"
        }
       ]
      },
      {
       "deliver": "Pixera.Timelines.Cue",
       "name": "getInst",
       "params": [
        {
         "name": "instancePath",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "deliver": "Pixera.Timelines.Cue",
       "name": "getHandleFromInstancePath",
       "params": [
        {
         "name": "instancePath",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "handle",
         "type": "handle"
        }
       ]
      },
      {
       "name": "getInstancePath",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      }
     ],
     "name": "Cue"
    }
   ],
   "functions": [
    {
     "deliver": "Pixera.Timelines.Timeline",
     "documentation": "Returns the handle of the timeline at the (zero-based) index in\r\nthe timeline library of the Compositing tab.\r\n",
     "name": "getTimelineAtIndex",
     "params": [
      {
       "name": "index",
       "type": "int"
      }
     ],
     "returnValues": [
      {
       "name": "handle",
       "type": "handle"
      }
     ]
    },
    {
     "deliver": "Pixera.Timelines.Timeline",
     "documentation": "Returns the handle of the timeline with the given name (as shown in the \r\ntimeline library).\r\n",
     "name": "getTimelineFromName",
     "params": [
      {
       "name": "name",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "handle",
       "type": "handle"
      }
     ]
    },
    {
     "deliver": "Pixera.Timelines.Timeline",
     "documentation": "Returns handles to all timelines.\r\n",
     "name": "getTimelines",
     "params": [],
     "returnValues": [
      {
       "name": "handle[]",
       "type": "handle[]"
      }
     ]
    },
    {
     "documentation": "Returns names to all timelines.\r\n",
     "name": "getTimelineNames",
     "params": [],
     "returnValues": [
      {
       "name": "string[]",
       "type": "string[]"
      }
     ]
    },
    {
     "deliver": "Pixera.Timelines.Timeline",
     "documentation": "Returns handles to all selected timelines\r\n",
     "name": "getTimelinesSelected",
     "params": [],
     "returnValues": [
      {
       "name": "handle[]",
       "type": "handle[]"
      }
     ]
    },
    {
     "deliver": "Pixera.Timelines.Timeline",
     "documentation": "Create Timeline\r\n",
     "name": "createTimeline",
     "params": [],
     "returnValues": [
      {
       "name": "handle",
       "type": "handle"
      }
     ]
    },
    {
     "deliver": "Pixera.Timelines.Node",
     "documentation": "Returns a handle for the node specified by id after checking that a node with the id exists.<br>\r\nConceptually, the id and the handle are the same but some implementations of the API can not\r\nyet consume handles as parameters, making it necessary to translate between the two occasionally.\r\n",
     "name": "getNodeFromId",
     "params": [
      {
       "name": "id",
       "type": "double"
      }
     ],
     "returnValues": [
      {
       "name": "handle",
       "type": "handle"
      }
     ]
    },
    {
     "name": "getInst",
     "params": [
      {
       "name": "instancePath",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "handle",
       "type": "handle"
      }
     ]
    },
    {
     "name": "getInstancePath",
     "params": [
      {
       "name": "apEntityThisHandle",
       "type": "handle"
      }
     ],
     "returnValues": [
      {
       "name": "string",
       "type": "string"
      }
     ]
    }
   ],
   "name": "Timelines",
   "structs": [
    {
     "name": "TimelineAttributes",
     "params": [
      {
       "name": "index",
       "type": "int"
      },
      {
       "name": "name",
       "type": "string"
      },
      {
       "name": "fps",
       "type": "double"
      },
      {
       "name": "mode",
       "type": "int"
      }
     ]
    },
    {
     "name": "TransportAttributes",
     "params": [
      {
       "name": "mode",
       "type": "int"
      },
      {
       "name": "speed",
       "type": "double"
      },
      {
       "name": "loop",
       "type": "bool"
      },
      {
       "name": "inpoint",
       "type": "double"
      },
      {
       "name": "outpoint",
       "type": "double"
      }
     ]
    },
    {
     "name": "CueAttributes",
     "params": [
      {
       "name": "index",
       "type": "int"
      },
      {
       "name": "name",
       "type": "string"
      },
      {
       "name": "operation",
       "type": "int"
      },
      {
       "name": "jumpMode",
       "type": "int"
      },
      {
       "name": "jumpGoalTime",
       "type": "double"
      },
      {
       "name": "jumpGoalLabel",
       "type": "string"
      },
      {
       "name": "jumpGoalCue",
       "type": "handle"
      },
      {
       "name": "number",
       "type": "int"
      },
      {
       "name": "waitDuration",
       "type": "double"
      },
      {
       "name": "note",
       "type": "string"
      }
     ]
    }
   ]
  },
  {
   "functions": [
    {
     "documentation": "Sets the marker positions for projector calibration with external data.\r\nPositions must contain the marker coordinates in world space in consecutive order \r\nlike this: x1, y1, z1, x2, y2, z2, x3, y3, z3, ...<br>\r\nmarkerIds must contain a unique integer id for each marker in the same order as \r\nthe marker positions. The markerIds matching the coordinates example are 1,2,3.\r\n",
     "name": "setMarkerPositions",
     "params": [
      {
       "name": "positions",
       "type": "double[]"
      },
      {
       "name": "markerIds",
       "type": "int[]"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    }
   ],
   "name": "Calibration"
  },
  {
   "functions": [
    {
     "name": "loadDeviceUi",
     "params": [
      {
       "name": "devicePath",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "name": "activatePreviousFunc",
     "params": [],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "name": "activateNextFunc",
     "params": [],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "name": "getLastActivatedFunc",
     "params": [],
     "returnValues": [
      {
       "name": "string",
       "type": "string"
      }
     ]
    },
    {
     "name": "deviceActivated",
     "params": [
      {
       "name": "devicePath",
       "type": "string"
      },
      {
       "name": "withSelection",
       "type": "bool"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "name": "funcActivated",
     "params": [
      {
       "name": "funcPath",
       "type": "string"
      },
      {
       "name": "withSelection",
       "type": "bool"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "name": "setFuncBodyState",
     "params": [
      {
       "name": "funcPath",
       "type": "string"
      },
      {
       "name": "state",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "name": "getFuncBodyState",
     "params": [
      {
       "name": "funcPath",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "string",
       "type": "string"
      }
     ]
    },
    {
     "name": "setTag",
     "params": [
      {
       "name": "tag",
       "type": "string"
      },
      {
       "name": "text",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "name": "setEditorIsUsingBlocks",
     "params": [
      {
       "name": "useBlocks",
       "type": "bool"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    }
   ],
   "name": "WebViews"
  },
  {
   "classes": [
    {
     "methods": [
      {
       "name": "clear",
       "params": [],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "addItem",
       "params": [
        {
         "name": "item",
         "type": "string"
        },
        {
         "name": "id",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "setSelectedId",
       "params": [
        {
         "name": "id",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "getSelectedId",
       "params": [],
       "returnValues": [
        {
         "name": "int",
         "type": "int"
        }
       ]
      }
     ],
     "name": "ComboBox"
    }
   ],
   "functions": [
    {
     "name": "lockUi",
     "params": [
      {
       "name": "password",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "name": "unlockUi",
     "params": [
      {
       "name": "password",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "name": "toggleLockUi",
     "params": [
      {
       "name": "password",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "deliver": "Pixera.Ui.ComboBox",
     "name": "getComboBoxWithId",
     "params": [
      {
       "name": "id",
       "type": "double"
      }
     ],
     "returnValues": [
      {
       "name": "handle",
       "type": "handle"
      }
     ]
    },
    {
     "documentation": "Set the current AppMode<br>\r\n1 = Screens<br>\r\n2 = Mapping<br>\r\n3 = Compositing<br>\r\n4 = Compositing Inside<br>\r\n5 = Settings<br>\r\n6 = Mapping Screens Feedarea<br>\r\n7 = Control\r\n",
     "name": "setAppMode",
     "params": [
      {
       "name": "mode",
       "type": "int"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "documentation": "Get the current AppMode\r\n",
     "name": "getAppMode",
     "params": [],
     "returnValues": [
      {
       "name": "int",
       "type": "int"
      }
     ]
    },
    {
     "documentation": "Get display Testpattern\r\n",
     "name": "getDisplayTestpattern",
     "params": [],
     "returnValues": [
      {
       "name": "bool",
       "type": "bool"
      }
     ]
    },
    {
     "documentation": "Get display Testpattern\r\n",
     "name": "setDisplayTestpattern",
     "params": [
      {
       "name": "display",
       "type": "bool"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "documentation": "oggle the output freeze\r\n",
     "name": "toggleOutputFreeze",
     "params": [],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "documentation": "Get the current AppMode\r\n",
     "name": "getPreviewCameraAsJsonString",
     "params": [],
     "returnValues": [
      {
       "name": "string",
       "type": "string"
      }
     ]
    },
    {
     "name": "setPreviewCameraAsJsonString",
     "params": [
      {
       "name": "cameraFrustrumStateString",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "name": "setDisableContentRendering",
     "params": [
      {
       "name": "state",
       "type": "bool"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "name": "getIsContentRenderingDisabled",
     "params": [],
     "returnValues": [
      {
       "name": "bool",
       "type": "bool"
      }
     ]
    },
    {
     "name": "setDisableWorkspaceRendering",
     "params": [
      {
       "name": "state",
       "type": "bool"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "name": "getIsWorkspaceRenderingDisabled",
     "params": [],
     "returnValues": [
      {
       "name": "bool",
       "type": "bool"
      }
     ]
    }
   ],
   "name": "Ui",
   "namespaces": [
    {
     "functions": [
      {
       "documentation": "et current control page\r\n",
       "name": "setControlPage",
       "params": [
        {
         "name": "pageName",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "et control pages\r\n",
       "name": "getControlPages",
       "params": [],
       "returnValues": [
        {
         "name": "string[]",
         "type": "string[]"
        }
       ]
      },
      {
       "documentation": "et current control page\r\n",
       "name": "getCurrentControlPage",
       "params": [],
       "returnValues": [
        {
         "name": "string",
         "type": "string"
        }
       ]
      }
     ],
     "name": "Control"
    },
    {
     "functions": [
      {
       "documentation": "elect the preview camera for the preview. first starts at 0\r\n",
       "name": "selectPreviewCameraByIndex",
       "params": [
        {
         "name": "index",
         "type": "int"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "elect the preview camera by name\r\n",
       "name": "selectPreviewCameraByName",
       "params": [
        {
         "name": "name",
         "type": "string"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "getPreviewCameraNames",
       "params": [],
       "returnValues": [
        {
         "name": "string[]",
         "type": "string[]"
        }
       ]
      }
     ],
     "name": "PreviewCamera"
    }
   ]
  },
  {
   "classes": [
    {
     "methods": [
      {
       "name": "setPosition",
       "params": [
        {
         "name": "xPos",
         "type": "optional<double>"
        },
        {
         "name": "yPos",
         "type": "optional<double>"
        },
        {
         "name": "zPos",
         "type": "optional<double>"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "setRotation",
       "params": [
        {
         "name": "xRot",
         "type": "optional<double>"
        },
        {
         "name": "yRot",
         "type": "optional<double>"
        },
        {
         "name": "zRot",
         "type": "optional<double>"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "name": "setPosRot",
       "params": [
        {
         "name": "xPos",
         "type": "optional<double>"
        },
        {
         "name": "yPos",
         "type": "optional<double>"
        },
        {
         "name": "zPos",
         "type": "optional<double>"
        },
        {
         "name": "xRot",
         "type": "optional<double>"
        },
        {
         "name": "yRot",
         "type": "optional<double>"
        },
        {
         "name": "zRot",
         "type": "optional<double>"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      }
     ],
     "name": "Projector"
    },
    {
     "methods": [
      {
       "documentation": "Sets the position in meters.\r\n",
       "name": "setPosition",
       "params": [
        {
         "name": "xPos",
         "type": "optional<double>"
        },
        {
         "name": "yPos",
         "type": "optional<double>"
        },
        {
         "name": "zPos",
         "type": "optional<double>"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Sets the rotation in degrees.\r\n",
       "name": "setRotation",
       "params": [
        {
         "name": "xRot",
         "type": "optional<double>"
        },
        {
         "name": "yRot",
         "type": "optional<double>"
        },
        {
         "name": "zRot",
         "type": "optional<double>"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Sets position and rotation in one API call.\r\n",
       "name": "setPosRot",
       "params": [
        {
         "name": "xPos",
         "type": "optional<double>"
        },
        {
         "name": "yPos",
         "type": "optional<double>"
        },
        {
         "name": "zPos",
         "type": "optional<double>"
        },
        {
         "name": "xRot",
         "type": "optional<double>"
        },
        {
         "name": "yRot",
         "type": "optional<double>"
        },
        {
         "name": "zRot",
         "type": "optional<double>"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Sets position, rotation and the perspective position for the first screen group in one API call.\r\n",
       "name": "setPosRotAndPerspectivePos",
       "params": [
        {
         "name": "xPos",
         "type": "optional<double>"
        },
        {
         "name": "yPos",
         "type": "optional<double>"
        },
        {
         "name": "zPos",
         "type": "optional<double>"
        },
        {
         "name": "xRot",
         "type": "optional<double>"
        },
        {
         "name": "yRot",
         "type": "optional<double>"
        },
        {
         "name": "zRot",
         "type": "optional<double>"
        },
        {
         "name": "perspXPos",
         "type": "optional<double>"
        },
        {
         "name": "perspYPos",
         "type": "optional<double>"
        },
        {
         "name": "perspZPos",
         "type": "optional<double>"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Sets position, rotation and scale in one API call.\r\n",
       "name": "setPosRotScale",
       "params": [
        {
         "name": "xPos",
         "type": "optional<double>"
        },
        {
         "name": "yPos",
         "type": "optional<double>"
        },
        {
         "name": "zPos",
         "type": "optional<double>"
        },
        {
         "name": "xRot",
         "type": "optional<double>"
        },
        {
         "name": "yRot",
         "type": "optional<double>"
        },
        {
         "name": "zRot",
         "type": "optional<double>"
        },
        {
         "name": "xScale",
         "type": "optional<double>"
        },
        {
         "name": "yScale",
         "type": "optional<double>"
        },
        {
         "name": "zScale",
         "type": "optional<double>"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Enables time logging for the screen. Every 10 seconds values are printed to the pixera log\r\nshowing the number of messages and the minimum and maximum time between two messages for every second.\r\n",
       "name": "enableLogging",
       "params": [
        {
         "name": "enable",
         "type": "bool"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      }
     ],
     "name": "Screen"
    },
    {
     "methods": [
      {
       "documentation": "Sets the param value. Note that this will bypass conversions and offsets determined by the GUI. \r\nE.g. layer-level offsets will not be taken into account and neither will resource-dependent scaling.\r\n",
       "name": "setValue",
       "params": [
        {
         "name": "value",
         "type": "double"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Enables time logging for the param. Every 10 seconds values are printed to the pixera log\r\nshowing the number of messages and the minimum and maximum time between two messages for every second.\r\n",
       "name": "enableLogging",
       "params": [
        {
         "name": "enable",
         "type": "bool"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      }
     ],
     "name": "Param"
    },
    {
     "methods": [
      {
       "documentation": "Sets the position in meters.\r\n",
       "name": "setPosition",
       "params": [
        {
         "name": "xPos",
         "type": "double"
        },
        {
         "name": "yPos",
         "type": "double"
        },
        {
         "name": "zPos",
         "type": "double"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Sets the euler rotation in degrees.\r\n",
       "name": "setRotation",
       "params": [
        {
         "name": "xRot",
         "type": "double"
        },
        {
         "name": "yRot",
         "type": "double"
        },
        {
         "name": "zRot",
         "type": "double"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Sets the rotation in quaternions.\r\n",
       "name": "setRotationQuat",
       "params": [
        {
         "name": "xQuat",
         "type": "double"
        },
        {
         "name": "yQuat",
         "type": "double"
        },
        {
         "name": "zQuat",
         "type": "double"
        },
        {
         "name": "wQuat",
         "type": "double"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Sets the position in meters, rotation and fov in degrees.\r\n",
       "name": "setTransformation",
       "params": [
        {
         "name": "xPos",
         "type": "double"
        },
        {
         "name": "yPos",
         "type": "double"
        },
        {
         "name": "zPos",
         "type": "double"
        },
        {
         "name": "xRot",
         "type": "double"
        },
        {
         "name": "yRot",
         "type": "double"
        },
        {
         "name": "zRot",
         "type": "double"
        },
        {
         "name": "fov",
         "type": "double"
        },
        {
         "name": "aspectRatio",
         "type": "double"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Sets the position in meters, rotation in quaternions, fov in degrees.\r\n",
       "name": "setTransformationQuat",
       "params": [
        {
         "name": "xPos",
         "type": "double"
        },
        {
         "name": "yPos",
         "type": "double"
        },
        {
         "name": "zPos",
         "type": "double"
        },
        {
         "name": "xQuat",
         "type": "double"
        },
        {
         "name": "yQuat",
         "type": "double"
        },
        {
         "name": "zQuat",
         "type": "double"
        },
        {
         "name": "wQuat",
         "type": "double"
        },
        {
         "name": "fov",
         "type": "double"
        },
        {
         "name": "aspectRatio",
         "type": "double"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Sets the position in meters, rotation and fov in degrees, centerX, centerX and panelWidth in millimeters.\r\n",
       "name": "setTransformationAndLensProps",
       "params": [
        {
         "name": "xPos",
         "type": "double"
        },
        {
         "name": "yPos",
         "type": "double"
        },
        {
         "name": "zPos",
         "type": "double"
        },
        {
         "name": "xRot",
         "type": "double"
        },
        {
         "name": "yRot",
         "type": "double"
        },
        {
         "name": "zRot",
         "type": "double"
        },
        {
         "name": "fov",
         "type": "double"
        },
        {
         "name": "aspectRatio",
         "type": "double"
        },
        {
         "name": "nearClip",
         "type": "double"
        },
        {
         "name": "farClip",
         "type": "double"
        },
        {
         "name": "aperture",
         "type": "double"
        },
        {
         "name": "focus",
         "type": "double"
        },
        {
         "name": "iris",
         "type": "double"
        },
        {
         "name": "k1",
         "type": "double"
        },
        {
         "name": "k2",
         "type": "double"
        },
        {
         "name": "centerX",
         "type": "double"
        },
        {
         "name": "centerY",
         "type": "double"
        },
        {
         "name": "panelWidth",
         "type": "double"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Sets the position in meters, rotation in quaternions, fov in degrees, centerX, centerX and panelWidth in millimeters.\r\n",
       "name": "setTransformationAndLensPropsQuat",
       "params": [
        {
         "name": "xPos",
         "type": "double"
        },
        {
         "name": "yPos",
         "type": "double"
        },
        {
         "name": "zPos",
         "type": "double"
        },
        {
         "name": "xQuat",
         "type": "double"
        },
        {
         "name": "yQuat",
         "type": "double"
        },
        {
         "name": "zQuat",
         "type": "double"
        },
        {
         "name": "wQuat",
         "type": "double"
        },
        {
         "name": "fov",
         "type": "double"
        },
        {
         "name": "aspectRatio",
         "type": "double"
        },
        {
         "name": "nearClip",
         "type": "double"
        },
        {
         "name": "farClip",
         "type": "double"
        },
        {
         "name": "aperture",
         "type": "double"
        },
        {
         "name": "focus",
         "type": "double"
        },
        {
         "name": "iris",
         "type": "double"
        },
        {
         "name": "k1",
         "type": "double"
        },
        {
         "name": "k2",
         "type": "double"
        },
        {
         "name": "centerX",
         "type": "double"
        },
        {
         "name": "centerY",
         "type": "double"
        },
        {
         "name": "panelWidth",
         "type": "double"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Sets the position in meters, rotation and fov in degrees, centerX, centerX and panelWidth in millimeters.\r\n",
       "name": "setTransformationAndLensPropsExt",
       "params": [
        {
         "name": "xPos",
         "type": "double"
        },
        {
         "name": "yPos",
         "type": "double"
        },
        {
         "name": "zPos",
         "type": "double"
        },
        {
         "name": "xRot",
         "type": "double"
        },
        {
         "name": "yRot",
         "type": "double"
        },
        {
         "name": "zRot",
         "type": "double"
        },
        {
         "name": "fov",
         "type": "double"
        },
        {
         "name": "aspectRatio",
         "type": "double"
        },
        {
         "name": "nearClip",
         "type": "double"
        },
        {
         "name": "farClip",
         "type": "double"
        },
        {
         "name": "aperture",
         "type": "double"
        },
        {
         "name": "focus",
         "type": "double"
        },
        {
         "name": "focalDistance",
         "type": "double"
        },
        {
         "name": "zoom",
         "type": "double"
        },
        {
         "name": "iris",
         "type": "double"
        },
        {
         "name": "k1",
         "type": "double"
        },
        {
         "name": "k2",
         "type": "double"
        },
        {
         "name": "k3",
         "type": "double"
        },
        {
         "name": "p1",
         "type": "double"
        },
        {
         "name": "p2",
         "type": "double"
        },
        {
         "name": "centerX",
         "type": "double"
        },
        {
         "name": "centerY",
         "type": "double"
        },
        {
         "name": "panelWidth",
         "type": "double"
        },
        {
         "name": "overscan",
         "type": "double"
        },
        {
         "name": "focalLength",
         "type": "optional<double>"
        },
        {
         "name": "focalLengthDistorted",
         "type": "optional<double>"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Sets the position in meters, rotation in quaternions, fov in degrees, centerX, centerX and panelWidth in millimeters.\r\n",
       "name": "setTransformationAndLensPropsExtQuat",
       "params": [
        {
         "name": "xPos",
         "type": "double"
        },
        {
         "name": "yPos",
         "type": "double"
        },
        {
         "name": "zPos",
         "type": "double"
        },
        {
         "name": "xQuat",
         "type": "double"
        },
        {
         "name": "yQuat",
         "type": "double"
        },
        {
         "name": "zQuat",
         "type": "double"
        },
        {
         "name": "wQuat",
         "type": "double"
        },
        {
         "name": "fov",
         "type": "double"
        },
        {
         "name": "aspectRatio",
         "type": "double"
        },
        {
         "name": "nearClip",
         "type": "double"
        },
        {
         "name": "farClip",
         "type": "double"
        },
        {
         "name": "aperture",
         "type": "double"
        },
        {
         "name": "focus",
         "type": "double"
        },
        {
         "name": "focalDistance",
         "type": "double"
        },
        {
         "name": "zoom",
         "type": "double"
        },
        {
         "name": "iris",
         "type": "double"
        },
        {
         "name": "k1",
         "type": "double"
        },
        {
         "name": "k2",
         "type": "double"
        },
        {
         "name": "k3",
         "type": "double"
        },
        {
         "name": "p1",
         "type": "double"
        },
        {
         "name": "p2",
         "type": "double"
        },
        {
         "name": "centerX",
         "type": "double"
        },
        {
         "name": "centerY",
         "type": "double"
        },
        {
         "name": "panelWidth",
         "type": "double"
        },
        {
         "name": "overscan",
         "type": "double"
        },
        {
         "name": "focalLength",
         "type": "optional<double>"
        },
        {
         "name": "focalLengthDistorted",
         "type": "optional<double>"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      }
     ],
     "name": "Camera"
    },
    {
     "methods": [
      {
       "documentation": "Sets the position in meters, rotation and fov in degrees.\r\n",
       "name": "setTransformation",
       "params": [
        {
         "name": "xPos",
         "type": "double"
        },
        {
         "name": "yPos",
         "type": "double"
        },
        {
         "name": "zPos",
         "type": "double"
        },
        {
         "name": "xRot",
         "type": "double"
        },
        {
         "name": "yRot",
         "type": "double"
        },
        {
         "name": "zRot",
         "type": "double"
        },
        {
         "name": "fov",
         "type": "double"
        },
        {
         "name": "aspectRatio",
         "type": "double"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      },
      {
       "documentation": "Sets the position in meters, rotation and fov in degrees.\r\n",
       "name": "setTransformationAndLensProps",
       "params": [
        {
         "name": "xPos",
         "type": "double"
        },
        {
         "name": "yPos",
         "type": "double"
        },
        {
         "name": "zPos",
         "type": "double"
        },
        {
         "name": "xRot",
         "type": "double"
        },
        {
         "name": "yRot",
         "type": "double"
        },
        {
         "name": "zRot",
         "type": "double"
        },
        {
         "name": "fov",
         "type": "double"
        },
        {
         "name": "aspectRatio",
         "type": "double"
        },
        {
         "name": "nearClip",
         "type": "double"
        },
        {
         "name": "farClip",
         "type": "double"
        },
        {
         "name": "aperture",
         "type": "double"
        },
        {
         "name": "focus",
         "type": "double"
        },
        {
         "name": "iris",
         "type": "double"
        },
        {
         "name": "k1",
         "type": "double"
        },
        {
         "name": "k2",
         "type": "double"
        },
        {
         "name": "centerX",
         "type": "double"
        },
        {
         "name": "centerY",
         "type": "double"
        },
        {
         "name": "panelWidth",
         "type": "double"
        }
       ],
       "returnValues": [
        {
         "name": "null",
         "type": "null"
        }
       ]
      }
     ],
     "name": "Perspective"
    }
   ],
   "functions": [
    {
     "documentation": "Sets all entities registered in the current thread. Entities that were previously\r\nregistered that are not in the handle array are removed.\r\nusageHints is either empty or it contains one entry for each handle. Possible entries are:<br>\r\n   \"screen\"<br>\r\n   \"perspective\"<br>\r\n   \"parameter\"<br>\r\n   \"studioCamera\"\r\n",
     "name": "setRegistered",
     "params": [
      {
       "name": "hdls",
       "type": "handle[]"
      },
      {
       "name": "expectedFrequency",
       "type": "int"
      },
      {
       "name": "dampingMs",
       "type": "int"
      },
      {
       "name": "usageHints",
       "type": "string[]"
      }
     ],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "documentation": "Updates the representation of all registered entities.\r\n",
     "name": "reloadRegistered",
     "params": [],
     "returnValues": [
      {
       "name": "null",
       "type": "null"
      }
     ]
    },
    {
     "documentation": "Register projector for use with the Direct API.\r\n",
     "name": "registerProjector",
     "params": [
      {
       "name": "name",
       "type": "string"
      },
      {
       "name": "expectedFrequency",
       "type": "int"
      },
      {
       "name": "dampingMs",
       "type": "int"
      }
     ],
     "returnValues": [
      {
       "name": "handle",
       "type": "handle"
      }
     ]
    },
    {
     "documentation": "Register the screen for use with the Direct API.\r\n",
     "name": "registerScreen",
     "params": [
      {
       "name": "name",
       "type": "string"
      },
      {
       "name": "expectedFrequency",
       "type": "int"
      },
      {
       "name": "dampingMs",
       "type": "int"
      }
     ],
     "returnValues": [
      {
       "name": "handle",
       "type": "handle"
      }
     ]
    },
    {
     "documentation": "Register the parameter for use with the Direct API. At the time when this function is executed\r\nthe layer should already have been displayed at least once. Otherwise the relevant underlying\r\nattributes may not have been initialized yet and can not be cached.<br>\r\nThe instance path traces the name hierarchy in the timeline tree. E.g. \"Timeline 1.Position.x\".\r\n",
     "name": "registerParam",
     "params": [
      {
       "name": "instancePath",
       "type": "string"
      }
     ],
     "returnValues": [
      {
       "name": "handle",
       "type": "handle"
      }
     ]
    },
    {
     "documentation": "Register the camera with the screen group name for use with the Direct API.\r\n",
     "name": "registerCamera",
     "params": [
      {
       "name": "cameraName",
       "type": "string"
      },
      {
       "name": "expectedFrequency",
       "type": "int"
      }
     ],
     "returnValues": [
      {
       "name": "handle",
       "type": "handle"
      }
     ]
    },
    {
     "documentation": "Register the perspective with the screen name for use with the Direct API.\r\n",
     "name": "registerPerspective",
     "params": [
      {
       "name": "screenName",
       "type": "string"
      },
      {
       "name": "expectedFrequency",
       "type": "int"
      }
     ],
     "returnValues": [
      {
       "name": "handle",
       "type": "handle"
      }
     ]
    }
   ],
   "name": "Direct"
  },
  {
   "name": "Unreal",
   "namespaces": [
    {
     "functions": [
      {
       "name": "getSupportedUnrealPluginVersion",
       "params": [],
       "returnValues": [
        {
         "name": "int",
         "type": "int"
        }
       ]
      }
     ],
     "name": "Utility"
    },
    {
     "name": "Network"
    }
   ]
  }
 ]
}